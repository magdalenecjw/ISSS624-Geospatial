---
title: "3: Spatial Interaction Models"
author: "Magdalene Chan"
date: 2023-12-2
date-modified: "last-modified"
execute: 
  warning: false
---

## Getting started

The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:

-   **tmap**: for thematic mapping
-   **sf**: for geospatial data wrangling
-   **tidyverse**: for non-spatial data wrangling

```{r}
pacman::p_load(tmap, sf, sp, DT, stplanr, performance, reshape2,
               ggpubr, units, tidyverse)
```

## Computing Distance Matrix

In spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. A location's distance from itself, which is shown in the main diagonal of a distance matrix table, is 0.

First, import `mpsz.rds` into the R environment by using the code chunk below.

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

Notice that it is a sf tibble dataframe object class.

### Converting from sf data.table to SpatialPolygonsDataFrame

There are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.

First `as.Spatial()` is used to convert `mpsz` from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.

```{r}
mpsz_sp <- as(mpsz, "Spatial")
mpsz_sp
```

Next, the distance is calculated between the centroids of each pair of spatial polygons. This is a common approach as it simplifies the computation while providing a reasonable approximation of the spatial relationship between the polygons. Computing the distance between centroids is computationally less intensive as compared to calculating distances between all points along the edges of polygons, especially when dealing with complex polygons with many vertices. Additionally, centroids represent a single point that encapsulates the entire polygon. While edges provide more detailed information about the shape, centroids offer a generalized representation that can be useful in many cases, especially when the exact shape or details of the edges are less relevant.

```{r}
dist <- spDists(mpsz_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```

Notice that the output dist is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.

### Labelling column and row headers of a distance matrix.

First, create a list sorted according to the the distance matrix by planning sub-zone code.

```{r}
sz_names <- mpsz$SUBZONE_C
```

Next, attach `SUBZONE_C` to row and column for distance matrix matching.

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

### Pivoting distance value by SUBZONE_C

Next, pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

Notice that the within zone distance is 0.

### Updating intra-zonal distances

Next, append a constant value to replace the intra-zonal distance of 0.To do so, first select and find the minimum value of the distance by using `summary()`.

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

Next, a constant distance value of 50m is added into intra-zones distance.

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

The code chunk below will be used to check the result data.frame.

```{r}
#| eval: false
distPair %>%
  summary()
```

The code chunk below is used to rename the origin and destination fields.

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

Lastly, the code chunk below is used to save the dataframe for future use.

```{r}
write_rds(distPair, "data/rds/distPair.rds") 
```

## Preparing flow data

The code chunk below is used import `od_data` rds file that was saved in [Hands-on Exercise 3](https://geospatial2023.netlify.app/hands_on_exercise/ex3/hands_on_ex3) into the R environment.

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

Next, compute the total passenger trip between and within planning subzones by using the code chunk below to get the output `flow_data`.

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(MORNING_PEAK)) 
```

Use the code chunk below to display the `flow_data` dataframe.

```{r}
head(flow_data, 10)
```

### Separating intra-flow from passenger volume df

The code chunk below is used to add three new fields into the `flow_data` dataframe.

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001, 1)
```

### Combining passenger volume data with distance value

Before joining `flow_data` and `distPair`, convert data value type of `ORIGIN_SZ` and `DESTIN_SZ` fields of `flow_data` dataframe into factor data type.

```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)
```

Now, `left_join()` of **dplyr** will be used to join `flow_data` dataframe and `distPair` dataframe to give an output called `flow_data1`.

```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

## Preparing Origin and Destination Attributes

### Importing population data

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

### Geospatial data wrangling

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

### Preparing origin attribute

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
 
```

### Preparing destination attribute

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

The output data file is named `SIM_data` and saved out in rds data file format.

```{r}
write_rds(flow_data1, "data/rds/SIM_data")
```

## Calibrating Spatial Interaction Models

In this section, Spatial Interaction Models are calibrated using Poisson Regression method.

### Importing the modelling data

Firstly, import the modelling data using the code chunk below.

```{r}
SIM_data <- read_rds("data/rds/SIM_data.rds")
```

### Visualising the dependent variable

Plot the distribution of the dependent variable (i.e. `TRIPS`) as a histogram by using the code chunk below.

```{r}
ggplot(data = SIM_data,
       aes(x = TRIPS)) +
  geom_histogram()
```

Notice that the distribution is highly skewed and not resemble a bell shape (also known as a normal distribution).

Next, visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.

```{r}
ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
```

Notice that their relationship hardly resembles a linear relationship.

On the other hand, plotting the scatter plot using the log transformed version of both variables reveals a closer resemblance to a linear relationship.

```{r}
ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point() +
  geom_smooth(method = lm)
```

### Checking for variables with zero values

Since Poisson Regression is based of log and log 0 is undefined, it is important to ensure that there are no 0 values in the explanatory variables. In the code chunk below, `summary()` of Base R is used to compute the summary statistics of all variables in `SIM_data` data frame.

```{r}
summary(SIM_data)
```

The print report above reveals that variables `ORIGIN_AGE7_12`, `ORIGIN_AGE13_24`, `ORIGIN_AGE25_64`,`DESTIN_AGE7_12`, `DESTIN_AGE13_24`, `DESTIN_AGE25_64` all contain 0 values. In view of this, code chunk below will be used to replace zero values to 0.99.

```{r}
SIM_data$DESTIN_AGE7_12 <- ifelse(
  SIM_data$DESTIN_AGE7_12 == 0, 0.99, SIM_data$DESTIN_AGE7_12)
SIM_data$DESTIN_AGE13_24 <- ifelse(
  SIM_data$DESTIN_AGE13_24 == 0, 0.99, SIM_data$DESTIN_AGE13_24)
SIM_data$DESTIN_AGE25_64 <- ifelse(
  SIM_data$DESTIN_AGE25_64 == 0, 0.99, SIM_data$DESTIN_AGE25_64)
SIM_data$ORIGIN_AGE7_12 <- ifelse(
  SIM_data$ORIGIN_AGE7_12 == 0, 0.99, SIM_data$ORIGIN_AGE7_12)
SIM_data$ORIGIN_AGE13_24 <- ifelse(
  SIM_data$ORIGIN_AGE13_24 == 0, 0.99, SIM_data$ORIGIN_AGE13_24)
SIM_data$ORIGIN_AGE25_64 <- ifelse(
  SIM_data$ORIGIN_AGE25_64 == 0, 0.99, SIM_data$ORIGIN_AGE25_64)
```

Run `summary()` again to check that the replacement has been done correctly.

```{r}
summary(SIM_data)
```

Notice that all 0 values have been replaced by 0.99.

### Unconstrained Spatial Interaction Model

Next, calibrate an unconstrained spatial interaction model by using `glm()` of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. `ORIGIN_AGE25_64`) and distance between origin and destination in km (i.e. `dist`).

The general formula of **Unconstrained Spatial Interaction Model** is:

$$
\lambda_{ij} = exp(k + \mu lnV_i + \alpha lnW_j - \beta lnd_{ij})
$$

The code chunk used to calibrate to model is shown below:

```{r}
uncSIM <- glm(formula = TRIPS ~ 
                log(ORIGIN_AGE25_64) + 
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
uncSIM
```

#### R-squared function

To measure how much variation of the trips can be accounted by the model, a function to calculate R-Squared value is written in the code chunk below. 

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

Next, compute the R-squared of the unconstrained SIM by using the code chunk below.

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
```

```{r}
r2_mcfadden(uncSIM)
```

### Origin (Production) Constrained Spatial Interaction Model

Next, fit an origin constrained SIM by using the code chunk below.

The general formula of **Origin Constrained Spatial Interaction Model** is: 

$$
\lambda_{ij} = exp(k + \mu_i + \alpha lnW_j - \beta lnd_{ij})
$$

```{r}
orcSIM <- glm(formula = TRIPS ~ 
                 ORIGIN_SZ +
                 log(DESTIN_AGE25_64) +
                 log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(orcSIM)
```

Examine how the constraints hold for destinations this time.

```{r}
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

### Destination Constrained Spatial Interaction Model

Next, fit a destination constrained SIM by using the code chunk below.

The general formula of **Destination Constrained Spatial Interaction Model** is: 

$$
\lambda_{ij} = exp(k + \mu lnV_i + \alpha_i - \beta lnd_{ij})
$$

```{r}
decSIM <- glm(formula = TRIPS ~ 
                DESTIN_SZ + 
                log(ORIGIN_AGE25_64) + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(decSIM)
```

Examine how the constraints hold for destinations this time.

```{r}
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

### Doubly Constrained Spatial Interaction Model

Next, fit a doubly constrained SIM by using the code chunk below.

The general formula of **Doubly Constrained Spatial Interaction Model** is: 

$$
\lambda_{ij} = exp(k + \mu_i + \alpha_i - \beta lnd_{ij})
$$

```{r}
dbcSIM <- glm(formula = TRIPS ~ 
                ORIGIN_SZ + 
                DESTIN_SZ + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(dbcSIM)
```

Examine how the constraints hold for destinations this time.

```{r}
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```

Notice that there is a relatively greater improvement in the R\^2 value.

### Model comparison

Another useful model performance measure for continuous dependent variable is Root Mean Squared Error, which can be done using the `compare_performance()` of the **performance** package.

First, create a list called `model_list` using the code chunk below.

```{r}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```

Next, compute the RMSE of all the models in `model_list` using the code chunk below.

```{r}
compare_performance(model_list, metrics = "RMSE")
```

The print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.

### Visualising Fitted Values

Next, to visualise the observed values and the fitted values, first extract the fitted values from each model by using the code chunk below.

```{r}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
```

Next, join the values to `SIM_data` data frame.

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

Repeat the same steps for Origin Constrained SIM (i.e. `orcSIM`). 

```{r}
df <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")
```

Repeat the same step by for Destination Constrained SIM (i.e. `decSIM`).

```{r}
df <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")
```

Repeat the same step by for Doubly Constrained SIM (i.e. `dbcSIM`).

```{r}
df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```

Finally, plot the fitted values for all four SIM. 

```{r}
unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
 
orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
 
dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
 
dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
 
ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
 
```
