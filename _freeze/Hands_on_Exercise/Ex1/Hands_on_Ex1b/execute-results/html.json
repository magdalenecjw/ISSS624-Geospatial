{
  "hash": "e01445ea06e472c9af1e493603be1a26",
  "result": {
    "markdown": "---\ntitle: \"1b: Choropleth Mapping with R\"\nauthor: \"Magdalene Chan\"\ndate: 2023-11-17\nexecute: \n  warning: false\n---\n\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, the spatial distribution of aged population of Singapore could be represented on a choropleth map using the Master Plan 2014 Subzone Boundary. In R, choropleth maps can be plotted using the **tmap** package.\n\n## Getting started\n\nThe code chunk below uses `p_load()` of **pacman** package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\n> **sf** package is used for importing, managing, and processing geospatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\nThe data sets used are:\n\n-   Master Plan 2014 Subzone Boundary (Web) (last updated Dec 2014) from [data.gov.sg](https://beta.data.gov.sg/collections/1708/view) retrieved on 17 Nov 2023\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from [Department of Statistics](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) retrieved on 17 Nov 2023\n\n## Importing Data\n\n### Import Geospatial data into R\n\nThe code chunk below uses the `st_read()` function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n:::\n:::\n\n\n> Calling the `mpsz` simple feature data frame will only display the first 10 rows. This makes it much easier to work with large data and prevents R from attempting to display every row of a data frame.\n\n### Import Attribute data into R\n\nThe code chunk below uses the `read_csv()` function of **readr** package to import `respopagsex2000to2018.csv` file into R and save it as a R dataframe called `popdata`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n\n### Data Preparation\n\nBefore a thematic map can be prepared, `popdata` is converted into a data table with year 2020 values and includes the following variables:\n\n-   `YOUNG`: age group 0 to 4 until age groyup 20 to 24,\n-   `ECONOMY ACTIVE`: age group 25-29 until age group 60-64,\n-   `AGED`: age group 65 and above,\n-   `TOTAL`: all age group, and\n-   `DEPENDENCY`: the ratio between young and aged against economy active group.\n\nThe following data wrangling and transformation functions are used: `pivot_wider()` of **tidyr** package, and `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])+rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15]))%>%\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n### Joining Attribute and Geospatial data\n\nBefore performing the georelational join, an extra step is required to convert the values in `PA` and `SZ` fields to uppercase as the values of `PA` and `SZ` fields consist of upper and lowercase while the `SUBZONE_N` and `PLN_AREA_N` columns are entirely in uppercase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate(across(where(is.character), toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\nNext, `left_join()` of **dplyr** is used to join the geographical data and attribute table using Planning Subzone name i.e. SUBZONE_N and SZ as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n## Choropleth Mapping Geospatial Data Using tmap\n\nTwo approaches can be used to prepare thematic maps using the **tmap** package:\n\n-   Plotting a thematic map quickly by using `qtm()`.\n-   Plotting a highly customisable thematic map by using **tmap** elements.\n\n### Plotting a choropleth map quickly by using qtm()\n\n`qtm()` is the easiest and quickest to draw a choropleth map using **tmap** as it is concise and provides a good default visualisation in many cases. The code chunk below will draw a cartographic standard choropleth map as shown below.\n\n> `tmap_mode()` with `plot` option produces a static map. For interactive mode, `view` option should be used.\n\n> `fill` argument is used to map the attribute of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n> However, when using `qtm()`, aesthetics of individual layers are harder to control. To draw a high quality cartographic choropleth map, **tmap** drawing elements should be used.\n\n### Drawing Base Map using tmap elements\n\nThe basic building block of **tmap** is `tm_shape()` followed by one or more layer elements such as `tm_fill()` and `tm_polygons()`. In the code chunk below, `tm_shape()` is used to define the input data (i.e `mpsz_pop2020`) and `tm_polygons()` is used to draw the Planning Subzone polygons.\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by Planning Subzone, assign the target variable such as `Dependency` to `tm_polygons()`.\n\n> The default interval binning used to draw the choropleth map is `pretty`. **tmap** provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\n\n> By default, missing values will be shaded in grey.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Drawing a choropleth map using `tm_fill()` and `tm_border()`\n\n`tm_polygons()` is a wrapper of `tm_fill()` and `tm_border()`. `tm_fill()` shades the polygons using the default colour scheme and `tm_borders()` adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using `tm_fill()` alone, and the Planning Subzones are shaded according to the respective `DEPENDENCY` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n`tm_borders()` adds light grey borders on the boundary of the Planning Subzones.\n\n> The `alpha` argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the `alpha` value of the col is used (normally 1). Other arguments that can be specified include `col` = border colour, `lwd` = border line width (default = 1), and `lty` = border line type (default = 'solid').\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Data Classification Methods of tmap\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes. To define a data classification method, use the `style` argument of `tm_fill()` or `tm_polygons()`.\n\n::: panel-tabset\n### Equal: 5 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n> The `equal` style divides input values into bins of equal range. In variables with a skewed distribution, the resulting map is likely to end up with little color diversity.\n\n### Standard Deviation: 5 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n> The `sd` style calculates a standard deviation of a given variable, and next use this value as the break width.\n\n### Quantile: 5 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n> The `quantile` style creates breaks with an equal number of features (polygons).\n\n### Jenks: 5 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n> The Jenks optimization method, also called the Jenks natural breaks classification method, is a data clustering method designed to determine the best arrangement of values into different classes. This is done by seeking to minimize each class's average deviation from the class mean, while maximizing each class's deviation from the means of the other classes. In other words, the method seeks to reduce the variance within classes and maximize the variance between classes.\n\n### KMeans: 5 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n> Classification by KMeans Clustering is somewhat similar to natural breaks (Jenks), except that KMeans looks for centres of clusters of features with similar attribute values rather than looking for breaks between feature attribute values.\n\n### Fisher: 5 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n> The `fisher` style creates groups with maximalized homogeneity.\n:::\n\n::: callout-warning\nIn this example, the distribution of equal data classification method is substantially less evenly distributed than the quantile data classification method. The distribution of the variable and the objectives of the analysis are important factors that should be considered when deciding on the data classification method to use.\n:::\n\n::: panel-tabset\n### Equal: 2 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### Equal: 6 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### Equal: 10 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### Equal: 20 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### Quantile: 2 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### Quantile: 6 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### Quantile: 10 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Quantile: 20 classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n:::\n\n> Increasing the number of classes may not always be beneficial for the analysis: In the `equal` data classification method, the additional classes added more colours to the legend without meaningful impact on the map. For `quantile` data classification method, the additional number of classes appeared to be useful up until around n=10 -- beyond that, again, the additional colours did not value-add to the map.\n\n### Plotting choropleth map with custom breaks (Fixed Data Classification)\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the `tm_fill()`.\n\n> In **tmap**, the breaks include a minimum and maximum. Hence, for n categories, n+1 elements must be specified in the breaks option in increasing order.\n\nDescriptive statistics on the variable can be used to guide the setting of the break points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n```\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.65, 0.70, 0.75 and 0.80. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Hence, we set the `breaks` vector as `c(0, 0.60, 0.65, 0.70, 0.75, 0.80, 1.00)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.65, 0.70, 0.75, 0.80, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### Colour Scheme\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package. To change the colour, assign the preferred colour to palette argument of `tm_fill()` as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nTo reverse the colour shading, add a \"-\" prefix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Map Layouts\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks. In **tmap**, several legend options are provided to change the placement, format and appearance of the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n**tmap** allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`. The code chunk below uses the `classic` style.\n\n> Other available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\".\n\n> To reset to the default style use `tmap_style(\"white\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass using `tm_compass()`, scale bar using `tm_scale_bar()` and grid lines using `tm_grid()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Subzone boundary from Urban Redevelopment Authorithy (URA)\n             and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n### Small Multiple Choropleth Maps (Facet Choropleth Maps)\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the aesthetic arguments,\n-   by defining a group-by variable in `tm_facets()`, and\n-   by creating multiple stand-alone maps with `tmap_arrange()`.\n\n::: panel-tabset\n### By assigning multiple values to aesthetic arguments\n\nSmall multiple choropleth maps can be created by defining `ncols` in `tm_fill()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nIt is also possible to assign multiple values to at least one of the aesthetic arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Purples\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n### By defining a group-by variable in tm_facets()\n\nSmall multiple choropleth maps can be created by using `tm_facets()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n### By creating multiple stand-alone maps with tmap_arrange()\n\nSmall multiple choropleth maps can be created by creating multiple stand-alone maps with `tmap_arrange()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n:::\n\n### Mappping Spatial Object Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, it is also possible to use selection function to map spatial objects meeting the selection criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_on_Ex1b_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands_on_Ex1b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}