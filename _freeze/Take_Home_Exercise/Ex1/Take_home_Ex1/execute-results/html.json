{
  "hash": "cd3f736824528c837638484590d2288d",
  "result": {
    "markdown": "---\ntitle: \"1: Geospatial Analytics for Public Good\"\nauthor: \"Magdalene Chan\"\ndate: 2023-11-25\ndate-modified: \"last-modified\"\nexecute: \n  warning: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n# Objectives\n\nAs city-wide urban infrastructures become increasingly digital, datasets\nfrom technologies like GPS and RFID on vehicles offer opportunities to\ntrack movement patterns over space and time. For instance, smart cards\nand GPS devices on public buses collect routes and ridership data,\ncontaining valuable structure and patterns for understanding human\nmovement and behavior within cities. Despite their potential, the\npractical use of these extensive location-aware datasets often remains\nlimited to basic tracking and mapping within GIS applications due to the\nlack of comprehensive spatial and spatio-temporal analysis functions in\nconventional GIS tools.\n\nExploratory Spatial Data Analysis (ESDA) holds tremendous potential to\naddress such complex problems. In this study, appropriate Local\nIndicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis\n(EHSA) will be applied to undercover the spatial and spatio-temporal\nmobility patterns of public bus passengers in Singapore.\n\n# Tasks\n\nThe following tasks will be undertaken in this exercise:\n\n## Geovisualisation and Analysis\n\n1.  Compute the passenger trips generated by origin at the hexagon level\n    for the following time periods:\n    1.  Weekday morning peak (6am to 9am)\n    2.  Weekday afternoon peak (5pm to 8pm)\n    3.  Weekend/holiday morning peak (11am to 2pm)\n    4.  Weekend/holiday evening peak (4pm to 7pm)\n2.  Display the geographical distribution of the passenger trips by\n    using appropriate geovisualisation methods.\n3.  Describe the spatial patterns revealed by the geovisualisation (not\n    more than 200 words per visual).\n\nLocal Indicators of Spatial Association (LISA) Analysis\n\n1.  Compute LISA of the passengers trips generate by origin at hexagon\n    level. Display the LISA maps of the passengers trips generate by\n    origin at hexagon level. The maps should only display the\n    significant (i.e. p-value \\< 0.05) With reference to the analysis\n    results, draw statistical conclusions (not more than 200 words per\n    visual). \n    \nEmerging Hot Spot Analysis(EHSA) \n\n1. With reference to the passenger trips by origin at the hexagon level for the four time intervals given above:\n\nPerform Mann-Kendall Test by using the spatio-temporal local Gi\\*\nvalues, Prepared EHSA maps of the Gi\\* values of the passenger trips by\norigin at the hexagon level. The maps should only display the\nsignificant (i.e. p-value \\< 0.05). With reference to the EHSA maps and\ndata visualisation prepared, describe the spatial patterns reveled. (not\nmore than 250 words per cluster).\n\n# Getting Started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, mapview, tmap)\n```\n:::\n\n\nThe data sets used are:\n\n-   Master Plan 2019 Subzone Boundary (No Sea) (last updated Dec 2019) from [data.gov.sg](https://beta.data.gov.sg/collections/1749/view) - reformatted into shapefile format\n-   Bus Stop Location (Last updated Jul 2023) from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/static-data.html) retrieved on 18 Nov 2023\n-   Passenger Volume by Origin Destination Bus Stops for Aug-Oct 2023 from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/dynamic-data.html) retrieved on 18 Nov 2023\n\n## Import Passenger Volume by Origin-Destination Bus Stops\n\nThe code chunk below uses the `read_csv()` function of **readr** package to import the csv file into R and save it as a R dataframe called `odbus`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus <- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n```\n:::\n\n\n`ORIGIN_PT_CODE` and `DESTINATION_PT_CODE` are numeric variables that are categorical in nature. As such, they should be transformed to factor so that R treats them as a grouping variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)\n```\n:::\n\n\n## Extract Commuting Flow data\n\nThe code chunk below extracts commuting flows on weekday during the rush hour (7am, 8am, 9am).\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigtrip_7_9 <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%\n  group_by(ORIGIN_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n\n## Import Geospatial Data\n\nTwo geospatial data are used in this exercise.\n\n## Import Bus Stop Locations\n\nThe code chunk below uses the `st_read()` function of **sf** package to import `BusStop` shapefile into R as a simple feature data frame called `BusStop`. As `BusStop` uses **svy21** projected coordinate system, the `crs` is set to 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBusStop <- st_read(dsn = \"data/geospatial\", \n                layer = \"BusStop\") %>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n## Import Planning Subzone data\n\nThe code chunk below uses the `st_read()` function of **sf** package to import `MPSZ-2019` shapefile into R as a simple feature data frame called `mpsz`. To ensure we can use `mpsz` together with `BusStop`, `mpsz` is reprojected to the **svy21** projected coordinate system (`crs=3413`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MPSZ-2019\") %>%\n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n## Combine Bus Stop Locations and Planning Subzone data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_mpsz <- st_intersection(BusStop, mpsz) %>%\n  select(BUS_STOP_N, SUBZONE_C) %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_SZ <- left_join(origtrip_7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %>%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C) %>%\n  group_by(ORIGIN_SZ) %>%\n  summarise(TOT_TRIPS = sum(TRIPS))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- origin_SZ %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_data <- unique(origin_SZ)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigintrip_SZ <- left_join(mpsz, \n                           origin_SZ,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(origintrip_SZ)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Take_home_Ex1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\narea_honeycomb_grid = st_make_grid(origintrip_SZ, c(800, 800), what = \"polygons\", square = FALSE)\n\n# To sf and add grid ID\nhoneycomb_grid_sf = st_sf(area_honeycomb_grid) %>%\n  # add grid ID\n  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))\n\n# count number of points in each grid\n# https://gis.stackexchange.com/questions/323698/counting-points-in-polygons-with-sf-package-of-r\nhoneycomb_grid_sf$TOT_TRIPS = lengths(st_intersects(honeycomb_grid_sf, origintrip_SZ))\n\n# remove grid without value of 0 (i.e. no points in side that grid)\nhoneycomb_count = filter(honeycomb_grid_sf, TOT_TRIPS > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nmap_honeycomb = tm_shape(honeycomb_count) +\n  tm_fill(\n    col = \"TOT_TRIPS\",\n    palette = \"Blues\",\n    style = \"cont\",\n    title = \"Number of trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.vars = c(\n      \"Number of trips: \" = \"TOT_TRIPS\"\n    ),\n    popup.format = list(\n      TOT_TRIPS = list(format = \"f\", digits = 0)\n    )\n  ) +\n  tm_borders(col = \"grey40\", lwd = 0.7)\nmap_honeycomb\n```\n\n::: {.cell-output-display}\n![](Take_home_Ex1_files/figure-html/unnamed-chunk-15-1.png){width=1152}\n:::\n:::",
    "supporting": [
      "Take_home_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}