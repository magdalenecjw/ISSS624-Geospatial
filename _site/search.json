[
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/Retails.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/Retails.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/Liesure&Recreation.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/Liesure&Recreation.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/F&B.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/F&B.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/Business.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/Business.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "",
    "text": "The key packages to be used in this exercise are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\nspdep: for spatial weights matrix\nspflow: for spatial econometric models of O-D flow\ntidyverse: for non-spatial data wrangling\n\nHowever, as the latest version of the spflow package is not available on CRAN yet, the install_github() function of devtools package will be used to install the spflow package first.\n\ndevtools::install_github(\"LukeCe/spflow\")\n# Check that version number should be at least 0.1.0.9010\n\nThe code chunk below then uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\npacman::p_load(tmap, sf, spdep, sp, Matrix, spflow, knitr, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html#getting-started",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html#getting-started",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "",
    "text": "The key packages to be used in this exercise are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\nspdep: for spatial weights matrix\nspflow: for spatial econometric models of O-D flow\ntidyverse: for non-spatial data wrangling\n\nHowever, as the latest version of the spflow package is not available on CRAN yet, the install_github() function of devtools package will be used to install the spflow package first.\n\ndevtools::install_github(\"LukeCe/spflow\")\n# Check that version number should be at least 0.1.0.9010\n\nThe code chunk below then uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\npacman::p_load(tmap, sf, spdep, sp, Matrix, spflow, knitr, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html#data-preparation",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html#data-preparation",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "Data Preparation",
    "text": "Data Preparation\nBefore calibrating Spatial Econometric Interaction Models using spflow, three data sets are required:\n\nspatial weights\ntibble data frame O-D flow matrix (with distance)\ntibble data frame consisting of explanatory variables (does not need to differentiate origin vs. destination variables)\n\n\nmpsz_nb &lt;- read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow &lt;- read_rds(\"data/rds/mpsz_flow.rds\")\nmpsz_var &lt;- read_rds(\"data/rds/mpsz_var.rds\")"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html#creating-spflow_network-class-objects",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html#creating-spflow_network-class-objects",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "Creating spflow_network-class objects",
    "text": "Creating spflow_network-class objects\nspflow_network-class is an S4 class containing information on a spatial network which is composed by a set of nodes that are linked by some neighbourhood relation. It can be created using spflow_network() function of spflow package. For our model, we choose the contiguity based neighbourhood structure.\n\nmpsz_net &lt;- spflow_network(\n  id_net = \"sg\",  # assign an id name, can give it any input\n  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),\n  node_data = mpsz_var,\n  node_key_column = \"SZ_CODE\"\n)\n\nmpsz_net\n\nSpatial network nodes with id: sg\n--------------------------------------------------\nNumber of nodes: 313\nAverage number of links per node: 6.077\nDensity of the neighborhood matrix: 1.94% (non-zero connections)\n\nData on nodes:\n                SZ_NAME SZ_CODE BUSSTOP_COUNT AGE7_12 AGE13_24 AGE25_64\n1      INSTITUTION HILL  RVSZ05             2     330      360     2260\n2        ROBERTSON QUAY  SRSZ01            10     320      350     2200\n3          FORT CANNING  MUSZ02             6       0       10       30\n4      MARINA EAST (MP)  MPSZ05             2       0        0        0\n5               SENTOSA  SISZ01             1     200      260     1440\n6        CITY TERMINALS  BMSZ17            10       0        0        0\n---                 ---     ---           ---     ---      ---      ---\n308            NEE SOON  YSSZ07            12      90      140      590\n309       UPPER THOMSON  BSSZ01            47    1590     3660    15980\n310          SHANGRI-LA  AMSZ05            12     810     1920     9650\n311          TOWNSVILLE  AMSZ04             9     980     2000    11320\n312           MARYMOUNT  BSSZ02            25    1610     4060    16860\n313 TUAS VIEW EXTENSION  TSSZ06            11       0        0        0\n    SCHOOL_COUNT BUSINESS_COUNT RETAILS_COUNT FINSERV_COUNT ENTERTN_COUNT\n1              1              6            26             3             0\n2              0              4           207            18             6\n3              0              7            17             0             3\n4              0              0             0             0             0\n5              0              1            84            29             2\n6              0             11            14             4             0\n---          ---            ---           ---           ---           ---\n308            0              0             7             0             0\n309            3             21           305            30             0\n310            3              0            53             9             0\n311            1              0            83            11             0\n312            3             19           135             8             0\n313            0             53             3             1             0\n    FB_COUNT LR_COUNT COORD_X COORD_Y\n1          4        3  103.84    1.29\n2         38       11  103.84    1.29\n3          4        7  103.85    1.29\n4          0        0  103.88    1.29\n5         38       20  103.83    1.25\n6         15        0  103.85    1.26\n---      ---      ---     ---     ---\n308        0        0  103.81     1.4\n309        5       11  103.83    1.36\n310        0        0  103.84    1.37\n311        1        1  103.85    1.36\n312        3       11  103.84    1.35\n313        0        0  103.61    1.26\n\n\nspflow_network_pair-class is an S4 class containing information on O-D pairs. It can be created using spflow_network_pair() function of spflow package.\n\nmpsz_net_pairs &lt;- spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = mpsz_flow,\n  orig_key_column = \"ORIGIN_SZ\",\n  dest_key_column = \"DESTIN_SZ\"\n)\n\nmpsz_net_pairs\n\nSpatial network pair with id: sg_sg\n--------------------------------------------------\nOrigin network id: sg (with 313 nodes)\nDestination network id: sg (with 313 nodes)\nNumber of pairs: 97969\nCompleteness of pairs: 100.00% (97969/97969)\n\nData on node-pairs:\n      DESTIN_SZ ORIGIN_SZ DISTANCE TRIPS\n1        RVSZ05    RVSZ05        0    67\n314      SRSZ01    RVSZ05   305.74   251\n627      MUSZ02    RVSZ05   951.83     0\n940      MPSZ05    RVSZ05  5254.07     0\n1253     SISZ01    RVSZ05     4975     0\n1566     BMSZ17    RVSZ05  3176.16     0\n---         ---       ---      ---   ---\n96404    YSSZ07    TSSZ06 26972.97     0\n96717    BSSZ01    TSSZ06 25582.48     0\n97030    AMSZ05    TSSZ06 26714.79     0\n97343    AMSZ04    TSSZ06 27572.74     0\n97656    BSSZ02    TSSZ06  26681.7     0\n97969    TSSZ06    TSSZ06        0   270\n\n\nspflow_network_multi-class is an S4 class containing information on the origins, the destinations, and the O-D pairs. It can be created using spflow_network_multi() function of spflow package and only works on spflow_network-class and spflow_network_pair-class.\n\nmpsz_multi_net &lt;- spflow_network_multi(mpsz_net,\n                                       mpsz_net_pairs)\n\nmpsz_multi_net\n\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  sg\nContains 1 spatial network pairs  \n    With id :  sg_sg\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS     C_PAIRS  C_ORIG  C_DEST\n          sg          sg       sg_sg      100.00% 97969/97969 313/313 313/313"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html#check-for-multicollinearity",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html#check-for-multicollinearity",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "Check for Multicollinearity",
    "text": "Check for Multicollinearity\n\ncor_formula &lt;- log(1 + TRIPS) ~\n  BUSSTOP_COUNT + \n  AGE7_12 + \n  AGE13_24 + \n  AGE25_64 + \n  SCHOOL_COUNT + \n  BUSINESS_COUNT + \n  RETAILS_COUNT + \n  FINSERV_COUNT + \n  P_(log(DISTANCE + 1))   # P stands for the impedence\n\ncor_mat &lt;- pair_cor(\n  mpsz_multi_net,\n  spflow_formula = cor_formula,\n  add_lags_x = FALSE\n)\n\n# Labels\ncolnames(cor_mat) &lt;- paste0(substr(colnames(cor_mat),1,3),\"...\")\n\ncor_image(cor_mat)"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html#base-model-calibration",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html#base-model-calibration",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "Base Model Calibration",
    "text": "Base Model Calibration\nThere are currently three estimators of spatial econometric interaction models supported by spflow package:\n\nMaximum likelihood estimation (MLE) – default estimation procedure.\nSpatial two-stage least squares (S2SLS) – activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = \"s2sls\").\nBayesian Markov Chain Monte Carlo (MCMC) – activate the MCMC estimation via the estimation_control argument using the input spflow_control(estimation_method = \"mcmc\").\n\nThe function offers a formula interface adapted to spatial interaction models, which has the following structure:\n\nY ~ O_(X1) + D_(X2) + I_(X3) + P_(X4)\n\n\nO_(…) and D_(…) indicate which variables are used as characteristics of the origins and destinations respectively\nI_(…) indicates variables that should be used for the intra-regional parameters\nP_(…) declares which variables describe origin-destination pairs, which usually will include a measure of distance (distance decay).\n\n\nbase_model &lt;- spflow(\n  spflow_formula = log(1 + TRIPS) ~\n    O_(BUSSTOP_COUNT + \n         AGE25_64) + \n    D_(SCHOOL_COUNT + \n         BUSINESS_COUNT + \n         RETAILS_COUNT + \n         FINSERV_COUNT) + \n    P_(log(DISTANCE + 1)),\n  spflow_networks = mpsz_multi_net\n)\n\nbase_model\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.680  0.004  192.554  0.000\nrho_o                   0.678  0.004  187.732  0.000\nrho_w                  -0.396  0.006  -65.591  0.000\n(Intercept)             0.410  0.065    6.266  0.000\n(Intra)                 1.313  0.081   16.263  0.000\nD_SCHOOL_COUNT          0.017  0.002    7.885  0.000\nD_SCHOOL_COUNT.lag1     0.002  0.004    0.551  0.581\nD_BUSINESS_COUNT        0.000  0.000    3.015  0.003\nD_BUSINESS_COUNT.lag1   0.000  0.000   -0.249  0.804\nD_RETAILS_COUNT         0.000  0.000   -0.306  0.759\nD_RETAILS_COUNT.lag1    0.000  0.000    0.152  0.880\nD_FINSERV_COUNT         0.002  0.000    6.787  0.000\nD_FINSERV_COUNT.lag1   -0.002  0.001   -3.767  0.000\nO_BUSSTOP_COUNT         0.002  0.000    6.806  0.000\nO_BUSSTOP_COUNT.lag1   -0.001  0.000   -2.364  0.018\nO_AGE25_64              0.000  0.000    7.336  0.000\nO_AGE25_64.lag1         0.000  0.000   -2.797  0.005\nP_log(DISTANCE + 1)    -0.050  0.007   -6.793  0.000\n\n--------------------------------------------------\nR2_corr: 0.6942944  \nObservations: 97969  \nModel coherence: Validated\n\n\n\n\n\n\n\n\nInsights and Interpretation of results\n\n\n\nBased on the print result above, model 9 and MLE estimator is used (defaults). The R2 value is 0.694, which means the model accounts for 69.42% of the variation of flows.\nrho_d - destination constrain rho_o - origin constrain rho_w - intrazonal constrain\nD_SCHOOL_COUNT has a t.stat that is statistically significant, but the t.stat of its lag is not statistically significant. Similarly for D_BUSINESS_COUNT and its lag.\n\nSchool and Business counts in the zone will affect the attractiveness, but not school and business counts in neighbouring zones.\n\nD_RETAILS_COUNT and its lag are both not statistically significant.\n\nNot a good explanatory variable for weekday morning peak.\n\nD_FINSERV_COUNT and its lag are both statistically significant.\n\nGood explanatory variable: Financial services counts in the zone and in neighbouring zones will affect the attractiveness\n\nO_BUSSTOP_COUNT and its lag are both statistically significant. Simialrly for O_AGE25_64 and and its lag.\n\nGood explanatory variable: Financial services counts in the zone and in neighbouring zones will affect the attractiveness\n\n\n\n\nold_par &lt;- par(mfrow = c(1,3),\n               mar = c(2,2,2,2))\nspflow_moran_plots(base_model)\n\n\n\npar(old_par)\n\nNext, pair_cor() can be used to inspect the relationship of the residual and the explanatory variables by using the code chunk below.\n\nCheck for multi-collinearity again.\n\n\ncorr_residual &lt;- pair_cor(base_model)\ncolnames(corr_residual) &lt;- substr(colnames(corr_residual),1,3)\ncor_image(corr_residual)"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/In_Class_Ex5.html#working-with-model-control",
    "href": "In_Class_Exercise/Ex5/In_Class_Ex5.html#working-with-model-control",
    "title": "5: Spatial Econometric Interaction Model",
    "section": "Working with model control",
    "text": "Working with model control\nExample of running MLE Model 8:\n\nspflow_formula &lt;- log(1 + TRIPS) ~\n    O_(BUSSTOP_COUNT + \n         AGE25_64) + \n    D_(SCHOOL_COUNT + \n         BUSINESS_COUNT + \n         RETAILS_COUNT + \n         FINSERV_COUNT) + \n    P_(log(DISTANCE + 1))\n\nmodel_control &lt;- spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_8\"\n)\n\nmle_model8 &lt;- spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control\n)\n\nmle_model8\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_8)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\nrho_d                   0.689  0.003   196.832  0.000\nrho_o                   0.687  0.004   192.214  0.000\nrho_w                  -0.473  0.003  -142.469  0.000\n(Intercept)             1.086  0.049    22.275  0.000\n(Intra)                 0.840  0.075    11.255  0.000\nD_SCHOOL_COUNT          0.019  0.002     8.896  0.000\nD_SCHOOL_COUNT.lag1     0.019  0.004     5.130  0.000\nD_BUSINESS_COUNT        0.000  0.000     3.328  0.001\nD_BUSINESS_COUNT.lag1   0.000  0.000     1.664  0.096\nD_RETAILS_COUNT         0.000  0.000    -0.414  0.679\nD_RETAILS_COUNT.lag1    0.000  0.000    -0.171  0.864\nD_FINSERV_COUNT         0.002  0.000     6.150  0.000\nD_FINSERV_COUNT.lag1   -0.003  0.001    -4.601  0.000\nO_BUSSTOP_COUNT         0.003  0.000     7.676  0.000\nO_BUSSTOP_COUNT.lag1    0.000  0.000     0.552  0.581\nO_AGE25_64              0.000  0.000     6.870  0.000\nO_AGE25_64.lag1         0.000  0.000    -0.462  0.644\nP_log(DISTANCE + 1)    -0.125  0.005   -22.865  0.000\n\n--------------------------------------------------\nR2_corr: 0.6965974  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nThe R2 of Model 8 is 0.696, meaning the model accounts for 69.65% of the variation of flows – slightly higher than that for Model 9.\n\nExample of running MLE Model 1 (unconstrained):\n\nmodel_control &lt;- spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_1\"\n)\n\nmle_model1 &lt;- spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control\n)\n\nmle_model1\n\n--------------------------------------------------\nSpatial interaction model estimated by: OLS  \nSpatial correlation structure: SLX (model_1)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\n(Intercept)            11.384  0.069   164.255  0.000\n(Intra)                -6.006  0.112   -53.393  0.000\nD_SCHOOL_COUNT          0.093  0.003    28.599  0.000\nD_SCHOOL_COUNT.lag1     0.255  0.006    44.905  0.000\nD_BUSINESS_COUNT        0.001  0.000    10.036  0.000\nD_BUSINESS_COUNT.lag1   0.003  0.000    18.274  0.000\nD_RETAILS_COUNT         0.000  0.000    -1.940  0.052\nD_RETAILS_COUNT.lag1    0.000  0.000    -2.581  0.010\nD_FINSERV_COUNT         0.005  0.000    10.979  0.000\nD_FINSERV_COUNT.lag1   -0.016  0.001   -17.134  0.000\nO_BUSSTOP_COUNT         0.014  0.001    25.865  0.000\nO_BUSSTOP_COUNT.lag1    0.015  0.001    21.728  0.000\nO_AGE25_64              0.000  0.000    14.479  0.000\nO_AGE25_64.lag1         0.000  0.000    14.452  0.000\nP_log(DISTANCE + 1)    -1.281  0.008  -165.327  0.000\n\n--------------------------------------------------\nR2_corr: 0.2831458  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nThe R2 of Model 1 (unconstrained) is only 0.2831, meaning the model accounts for 28.31% of the variation of flows.\n\nExample of running MLE Model 2 (constrained):\n\nmodel_control &lt;- spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_2\"\n)\n\nmle_model2 &lt;- spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control\n)\n\nmle_model2\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_2)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.731  0.003  218.603  0.000\n(Intercept)             3.068  0.067   45.899  0.000\n(Intra)                -0.398  0.093   -4.291  0.000\nD_SCHOOL_COUNT          0.063  0.003   24.291  0.000\nD_SCHOOL_COUNT.lag1     0.054  0.005   11.802  0.000\nD_BUSINESS_COUNT        0.001  0.000    8.790  0.000\nD_BUSINESS_COUNT.lag1   0.001  0.000    3.925  0.000\nD_RETAILS_COUNT         0.000  0.000   -1.076  0.282\nD_RETAILS_COUNT.lag1    0.000  0.000    0.251  0.802\nD_FINSERV_COUNT         0.007  0.000   18.054  0.000\nD_FINSERV_COUNT.lag1   -0.009  0.001  -12.691  0.000\nO_BUSSTOP_COUNT         0.003  0.000    8.269  0.000\nO_BUSSTOP_COUNT.lag1    0.004  0.001    7.808  0.000\nO_AGE25_64              0.000  0.000    3.918  0.000\nO_AGE25_64.lag1         0.000  0.000    4.421  0.000\nP_log(DISTANCE + 1)    -0.351  0.007  -47.000  0.000\n\n--------------------------------------------------\nR2_corr: 0.5527887  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nThe R2 of Model 2 (constrained) is 0.5527, meaning the model accounts for 55.27% of the variation of flows – higher than that of Model 1 (unconstrained)."
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/MPSZ-2019.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/FinServ.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/FinServ.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/entertn.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/entertn.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\nperformance: for computing statistical metrics such as RMSE\n\n\npacman::p_load(tmap, sf, performance, ggpubr, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#getting-started",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#getting-started",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\nperformance: for computing statistical metrics such as RMSE\n\n\npacman::p_load(tmap, sf, performance, ggpubr, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#importing-flow-data",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#importing-flow-data",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "Importing flow data",
    "text": "Importing flow data\n\nflow_data &lt;- read_rds(\"data/rds/flow_data_tidy.rds\")\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ MORNING_PEAK    &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ dist            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ RETAIL_COUNT    &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0, flow_data$MORNING_PEAK\n)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001, 1\n)\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\ninter_zonal_flow &lt;- inter_zonal_flow %&gt;%\n  rename(\"DIST\" = \"dist\",\n         \"TRIPS\" = \"MORNING_PEAK\")"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#origin-production-constrained-sim",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#origin-production-constrained-sim",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "Origin (Production) constrained SIM",
    "text": "Origin (Production) constrained SIM\n\n“-1” is added to the formula to remove the intercept as the origin has already been constrained, so the concept of an intercept does not make sense in this case.\n\n\norcSIM_Poisson &lt;- glm(formula = TRIPS ~ \n                        ORIGIN_SZ + \n                        log(SCHOOL_COUNT) + \n                        log(RETAIL_COUNT) + \n                        log(DIST) - 1,\n                      family = poisson(link = \"log\"),\n                      data = inter_zonal_flow,\n                      na.action = na.exclude)\n\nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(RETAIL_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-250.52   -17.17    -7.98     1.24   470.15  \n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(RETAIL_COUNT)  0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\nObserve the following in the output:\n\nDIST must be negative since it is an inverse relationship; usually the further it is, the less likely people are willing to travel, while the closer it is, the more likely people are willing to travel."
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#goodness-of-fit",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#goodness-of-fit",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "Goodness-of-Fit",
    "text": "Goodness-of-Fit\nThe code chunk below creates a function that takes in two input data: observed data and estimated data. It computes a correlation coefficient of the two input data and squares it to provides the R2 value.\n\nR2 value is a measure of how well the variables explain the rate of change of flow.\n\n\nCalcRSquared &lt;- function(observed, estimated){\n  r &lt;- cor(observed, estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nWe can examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.4362208\n\n\nRMSE is a measure of how closely the variables can estimate the rate of change of flow.\n\nThe normalized argument should be set to TRUE if the data follows a normal distribution.\n\n\nperformance_rmse(orcSIM_Poisson, normalized = F)\n\n[1] 2613.236"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#doubly-constrained-sim",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#doubly-constrained-sim",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "Doubly constrained SIM",
    "text": "Doubly constrained SIM\n\ndbcSIM_Poisson &lt;- glm(formula = TRIPS ~\n                        ORIGIN_SZ + \n                        DESTIN_SZ + \n                        log(DIST),\n                      family = poisson(link = \"log\"),\n                      data = inter_zonal_flow, \n                      na.action = na.exclude)\n\n\nsummary(dbcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-186.353   -14.006    -5.274     3.448   303.565  \n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.8312374  0.0059160  3690.190  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.5263502  0.0048031   109.585  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.3139982  0.0049254    63.751  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2146257  0.0053639   -40.013  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.1890446  0.0060386   -31.306  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1539201  0.0054401    28.294  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9826565  0.0098676   -99.584  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4488417  0.0093070   -48.226  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0713474  0.0057402    12.429  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.4313742  0.0050370    85.641  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4712226  0.0131178  -112.154  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7250733  0.0111603  -154.573  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8810576  0.0048168   182.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.1100240  0.0055529    19.814  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3606166  0.0050672    71.167  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4624347  0.0044212   330.781  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6207557  0.0050843   122.092  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6712973  0.0051953   129.214  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2338669  0.0100775  -122.437  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -1.0444562  0.0094555  -110.460  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2838426  0.0071354   -39.780  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5550522  0.0059014    94.054  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.7396640  0.0056796   130.231  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2242451  0.0067482   -33.230  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2371614  0.0069386   -34.180  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.1413812  0.0065035   -21.739  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7089989  0.0051843   136.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.0907065  0.0059157   -15.333  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.1775146  0.0063302   -28.042  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.3684539  0.0154280  -153.516  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.8078475  0.0197839  -141.926  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3122763  0.0466091   -71.065  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.6770542  0.0241793  -110.717  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.0618035  0.0059400    10.405  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3535767  0.0073741  -183.557  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.7569095  0.0063187  -119.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2949304  0.0059603   -49.483  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6131992  0.0172376  -151.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -3.0315024  0.0185502  -163.422  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.6962524  0.0064068  -108.674  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.9310730  0.0064541  -144.261  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.2911253  0.0092047  -140.268  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6687004  0.0095708  -174.353  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.1152794  0.0072027  -154.841  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.5323954  0.0099932  -153.344  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.6267376  0.0065863   -95.158  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.0475467  0.0072472  -144.544  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5049444  0.0067390   -74.929  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5282897  0.0099545  -153.527  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.5722349  0.0161533   -97.332  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5814175  0.0062904    92.429  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0875442  0.0072190    12.127  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.3358227  0.0070460    47.662  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6507586  0.0057726   112.733  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.9502124  0.0052971   179.384  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -1.0480314  0.0098191  -106.734  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5467931  0.0091676   -59.644  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.2998334  0.0059193    50.654  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2841036  0.0050863    55.856  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2331505  0.0056565   -41.218  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0987284  0.0063715    15.495  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.6261229  0.0084604   -74.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.4326963  0.0073452   -58.909  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4998668  0.0110013  -136.336  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.9564768  0.0122202   -78.270  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.2853131  0.0099328  -129.401  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3870991  0.0144589  -165.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.3715855  0.0113825  -120.499  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.5940232  0.0548979   -65.467  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.7008220  0.0140373   -49.926  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.9109524  0.0122869   -74.140  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8566547  0.0088749   -96.526  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.1153731  0.0066136   168.650  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.3001815  0.0058548    51.271  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.7185711  0.0060595   118.585  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.1389824  0.0053179   214.178  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.6281772  0.0054761   297.324  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.8338470  0.0064178   129.927  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.6528993  0.0082375    79.259  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.7174758  0.0082123   -87.366  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7513100  0.0139062  -125.938  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0362873  0.0085485  -121.224  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6160017  0.0051276   120.136  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.1005122  0.0150228  -139.821  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7252108  0.0049447   146.665  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5343482  0.0062500   -85.496  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2153408  0.0067571   -31.869  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8019961  0.0169078  -106.578  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.9057711  0.0834668   -46.794  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4152419  0.0738650   -46.236  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0183438  0.0315257   -95.742  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.7812384  0.0099367  -179.258  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1074991  0.0054325   -19.788  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2461106  0.0057176   -43.045  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8657186  0.0046413   186.524  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5871393  0.0047939   122.477  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3543819  0.0050461    70.229  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.4218178  0.0050820    83.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2411309  0.0054241    44.456  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.8180622  0.0046153   177.252  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2173687  0.0045655   266.647  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1826300  0.0058214   -31.372  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3172839  0.0050733    62.540  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.1151369  0.0057067   -20.176  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2873441  0.0091690  -140.401  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.3783178  0.0424682   -79.549  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4859234  0.0055927    86.885  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1766088  0.0055800    31.650  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2177441  0.0059535   -36.574  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5532182  0.0104526  -148.597  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3332926  0.0142701  -163.509  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.3007382  0.0055019    54.661  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9687994  0.0121092  -162.587  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3032070  0.0122024  -106.800  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5762635  0.0058766    98.061  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.4423113  0.0194773   -74.051  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.9720897  0.0200811   -98.206  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.3808627  0.0071357    53.374  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.7963999  0.0053150   149.840  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.5429636  0.0049961   308.834  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.6410760  0.0056711   113.042  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1571049  0.0133584  -161.479  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5174532  0.0113384  -133.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.7089963  0.0280439   -96.598  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.5343415  0.0051711   296.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8837410  0.0048845   385.656  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1081286  0.0053307    20.284  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.8844695  0.0067728  -130.591  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.6872640  0.0062857  -109.337  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2090319  0.0122440  -180.418  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1728726  0.0110765  -105.888  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -6.1162315  0.1857789   -32.922  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4082749  0.0092299  -152.578  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7781551  0.0104682  -169.862  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0531568  0.0398803   -51.483  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8825639  0.0287621   -30.685  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6219993  0.0107388   -57.921  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.0840156  0.0173117  -120.382  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9659093  0.0086972  -111.060  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0411153  0.0073403  -141.836  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0001659  0.0059401     0.028 0.977719    \nORIGIN_SZMUSZ02 -3.7599031  0.1037937   -36.225  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0388366  0.0355325   -85.523  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.4230640  0.0235902  -145.106  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.9094796  0.0082551  -110.172  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.0861681  0.0499630   -81.784  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.9497128  0.0565388   -69.858  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.3235636  0.0049439    65.447  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6946748  0.0070536   -98.485  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0540196  0.0083781  -125.806  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.9897977  0.0093463  -105.903  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.2578432  0.0169180  -133.458  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.2399827  0.0130436    18.398  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.3352342  0.0078451   -42.732  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9515148  0.0051376   185.207  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3998952  0.0047991   291.697  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.4451629  0.0063423    70.189  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9705918  0.0122781   -79.050  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0670151  0.0153358   -69.577  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.1229124  0.0373527   -56.834  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.0911932  0.0371296   -83.254  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.1705708  0.0226085   -96.007  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9052637  0.0065952   137.262  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.1720425  0.0125658   -13.691  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.3973459  0.0201408  -119.029  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.4483689  0.0343741  -100.319  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0588530  0.0282328   -72.924  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6399015  0.0120470   -53.117  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.8122270  0.0050886   159.617  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.3990960  0.0051810    77.031  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8485348  0.0079236  -107.089  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.8008791  0.0048532   165.021  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.4498806  0.0121422  -119.408  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.2025045  0.0167118  -191.631  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5862269  0.0067255   -87.165  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.1859270  0.0075531   -24.616  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8715122  0.0068124  -127.929  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.1259816  0.0064796   -19.443  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4620032  0.0079848  -183.098  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6675643  0.0069616   -95.892  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8190026  0.0072713  -112.634  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5189403  0.0099864  -152.101  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4976238  0.0067874   -73.316  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.9006162  0.0075978  -118.536  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6690184  0.0071574   -93.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.5203437  0.0147000  -171.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0461675  0.0190193  -160.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7501068  0.0084481   -88.791  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.9321849  0.0126114  -153.209  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.9576828  0.0127157   -75.315  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8167951  0.0129234  -140.582  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5560563  0.0090507   -61.438  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.8862570  0.0325532   -88.663  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.1555662  0.0281279  -112.186  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9836089  0.0248449  -120.089  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.5520422  0.0561371   -63.274  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.5866584  0.0180382  -143.399  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.2867444  0.0071098    40.331  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.9012334  0.0087262  -103.278  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8311038  0.0055422   149.958  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4044170  0.0062047    65.179  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.2661845  0.0074162   -35.892  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9023075  0.0175046   -51.547  &lt; 2e-16 ***\nORIGIN_SZSBSZ07  0.0505870  0.0131317     3.852 0.000117 ***\nORIGIN_SZSBSZ08 -1.1158011  0.0145416   -76.732  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9682835  0.0095396  -101.501  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1452735  0.0047810   239.548  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2815277  0.0045677   280.564  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.8085857  0.0052756   153.269  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2329413  0.0063113   -36.909  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.0576879  0.0049909   211.925  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.3165908  0.0196831  -117.695  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6606350  0.0088079   -75.005  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.3638984  0.0104040  -131.094  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.1152591  0.0054649    21.091  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2954067  0.0050865    58.077  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0792678  0.0109882  -189.227  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4563227  0.0048880    93.356  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8955254  0.0067100  -133.461  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3184402  0.0093032   -34.229  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1160484  0.0063851   174.790  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.2566692  0.0086021   -29.838  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.5781827  0.0279394   -56.486  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2724361  0.0163597   -16.653  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.4458625  0.0330301   -74.050  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0987076  0.0079626   -12.396  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.2584977  0.0176647  -127.854  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.5878524  0.0489998   -52.814  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8101746  0.0226814   -35.720  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.4186655  0.0288663   -83.789  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7080541  0.0186353   -91.657  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2193476  0.0061823   -35.480  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7772464  0.0043394   409.558  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.0051343  0.0046055   218.249  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.1642370  0.0055078    29.819  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.2878706  0.0114828  -112.157  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.7163504  0.0131268  -130.751  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.6508988  0.0103851  -158.968  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.1545577  0.0137947  -156.187  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3949120  0.0078496   -50.310  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.8058100  0.0069916  -115.253  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5369060  0.0047272   113.577  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.7779333  0.0064278  -121.027  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8153581  0.0061387  -132.823  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5073676  0.0067771   -74.865  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0847301  0.0065717    12.893  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.5839519  0.0066148   -88.280  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0577941  0.0098480  -107.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9067707  0.0071367  -127.057  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1362091  0.0080905  -140.438  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2374621  0.0059472   -39.928  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8028874  0.0069663  -115.253  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.7809271  0.0482843   -57.595  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.0425804  0.0105088     4.052 5.08e-05 ***\nORIGIN_SZTSSZ03  0.1142369  0.0109412    10.441  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.6186261  0.0116324   -53.181  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -1.0846732  0.0173555   -62.497  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.3980173  0.0198100    20.092  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.3545143  0.0092002   147.227  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9863278  0.0330906   -90.247  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.0504916  0.1241385   -40.684  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.5238429  0.0049404   308.448  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.2832576  0.0056218    50.386  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.3702524  0.0053266   257.245  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.0248225  0.0059272   172.903  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.2356778  0.0060587    38.899  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.3146925  0.0059919    52.520  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.4971897  0.0091243  -164.088  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8894079  0.0087414  -101.747  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.4437633  0.0053160   271.590  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.2519398  0.0064443   -39.095  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8726785  0.0057658   151.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.7868139  0.0050674   352.611  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8418040  0.0051738   162.704  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4292096  0.0062520    68.652  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7459961  0.0119123   -62.624  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.8422281  0.0144559   -58.262  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.1829428  0.0067885    26.949  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1159712  0.0050760   219.853  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0694567  0.0045966    15.111  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0760100  0.0044639    17.028  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -1.1306391  0.0064373  -175.639  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.0751133  0.0065164  -164.985  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.9624298  0.0065937  -145.962  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5060319  0.0097616  -154.281  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.4813202  0.0069794   -68.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0220675  0.0066313  -154.129  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1235142  0.0047044    26.255  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8917993  0.0088519  -100.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.0195208  0.0051704     3.775 0.000160 ***\nDESTIN_SZBDSZ01  0.9736349  0.0042757   227.713  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.1969470  0.0055284   -35.625  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1266471  0.0050786    24.938  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1608485  0.0041956   276.684  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.9293840  0.0044412   209.265  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.4090567  0.0050300    81.323  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.8171478  0.0098945   -82.586  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.5895287  0.0111632  -142.391  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3793311  0.0072145  -191.189  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.5253670  0.0061879   -84.903  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -1.0095362  0.0065426  -154.301  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.5662858  0.0056453  -100.311  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9406607  0.0070597  -133.244  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.3129276  0.0067414  -194.755  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0120605  0.0049284     2.447 0.014400 *  \nDESTIN_SZBKSZ08 -1.3658471  0.0075109  -181.849  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1771310  0.0055645   -31.832  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8175223  0.0075645  -108.074  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1631280  0.0071753    22.735  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2598494  0.0081706   154.194  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.5642975  0.0137827   -40.943  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.6921844  0.0054211   127.684  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.1209392  0.0055362   -21.845  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2373881  0.0062427   -38.027  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0407117  0.0058001    -7.019 2.23e-12 ***\nDESTIN_SZBMSZ05 -0.2363309  0.0075967   -31.110  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1930710  0.0134761   -88.532  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4625103  0.0051864    89.178  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8604731  0.0069899  -123.102  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.1290239  0.0154841  -137.498  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4617153  0.0094014  -155.478  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.3234050  0.0085506  -154.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8399230  0.0085361   -98.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1366529  0.0059697    22.891  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0491968  0.0083021  -126.378  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6726684  0.0076276   -88.189  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4011734  0.0116569  -120.201  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5682752  0.0167333   -93.722  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1120017  0.0063197  -175.959  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.0833466  0.0091139  -228.590  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6937265  0.0087437  -193.709  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7964999  0.0066129  -120.447  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2109118  0.0048815    43.206  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.1808365  0.0083657  -141.152  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.2077428  0.0084543   -24.572  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3164175  0.0050682    62.431  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.4852688  0.0057001   -85.134  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.4130432  0.0043061    95.921  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.6215095  0.0048914   127.061  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0145076  0.0071799    -2.021 0.043324 *  \nDESTIN_SZBTSZ03  0.4919981  0.0058498    84.105  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.6957555  0.0114078   -60.989  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.3329814  0.0073568    45.262  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.1333295  0.0073965   -18.026  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4449581  0.0113186  -127.663  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7079056  0.0103797   -68.201  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7344725  0.3162767   -18.131  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0009541  0.0083381    -0.114 0.908900    \nDESTIN_SZCHSZ01 -0.2083016  0.0099054   -21.029  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.5369606  0.0057531    93.334  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.5530638  0.0043945   580.971  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.5725975  0.0056507  -101.333  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -1.1181852  0.0063287  -176.685  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.1156680  0.0049440    23.396  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -0.8647725  0.0071003  -121.794  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1641791  0.0076248  -152.684  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4397612  0.0073040   -60.208  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.1930552  0.0053752    35.916  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.0436501  0.0136039  -150.225  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9338571  0.0082908  -112.638  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0532041  0.0053276     9.987  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.0782781  0.0088184  -122.276  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.4068171  0.0049068    82.910  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3579507  0.0060289   -59.373  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.2487993  0.0066588   -37.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.1611080  0.0071178    22.635  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -1.7308348  0.0349466   -49.528  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.5994253  0.0146230   -40.992  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.3685031  0.0162803   -84.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0910001  0.0055275   -16.463  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.0692224  0.0052840   -13.100  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.6493421  0.0043446   149.459  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9327947  0.0043674   213.583  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8161728  0.0043625   187.087  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0658625  0.0042516    15.491  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.8134329  0.0056721  -143.409  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.3546132  0.0066257  -204.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.4500588  0.0048448   -92.895  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5026431  0.0050996   -98.566  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.8673686  0.0059530  -145.704  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0560490  0.0047702    11.750  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.0443189  0.0052599    -8.426  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0126355  0.0054966    -2.299 0.021518 *  \nDESTIN_SZHGSZ10 -3.5821793  0.0263281  -136.059  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3704281  0.0056684   -65.350  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7369159  0.0058686  -125.570  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8985484  0.0063627  -141.222  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.0511995  0.0073996  -142.061  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5324974  0.0102612  -149.349  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3105267  0.0048241    64.370  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.3234483  0.0085497  -154.795  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6559742  0.0083174   -78.867  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.2663752  0.0063370    42.035  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.8529026  0.0076067   112.126  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5559641  0.0074629    74.497  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.9790971  0.0071830  -136.308  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8746590  0.0060179  -145.342  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5689062  0.0049105   115.855  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.4520963  0.0050302    89.876  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.0249671  0.0067371  -152.137  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7451483  0.0062189  -119.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -2.8453099  0.0287335   -99.024  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.3372309  0.0058003   -58.141  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0505330  0.0045908   228.832  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2334836  0.0057970   -40.277  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.5416148  0.0061432   -88.164  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8026495  0.0068745  -116.757  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2918594  0.0090197  -143.227  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.4069101  0.0087812   -46.339  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.5333101  0.0363215   -69.747  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.6623343  0.0070761   -93.601  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1408205  0.0054965   -25.620  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.2639235  0.0208254   -60.691  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5655800  0.0202787   -77.203  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9767682  0.0114687   -85.168  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.3328109  0.0254294  -131.061  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4552859  0.0080666   -56.441  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5386560  0.0064620   -83.358  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4952000  0.0052295    94.694  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.4434175  0.0202509   -71.277  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.9194067  0.0449654   -64.926  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.3780179  0.0112867  -122.092  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5044699  0.0080449   -62.707  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -2.0017134  0.0258750   -77.361  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.8120537  0.0434271   -87.781  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1071506  0.0051026   -20.999  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0274710  0.0057611    -4.768 1.86e-06 ***\nDESTIN_SZNVSZ03  0.1076352  0.0057909    18.587  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.2087250  0.0110438  -109.448  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.0058290  0.0092167  -109.131  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.2029931  0.0163170   -73.726  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.2878671  0.0074139  -173.709  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1520894  0.0048629   -31.275  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1985959  0.0050374   -39.424  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5290983  0.0082617  -185.083  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3567934  0.0074298   -48.022  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7114351  0.0134462  -127.280  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3241427  0.0098895   -32.776  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -1.7117196  0.0119003  -143.838  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.5086379  0.0120051   -42.368  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.2026781  0.0068977    29.383  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.8313754  0.0078544   105.848  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4041254  0.0086586   -46.673  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.5814539  0.0093641   168.885  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.1823430  0.0129843    91.059  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.1057553  0.0088197  -125.374  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0895099  0.0056308    15.897  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6921925  0.0043977   157.397  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.2848336  0.0084725   -33.619  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.1744480  0.0053553    32.575  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.4279206  0.0058735    72.856  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.5123108  0.0124303  -121.664  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.5650226  0.0068530   -82.449  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5952360  0.0090505   -65.769  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7728170  0.0078910   -97.937  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5066812  0.0073996   -68.474  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6398414  0.0075411   -84.847  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4354527  0.0069345   -62.795  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6597391  0.0071919   -91.733  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9392696  0.0112518   -83.477  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4617774  0.0057011    80.998  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3174497  0.0065890   -48.178  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1993449  0.0059923    33.267  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.2551535  0.0061885    41.230  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1662603  0.0086701   -19.176  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5500978  0.0063091    87.192  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.5364435  0.0070157    76.463  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3611043  0.0081643   166.715  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.1034049  0.0076769   -13.470  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0633902  0.0189846   -56.013  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5486221  0.0165272   -93.701  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.4092611  0.0326906   -73.699  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5172079  0.0139258  -108.950  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.1663615  0.0157430   -74.088  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.2404292  0.0281339   -79.634  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.3783780  0.0096022  -143.549  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.4445213  0.0081630  -176.959  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5149906  0.0051663    99.683  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.2389086  0.0060765    39.317  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.2737442  0.0082818  -153.801  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.8683520  0.0227277   -82.206  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.5993154  0.0184895   -32.414  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.8156302  0.0059840   136.302  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0900611  0.0057054    15.785  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.6397704  0.0052491  -121.882  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1714103  0.0042357    40.468  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0596175  0.0059865  -177.002  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8071891  0.0051229  -157.566  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5580934  0.0066216   -84.284  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1448863  0.0227788  -138.062  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1795225  0.0060127   -29.857  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2986570  0.0053561   -55.760  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4074671  0.0050609   -80.513  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1505164  0.0050931   -29.553  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.9908372  0.0101448  -196.242  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6715268  0.0041161   163.148  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4494757  0.0055319   -81.252  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5517983  0.0261860   -21.072  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4749154  0.0079257   -59.921  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.9400302  0.0057218   164.290  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2800377  0.0066081   -42.378  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.2570212  0.0145351   -86.482  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2600474  0.0112800   -23.054  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7775604  0.0085818   -90.606  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.8586515  0.0073142  -117.396  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1370887  0.0142148   -79.993  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.3259988  0.0368554  -117.378  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.6632914  0.0252720  -105.385  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.1000906  0.0216372  -143.276  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5952642  0.0156340  -166.001  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2092828  0.0059257   -35.318  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.8238139  0.0039155   465.798  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.8518259  0.0043636   195.210  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0222812  0.0043466   235.191  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6323777  0.0060058   105.294  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3336078  0.0074388   -44.847  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0820469  0.0101689  -106.408  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4186505  0.0119906  -118.313  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3058199  0.0074743   -40.916  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.4872299  0.0061571   -79.133  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7158441  0.0041312   173.278  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.4314229  0.0059917   -72.004  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5898245  0.0076083  -208.959  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.0445550  0.0062363  -167.497  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4319582  0.0070100   -61.621  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1602303  0.0120352  -179.493  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.1920493  0.0093083  -128.063  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2022481  0.0071137   -28.431  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2464793  0.0090124  -138.308  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0808445  0.0056019   -14.432  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6784376  0.0066340  -102.267  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.5845062  0.0222086   -71.346  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.1886010  0.0146338   -12.888  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6525526  0.0092450    70.585  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.5285464  0.0100182    52.759  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.4670106  0.0104357   140.577  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.5043588  0.0167444   149.564  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.9787931  0.0054306   364.375  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.2593108  0.0127916  -176.624  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.1897655  0.0326927   -97.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0476108  0.0044629   234.738  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3176990  0.0065894  -199.973  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3432057  0.0052496    65.377  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.7895927  0.0073392  -107.586  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8751665  0.0072946  -119.975  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2106221  0.0053027   -39.720  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.6050834  0.0071754  -223.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.5124717  0.0069223   -74.032  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.3813542  0.0054697    69.721  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0853753  0.0046572    18.332  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3227172  0.0057351   -56.271  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.4151283  0.0066299   -62.615  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4637327  0.0058206   -79.671  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5888242  0.0111001  -143.136  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.4606209  0.0107759  -135.545  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.7839065  0.0144357   -54.304  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6265412  0.0045504   137.691  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1520067  0.0048092    31.607  &lt; 2e-16 ***\nlog(DIST)       -1.8468315  0.0004608 -4008.033  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 10420261  on 13912  degrees of freedom\nAIC: 10510518\n\nNumber of Fisher Scoring iterations: 7\n\n\nExamine how the constraints hold for destinations this time.\n\nCalcRSquared(dbcSIM_Poisson$data$TRIPS, dbcSIM_Poisson$fitted.values)\n\n[1] 0.7001882\n\n\nNotice that there is a relatively greater improvement in the R2 value."
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#model-comparison",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4b.html#model-comparison",
    "title": "4b: Calibrating Spatial Interaction Models with R",
    "section": "Model Comparison",
    "text": "Model Comparison\nLastly, use compare_performance() of the performance package to identify the better model. First, create a list called model_list using the code chunk below.\n\nmodel_list &lt;- list(originConstrained=orcSIM_Poisson,\n                   doublyConstrained=dbcSIM_Poisson)\n\nNext, compute the RMSE of all the models in model_list using the code chunk below.\n\ncompare_performance(model_list, metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName              | Model |     RMSE\n------------------------------------\noriginConstrained |   glm | 2613.236\ndoublyConstrained |   glm | 1906.694\n\n\nThe print above reveals that doubly constrained SIM is the better model because it has the smaller RMSE value of 1906.694."
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/Retails.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/Retails.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/Liesure&Recreation.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/Liesure&Recreation.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/F&B.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/F&B.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/Business.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/Business.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex3/data/geospatial/MPSZ-2019.html",
    "href": "In_Class_Exercise/Ex3/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Exercise/Ex1/In_Class_Ex1.html",
    "href": "In_Class_Exercise/Ex1/In_Class_Ex1.html",
    "title": "1: Urban Mobility Analysis",
    "section": "",
    "text": "Urban Mobility analysis by using passenger volume by origin-destination bus stops."
  },
  {
    "objectID": "In_Class_Exercise/Ex1/In_Class_Ex1.html#getting-started",
    "href": "In_Class_Exercise/Ex1/In_Class_Ex1.html#getting-started",
    "title": "1: Urban Mobility Analysis",
    "section": "Getting started",
    "text": "Getting started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\n\n\npacman::p_load(tmap, sf, tidyverse)\n\nThe data sets used are:\n\nMaster Plan 2019 Subzone Boundary (No Sea) (last updated Dec 2019) from data.gov.sg - reformatted into shapefile format\nBus Stop Location (Last updated Jul 2023) from LTADataMall retrieved on 18 Nov 2023\nPassenger Volume by Origin Destination Bus Stops for Aug-Oct 2023 from LTADataMall retrieved on 18 Nov 2023"
  },
  {
    "objectID": "In_Class_Exercise/Ex1/In_Class_Ex1.html#import-passenger-volume-by-origin-destination-bus-stops",
    "href": "In_Class_Exercise/Ex1/In_Class_Ex1.html#import-passenger-volume-by-origin-destination-bus-stops",
    "title": "1: Urban Mobility Analysis",
    "section": "Import Passenger Volume by Origin-Destination Bus Stops",
    "text": "Import Passenger Volume by Origin-Destination Bus Stops\nThe code chunk below uses the read_csv() function of readr package to import the csv file into R and save it as a R dataframe called odbus.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nORIGIN_PT_CODE and DESTINATION_PT_CODE are numeric variables that are categorical in nature. As such, they should be transformed to factor so that R treats them as a grouping variable.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)"
  },
  {
    "objectID": "In_Class_Exercise/Ex1/In_Class_Ex1.html#extract-commuting-flow-data",
    "href": "In_Class_Exercise/Ex1/In_Class_Ex1.html#extract-commuting-flow-data",
    "title": "1: Urban Mobility Analysis",
    "section": "Extract Commuting Flow data",
    "text": "Extract Commuting Flow data\nThe code chunk below extracts commuting flows on weekday during the rush hour (7am, 8am, 9am).\n\norigtrip_7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 & TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))"
  },
  {
    "objectID": "In_Class_Exercise/Ex1/In_Class_Ex1.html#import-geospatial-data",
    "href": "In_Class_Exercise/Ex1/In_Class_Ex1.html#import-geospatial-data",
    "title": "1: Urban Mobility Analysis",
    "section": "Import Geospatial Data",
    "text": "Import Geospatial Data\nTwo geospatial data are used in this exercise.\n\nImport Bus Stop Locations\nThe code chunk below uses the st_read() function of sf package to import BusStop shapefile into R as a simple feature data frame called BusStop. As BusStop uses svy21 projected coordinate system, the crs is set to 3414.\n\nBusStop &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\In_Class_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\nImport Planning Subzone data\nThe code chunk below uses the st_read() function of sf package to import MPSZ-2019 shapefile into R as a simple feature data frame called mpsz. To ensure we can use mpsz together with BusStop, mpsz is reprojected to the svy21 projected coordinate system (crs=3413).\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\In_Class_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands_on_Exercise/Ex4/Hands_on_Ex4.html",
    "href": "Hands_on_Exercise/Ex4/Hands_on_Ex4.html",
    "title": "4: Geographically Weighted Regression",
    "section": "",
    "text": "Placeholder"
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/data/geospatial/MPSZ-2019.html",
    "href": "Hands_on_Exercise/Ex3/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html",
    "title": "2a: Spatial Weights and Applications",
    "section": "",
    "text": "Spatial weights (Wij) are a way to define spatial neighbourhoods."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#getting-started",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#getting-started",
    "title": "2a: Spatial Weights and Applications",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\ntmap package is used for thematic mapping.\nspdep package is used to create spatial weights matrix objects.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\nThe data sets used are:\n\nHunan county boundary layer: a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: csv file that contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#importing-data",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#importing-data",
    "title": "2a: Spatial Weights and Applications",
    "section": "Importing Data",
    "text": "Importing Data\n\nImport shapefile into R\nThe code chunk below uses the st_read() function of sf package to import Hunan county boundary shapefile into R as a simple feature data frame called hunan.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nThere are a total of 88 polygon features and 7 fields in hunan simple feature data frame. hunan is in wgs84 GCS.\n\n\nImport aspatial data into R\nThe code chunk below uses the read_csv() function of readr package to import Hunan_2012.csv file into R and save it as a R dataframe called hunan2012.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nPerforming relational join\nleft_join() of dplyr is used to join the geographical data and attribute table using County as the common identifier.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#visualising-regional-development-indicator",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#visualising-regional-development-indicator",
    "title": "2a: Spatial Weights and Applications",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nPrepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\nThe choropleth map generated using qtm() is based on equal intervals. All except nine regions have a GDPPC of either “0 to 20,000” or “20,000 to 40,000” – the distribution of GDPPC appears to be right-skewed."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#computing-contiguity-spatial-weights",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#computing-contiguity-spatial-weights",
    "title": "2a: Spatial Weights and Applications",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nContiguity means that two spatial units share a common border of non-zero length. This can be further divided into rook or queen criterion of contiguity, in analogy to the moves allowed for the such-named pieces on a chess board.\nThe rook criterion defines neighbors by the existence of a common edge between two spatial units, while the queen criterion defines neighbors as spatial units sharing a common edge or a common vertex.\n\nHence, the number of neighbors according to the queen criterion will always be larger than or equal to the rook criterion.\n\n\nCompute contiguity based neighbours based on queen criterion\npoly2nb() of spdep package computes contiguity weights matrices for the study area by building a neighbours list based on regions with contiguous boundaries. The code chunk below computes the queen contiguity weights matrix.\n\nIn poly2nb(), the queen argument takes TRUE (default) or FALSE as options.\n\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nBased on the summary report above, there are 88 area units in Hunan. The most connected area unit has 11 neighbours while there are two area units with only one neighbour each.\nFor each polygon in the polygon object, wm_q lists all neighboring polygons. The code chunk below can be used to see the neighbors for the individual polygons in the object.\n\n1wm_q[[1]]\n2hunan$County[1]\n3hunan$NAME_3[c(2,3,4,57,85)]\n4hunan$GDPPC[wm_q[[1]]]\n\n\n1\n\nShow the neighbors for the first polygon. Each number shown represents one polygon ID stored in hunan SpatialPolygonsDataFrame class.\n\n2\n\nRetrieve the county name of Polygon ID=1.\n\n3\n\nRetrieve the county names of the five neighboring polygons.\n\n4\n\nRetrieve the GDPPC of the five neighboring counties.\n\n\n\n\n[1]  2  3  4 57 85\n[1] \"Anxiang\"\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n[1] 20981 34592 24473 21311 22879\n\n\nThe complete weights matrix can be displayed by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output may cut across several pages. To print out the report, it is advised to save the trees.\n\n\n\n\nCompute contiguity based neighbours based on rook criterion\nThe code chunk below computes the rook contiguity weights matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nBased on the summary report above, there are 88 area units in Hunan. The most connected area unit has 10 neighbours while there are two area units with only one neighbour each."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#visualising-contiguity-weights",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#visualising-contiguity-weights",
    "title": "2a: Spatial Weights and Applications",
    "section": "Visualising contiguity weights",
    "text": "Visualising contiguity weights\nConnectivity graphs can be used to visualise contiguity weights. It takes a point and displays a line to each neighboring point. However, as the hunan simple feature data frame contains polygon geometry, points are needed in order to create the connectivity graphs. The most typical method to do so is to use polygon centroids, which can be calculated using the sf packages.\n\nGetting Latitude and Longitude of Polygon Centroids\nst_centroid() can be used to obtain the polygon centroids. However, the coordinates need to be in a separate data frame in order to create the connectivity graphs. This can be done using a mapping function (map() from the purrr package), which applies a given function to each element of a vector and returns a vector of the same length.\n\nAs st_centroid() returns a dbl data type, map_dbl() variation of the map() function from the purrr package should be used. Other variations of this function include map_lgl() for logical vectors, map_int() for integer vectors and map_chr() for string vectors.\n\n\nLongitudeLatitudeBinding Longitude and Latitude\n\n\nTo compute the longitude values, map st_centroid() over the geometry column of hunan and access the longitude value through double bracket notation [[]] and 1. This returns only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\n\nTo compute the latitude values, map st_centroid() over the geometry column of hunan and access the latitude value through double bracket notation [[]] and 2. This returns only the latitude, which is the second value in each centroid.\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\n\ncbind() can be used to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nUsing head(), check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\nOnce the coordinates of the polygon centroids are obtained, connectivity graphs can be plotted to visualise contiguity weights.\n\nPlotting Queen contiguity based neighbours mapPlotting Rook contiguity based neighbours mapPlotting both Queen and Rook contiguity based neighbours maps\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#computing-distance-based-neighbours",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#computing-distance-based-neighbours",
    "title": "2a: Spatial Weights and Applications",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nDistance-based weights matrices can be derived using dnearneigh() of spdep package. This function identifies neighbours of region points by Euclidean distance with a distance band defined by lower (d1) and upper (d2) bounds, controlled by the bounds argument. Regions falling within this distance range are considered neighbors.\nIf coordinates are unprojected (i.e. not transformed to a projected coordinate system) and in latitude and longitude format i.e. longlat=TRUE, the function calculates distances using the great circle distance formula i.e. the shortest distance between two points on the surface of a sphere, assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nFirst, determine the upper limit for distance band using the steps below:\n\n#coords &lt;- coordinates(hunan)\n1k1 &lt;- knn2nb(knearneigh(coords))\n2k1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n1\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. Convert the returned knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\n\n2\n\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, and in km if otherwise. Remove the list structure of the returned object by using unlist().\n\n\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 67.50 km, so using this as the upper threshold (rounded up to the next integer) gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weights matrix\nNext, compute the distance weights matrix using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 68, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 416 \nPercentage nonzero weights: 5.371901 \nAverage number of links: 4.727273 \n\n\nThe summary report above shows that the average number of links is 5.14. This means that on average, each point in the hunan dataset has approximately 5.14 neighboring points within the specified distance range.\nNext, either of the following two methods can be used to display the content of wm_d62 weights matrix.\n\nstr()table() and card() of spdep\n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:7] 2 3 4 5 57 58 64\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:4] 1 3 5 6\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:3] 4 5 69\n $ : int [1:3] 67 71 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:7] 8 46 66 68 78 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:5] 12 15 60 61 83\n $ : int [1:2] 11 17\n $ : int [1:3] 12 13 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:4] 11 14 16 72\n $ : int [1:5] 20 22 23 63 77\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:7] 19 20 35 47 74 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:5] 18 41 77 79 82\n $ : int [1:5] 25 28 31 52 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:4] 24 25 36 40\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:7] 21 41 46 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 43 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:7] 31 34 36 39 43 45 79\n $ : int [1:7] 23 34 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:7] 37 38 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:5] 48 49 50 52 54\n $ : int [1:7] 24 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:4] 48 50 53 75\n $ : int [1:2] 34 36\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:7] 1 2 57 64 66 68 78\n $ : int [1:3] 60 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:3] 5 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:4] 7 73 74 86\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:4] 18 23 38 62\n $ : int [1:5] 2 8 9 58 68\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:7] 8 34 35 36 41 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:8] 8 9 21 35 46 47 71 74\n $ : int [1:5] 59 60 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 68, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 68\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6 7 8\n  Anhua         0 1 0 0 0 0 0 0\n  Anren         0 0 0 0 0 1 0 0\n  Anxiang       0 0 0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0 0 0\n  Chaling       0 0 1 0 0 0 0 0\n  Changning     0 0 0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0 0 0\n  Chengbu       0 0 0 1 0 0 0 0\n  Chenxi        0 0 0 0 1 0 0 0\n  Cili          0 0 1 0 0 0 0 0\n  Dao           0 0 0 0 1 0 0 0\n  Dongan        0 0 0 1 0 0 0 0\n  Dongkou       0 0 0 1 0 0 0 0\n  Fenghuang     0 0 0 1 0 0 0 0\n  Guidong       0 0 1 0 0 0 0 0\n  Guiyang       0 0 0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1 0 0\n  Hanshou       0 0 0 0 1 0 0 0\n  Hengdong      0 0 0 0 0 1 0 0\n  Hengnan       0 0 0 0 1 0 0 0\n  Hengshan      0 0 0 0 0 0 1 0\n  Hengyang      0 0 0 0 0 1 0 0\n  Hongjiang     0 0 0 0 1 0 0 0\n  Huarong       0 0 0 1 0 0 0 0\n  Huayuan       0 0 0 0 1 0 0 0\n  Huitong       0 0 0 1 0 0 0 0\n  Jiahe         0 0 0 0 0 1 0 0\n  Jianghua      0 0 1 0 0 0 0 0\n  Jiangyong     0 1 0 0 0 0 0 0\n  Jingzhou      0 0 1 0 0 0 0 0\n  Jinshi        0 0 0 1 0 0 0 0\n  Jishou        0 0 0 0 0 0 1 0\n  Lanshan       0 0 0 0 0 1 0 0\n  Leiyang       0 0 0 0 1 0 0 0\n  Lengshuijiang 0 0 0 0 0 1 0 0\n  Li            0 0 0 1 0 0 0 0\n  Lianyuan      0 0 0 0 0 0 1 0\n  Liling        0 0 0 1 0 0 0 0\n  Linli         0 0 0 0 0 1 0 0\n  Linwu         0 0 0 0 1 0 0 0\n  Linxiang      1 0 0 0 0 0 0 0\n  Liuyang       0 0 1 0 0 0 0 0\n  Longhui       0 0 0 0 0 0 1 0\n  Longshan      0 1 0 0 0 0 0 0\n  Luxi          0 0 0 0 0 1 0 0\n  Mayang        0 0 0 0 0 1 0 0\n  Miluo         0 0 0 0 0 1 0 0\n  Nan           0 0 0 0 0 1 0 0\n  Ningxiang     0 0 0 0 0 1 0 0\n  Ningyuan      0 0 0 0 0 1 0 0\n  Pingjiang     0 1 0 0 0 0 0 0\n  Qidong        0 0 0 0 1 0 0 0\n  Qiyang        0 0 0 1 0 0 0 0\n  Rucheng       0 1 0 0 0 0 0 0\n  Sangzhi       0 1 0 0 0 0 0 0\n  Shaodong      0 0 0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0 0 0\n  Shaoyang      0 0 0 0 0 0 1 0\n  Shimen        0 0 1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 0 1 0\n  Shuangpai     0 0 0 1 0 0 0 0\n  Suining       0 0 0 0 0 1 0 0\n  Taojiang      0 0 0 0 1 0 0 0\n  Taoyuan       0 1 0 0 0 0 0 0\n  Tongdao       0 1 0 0 0 0 0 0\n  Wangcheng     0 0 0 0 0 0 1 0\n  Wugang        0 0 0 0 0 0 1 0\n  Xiangtan      0 0 0 0 0 0 0 1\n  Xiangxiang    0 0 0 0 0 1 0 0\n  Xiangyin      0 0 0 0 0 1 0 0\n  Xinhua        0 0 0 0 0 1 0 0\n  Xinhuang      1 0 0 0 0 0 0 0\n  Xinning       0 0 0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1 0 0\n  Xintian       0 0 0 0 0 1 0 0\n  Xupu          0 0 0 1 0 0 0 0\n  Yanling       0 0 0 0 1 0 0 0\n  Yizhang       0 0 1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0 0 0\n  Yongxing      0 0 0 0 1 0 0 0\n  You           0 0 0 0 1 0 0 0\n  Yuanjiang     0 0 0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0 0 0\n  Zhijiang      0 0 0 0 1 0 0 0\n  Zhongfang     0 0 0 0 1 0 0 0\n  Zhuzhou       0 0 0 0 1 0 0 0\n  Zixing        0 0 0 1 0 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n\nThe fixed distance weights matrix can then be plotted using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km. Alternatively, the red and the black lines could be plotted in two separate graphs next to each other.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\nComputing adaptive distance weights matrix\nA characteristic of fixed distance weights matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours. It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nAs compared to just determining the cut-off distance when computing the fixed distance weights matrix, an additional argument k is specified for adaptive distance weights matrix.\n\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, display the content of the matrix using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nBased on the output above, each county has exactly six neighbours.\nThe weights matrix is then plotted using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#computing-weights-based-on-idw-inversed-distance-method",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#computing-weights-based-on-idw-inversed-distance-method",
    "title": "2a: Spatial Weights and Applications",
    "section": "Computing weights based on IDW (Inversed Distance Method)",
    "text": "Computing weights based on IDW (Inversed Distance Method)\nFirst, compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\nRow-standardised weights matrix\nNext, assign equal weights to each neighboring polygon (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. Other more robust options are available to correct such drawbacks, notably style=“B”.\n\nThe style can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nThe zero.policy=TRUE option allows for lists of non-neighbors. When set, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\nzero.policy=TRUE should be used with caution since users may not be aware of missing neighbors in their dataset. Using zero.policy=FALSE at first instance may be more advised as it returns an error if there are empty neighbour sets.\n\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nTo see the weights of the first polygon’s eight neighbors type, use the following code chunk:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weights. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied. A row standardised distance weights matrix can be derived using the same method in the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#application-of-spatial-weights-matrix",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2a.html#application-of-spatial-weights-matrix",
    "title": "2a: Spatial Weights and Applications",
    "section": "Application of Spatial Weights Matrix",
    "text": "Application of Spatial Weights Matrix\nThis section will focus on the creation of four different spatial lagged variables:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\nSpatial lag with row-standardized weights\nCompute the average neighbor GDPPC value for each polygon, which is also often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nThis computation can be verified by comparing to the results ran in the previous section. Running the code chunk hunan$GDPPC[wm_q[[1]]] gave the GDPPC of the five neighbouring counties for Polygon ID=1 gave the output of: [1] 20981 34592 24473 21311 22879 The average of these five neighbouring counties is 24847.20 which corresponds to the first output to the above code chunk.\n\nAppend the spatially lagged GDPPC values to hunan sf data frame by using the code chunk below:\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values in the column lag GDPPC for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, plot both the GDPPC and Spatial Lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nAnother way to compute spatial lag is as a sum of neighboring values by assigning binary weights: from the neighbors list, apply a function that will assign binary weights, then use the glist argument in the nb2listw() function to explicitly assign these weights.\nStart by applying a function (lapply()) that will assign a value of 1 per each neighbor as shown in the code chunk below.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, use lag.listw() to compute a lag variable from the weights and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nNext, examine the results using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nAgain, comparing this computation to the GDPPC of the five neighbouring counties for Polygon ID=1: [1] 20981 34592 24473 21311 22879 The sum of these five neighbouring counties is 124236 which corresponds to the first output to the above code chunk.\n\nAppend the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nNow, plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, add the diagonal element before assigning weights in the neighbors structure. The function include.self() from spdep can be used to add the diagonal element to the neighbour list.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909.\nThe neighbour list of area[1] can be accessed using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNow [1] has six neighbours instead of five. Next, obtain weights with nb2listw() as shown in the code chunk below.\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, use nb2listw() and glist() to explicitly assign weights values. Lastly, create the lag variable from the weights structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nConvert the lag variable listw object into a data frame using as.data.frame(). The third command line renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values into hunan sf data frame using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nTo compare the values of lag GDPPC and the spatial window average (lag_window_avg GDPPC), kable() of Knitr package is used to prepare a table as shown in the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nFor a more effective comparison, use core tmap mapping functions.\n\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\nSpatial window sum\nThe spatial window sum is the counterpart of spatial window average without using row-standardized weights. To add the diagonal element to the neighbour list, use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNow [1] has six neighbours instead of five. Again, use nb2listw() and glist() to explicitly assign weights values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith the new weights structure, compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, convert the lag variable listw object into a data frame. The second command line in the code chunk below renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNext, the code chunk below will be used to append w_sum GDPPC values into hunan sf data frame using left_join() of dplyr.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nTo compare the values of lag GDPPC and the spatial window sum, use kable() of Knitr to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\n\n\npacman::p_load(sf, tidyverse)\n\nThe data sets used are:\n\nMaster Plan 2014 Subzone Boundary (Web) (last updated Dec 2014) from data.gov.sg retrieved on 17 Nov 2023\nPre-Schools Location (last updated Jul 2023) from data.gov.sg retrieved on 17 Nov 2023\nCycling Path (last updated Jul 2023) from LTADataMall retrieved on 17 Nov 2023\nSingapore listing data (last updated Sep 2023) from Inside Airbnb retrieved on 17 Nov 2023"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#getting-started",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#getting-started",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\n\n\npacman::p_load(sf, tidyverse)\n\nThe data sets used are:\n\nMaster Plan 2014 Subzone Boundary (Web) (last updated Dec 2014) from data.gov.sg retrieved on 17 Nov 2023\nPre-Schools Location (last updated Jul 2023) from data.gov.sg retrieved on 17 Nov 2023\nCycling Path (last updated Jul 2023) from LTADataMall retrieved on 17 Nov 2023\nSingapore listing data (last updated Sep 2023) from Inside Airbnb retrieved on 17 Nov 2023"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#importing-data",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#importing-data",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Importing Data",
    "text": "Importing Data\n\nImport Polygon Feature Data in shapefile format\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.\n\nWhen the input geospatial data is in shapefile format, two arguments are used: (1) dsn to define the data path and (2) layer to provide the shapefile name. File extensions (.shp, .dbf, .prj, .shx) need not be specified.\n\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThere are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinate system.\n\nsvy21 (or Singapore SVY21 Projected Coordinate System) is a projected coordinate system used by Singapore that is based on the Transverse Mercator projection from geographical coordinates referenced to the WGS 84 ellipsoid.\n\n\nThe bounding box provides the x extend and y extend of the data.\n\n\n\nImport Polyline feature data in shapefile format\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThere are a total of 2558 features and 2 fields in cyclingpath linestring feature data frame. cyclingpath is also in svy21 projected coordinate system.\n\n\nImport GIS data in kml format\nThe code chunk below uses st_read() function of sf package to import PreSchoolsLocation into R.\n\nIn kml format, the complete path and the kml file extension must be provided.\n\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThere are a total of 2290 features and 2 fields in preschool point feature data frame. Unlike the above two simple feature data frames, preschool is in wgs84 geographic coordinate system.\n\nwgs84 is the current version of the World Geodetic System (WGS), which is a standard used in cartography, geodesy, and satellite navigation including GPS. It is a geographic coordinate system, which defines locations on the earth using a three-dimensional spherical surface."
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#checking-data-content-of-simple-feature-data-frame",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#checking-data-content-of-simple-feature-data-frame",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Checking data content of Simple Feature Data Frame",
    "text": "Checking data content of Simple Feature Data Frame\nThe column in the sf data frame that contains the geometries is a list, of class sfc. There are two ways to check the data contents:\n\nRetrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]].\nUse st_geometry() to display basic information of the feature class such as geometry type, geographic extent of the features and the coordinate system of the data.\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nglimpse() of the dplyr package reveals associated attribute information such as data type of each fields.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nhead() in Base R provides complete information of a feature object.\n\nTo change the number of observations, set argument n to a desired reasonable number.\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#plotting-geospatial-data",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#plotting-geospatial-data",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nIn geospatial data analytics, it is insufficient to just look at the feature information. To visualise the geospatial features, plot() of R Graphic can be used.\n\nThe default plot of an sf object is a multi-plot. The plot below shows the first 9 out of 15 attributes. To change the number of attributes plotted, set the max.plot argument to a desired reasonable number.\n\n\nplot(mpsz)\n\n\n\n\nTo plot only the geometry, wrap st_geometry() around the data frame before plotting.\n\nplot(st_geometry(mpsz))\n\n\n\n\nIt is also possible to plot a specific attribute of the sf object.\n\nPlanning AreaPlanning SubzoneRegion\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\nplot(mpsz[\"SUBZONE_N\"])\n\n\n\n\n\n\n\nplot(mpsz[\"REGION_N\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nplot() provides a plot of the geospatial object for a quick look. For high cartographic quality plots, other R packages such as tmap should be used."
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#map-projection",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#map-projection",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Map Projection",
    "text": "Map Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two sets of geospatial data, they must be projected using a similar coordinate system.\n\n\n\n\n\n\nImportant\n\n\n\n\nProjection Transformation\n\nThe process of projecting a simple feature data frame from one coordinate system to another coordinate system.\n\n\n\n\n\nAssigning EPSG code to a simple feature data frame\nCommon issues that could happen when importing geospatial data into R are:\n\nMissing coordinate system of the source data (such as due to missing .proj for ESRI shapefile).\nWrongly assigned coordinate system during the importing process.\n\nTo look at the coordinate system of mpsz simple feature data frame, use st_crs() of sf package.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe EPSG indicated in the print above is 9001. However, the mpsz data frame is projected in svy21 (correct EPSG code for svy21 should be 3414). To assign the correct EPSG code to mpsz data frame, use st_set_crs() of sf package.\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nThe EPSG code indicated is now 3414.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming data to projected coordinate system\nIn geospatial analytics, it is common to transform the original data from geographic coordinate system (GCS) to projected coordinate system (PCS). GCS is inappropriate if the analysis requires the use of distance or/and area measurements as 1 degree distance at the poles is relatively shorter than 1 degree at the equator. In contrast, PCS provides consistent length and area measurement across space. st_transform() of sf package helps to reproject data frames from one coordinate system to another coordinate system mathematically.\nAs preschool data frame is in wgs84 coordinate system, it can be transformed into svy21 projected coordinate system (crs = 3413).\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\npreschool3414 data frame is now in svy21 projected coordinate system.\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\nThe transformation can be verified by reviewing the x and y extend of the data indicated in the Bounding Box. Most geographic coordinate systems use a 0-360 range of decimal degree. As preschool3414 data frame has undergone projection transformation, the x and y extend of the data is now substantially larger than 360."
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#importing-and-converting-aspatial-data",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#importing-and-converting-aspatial-data",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nIn practice, it is common to come across aspatial data with two fields that capture the x- and y-coordinates of the data points. Aspatial data can be converted from a tibble data frame into a simple feature data frame for further geospatial analysis.\n\nImporting Aspatial Data as tibble data frame\nThe code chunk below uses read_csv() function of readr package to import the listings.csv data from Airbnb. The output R object is a tibble data frame called listings.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nThe code chunk below uses list() of Base R instead of glimpse() to examine if the data file has been imported correctly.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,483 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1  71609 Villa i…  367042 Belinda East R… Tampin…    1.35    104. Privat…   150\n 2  71896 Home in…  367042 Belinda East R… Tampin…    1.35    104. Privat…    80\n 3  71903 Home in…  367042 Belinda East R… Tampin…    1.35    104. Privat…    80\n 4 275343 Rental … 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n 5 275344 Rental … 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    69\n 6 289234 Home in…  367042 Belinda East R… Tampin…    1.34    104. Privat…   220\n 7 294281 Rental … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    85\n 8 324945 Rental … 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    75\n 9 330095 Rental … 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    45\n10 369141 Place t… 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n# … with 3,473 more rows, 8 more variables: minimum_nights &lt;dbl&gt;,\n#   number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;, reviews_per_month &lt;dbl&gt;,\n#   calculated_host_listings_count &lt;dbl&gt;, availability_365 &lt;dbl&gt;,\n#   number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nThe listing tibble data frame consists of 3483 rows and 18 columns. For the next phase, the columns latitude and longitude will be used.\n\nThe columns latitude and longitude are in decimal degree format, suggesting that the data could be in wgs84 geographic coordinate system.\n\n\n\nConverting tibble data frame to simple feature data frame\nThe code chunk below converts listing data frame into a simple feature data frame using st_as_sf() of sf packages.\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\ncoords argument requires column name of the x-coordinates first followed by the column name of the y-coordinates.\n\n\ncrs argument requires the coordinate system in EPSG format. EPSG 4326 is wgs84 geographic coordinate system and EPSG 3414 is svy21 projected coordinate system. Refer to epsg.io for other country’s EPSG codes.\n\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nThe table above shows the content of listing_sf. A new column called geometry has been added into the data frame while the longitude and latitude columns have been dropped."
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#geoprocessing-with-sf-package",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#geoprocessing-with-sf-package",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions such as buffering and point-in-polygon count.\n\nBuffering\n\n\n\n\n\n\nImportant\n\n\n\n\nBuffer\n\nA defined zone or area created around a geographic feature such as a point, line, or polygon.\n\n\n\n\nThe purpose of creating a buffer is to identify and analyze spatial relationships between features within that distance. The buffer is typically measured in units of distance (e.g. meters, kilometers) and represents a specific radius or width around the feature.\nUsing the CyclingPath data set as an example:\nAssuming there are plans to upgrade the exiting cycling path and 5m of reserved land on both sides of the current cycling path must be acquired, determine the extend of the land needed to be acquired and their total area.\nTo do so, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\ndist argument takes in the numeric buffer distance to be computed.\n\n\nnQuadSegs argument refers to ‘the number of segments per quadrant’ and is set by default to 30 (meaning circles created by buffers are composed of 4 × 30 = 120 lines). This argument may be useful to include when the memory consumed by the output of a buffer operation is a major concern (in which case it should be reduced) or when very high precision is needed (in which case it should be increased).\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\n\nThis is followed by calculating the area of the buffers then summed up to derive the total land involved.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\nPoint-in-polygon count\n\n\n\n\n\n\nImportant\n\n\n\n\nPoint-in-polygon count\n\nThe number of points in each polygon given a set of points and a set of polygons.\n\n\n\n\nIn computational geometry, the point-in-polygon (PIP) problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon.\nUsing the PreSchoolsLocation data set as an example:\nAssuming a preschool group wants to study the distribution of preschools in each Planning Subzone, determine the number and density of preschools within each Planning Subzone.\nst_intersects() of sf package is used to identify pre-schools located inside each Planning Subzone. lengths() of Base R is then used to calculate numbers of pre-schools that fall inside each Subzone and summary() displays the summary statistics of the newly derived PreSch Count field.\n\nst_intersects() and st_intersection() are different! st_intersects provides a logical result that informs whether there is indeed an intersection between two sets of geometries, while st_intersection() perform geometric set operations and provide the intersection, difference or symmetric difference between two sets of geometries.\n\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the Planning Subzone with the most number of pre-schools, use top_n() of dplyr package.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nNext, the code chunk below uses st_area() of sf package to derive the area of each Planning Subzone.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nmutate() of dplyr package is then used to compute the density.\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#exploratory-data-analysis",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1a.html#exploratory-data-analysis",
    "title": "1a: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nThe use of appropriate ggplot2 functions can help create functional statistical graphs for EDA purposes.\n\nHistogram on Preschool Density\nA histogram is plotted using hist() of R Graphics to reveal the distribution of PreSch Density.\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nWhile the syntax is easy to use, there is limited room for further customisation to improve the output to meet publication quality.\n\nIn the code chunk below, appropriate ggplot2 functions are used including geom_histogram().\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"white\",\n                 fill=\"steelblue\") +\n  labs(title = \"Are preschools even distributed in Singapore?\",\n       subtitle= \"Most Planning Subzones have a low preschool density (&lt;10 preschools per km sq)\\nOne Planning Subzone has a preschool density of &gt;30 preschools per km sq\",\n      x = \"Preschool density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\nScatterplot between Preschool Density and Preschool Count\nIn the code chunk below, geom_point() is used to plot a scatterplot between Preschool Density and Preschool Count.\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"steelblue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"Scatterplot of Preschool Density and Preschool Count\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html",
    "title": "1b: Choropleth Mapping with R",
    "section": "",
    "text": "A choropleth map is a type of thematic map in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population or per-capita income. For example, the spatial distribution of aged population of Singapore could be represented on a choropleth map using the Master Plan 2014 Subzone Boundary. In R, choropleth maps can be plotted using the tmap package."
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html#getting-started",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html#getting-started",
    "title": "1b: Choropleth Mapping with R",
    "section": "Getting started",
    "text": "Getting started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\ntmap package is used for thematic mapping.\n\n\npacman::p_load(sf, tmap, tidyverse)\n\nThe data sets used are:\n\nMaster Plan 2014 Subzone Boundary (Web) (last updated Dec 2014) from data.gov.sg retrieved on 17 Nov 2023\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from Department of Statistics retrieved on 17 Nov 2023"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html#importing-data",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html#importing-data",
    "title": "1b: Choropleth Mapping with R",
    "section": "Importing Data",
    "text": "Importing Data\n\nImport Geospatial data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nCalling the mpsz simple feature data frame will only display the first 10 rows. This makes it much easier to work with large data and prevents R from attempting to display every row of a data frame.\n\n\n\nImport Attribute data into R\nThe code chunk below uses the read_csv() function of readr package to import respopagesextod2011to2020.csv file into R and save it as a R dataframe called popdata.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\nBefore a thematic map can be prepared, popdata is converted into a data table with year 2020 values and includes the following variables:\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group.\n\nThe following data wrangling and transformation functions are used: pivot_wider() of tidyr package, and mutate(), filter(), group_by() and select() of dplyr package.\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])+rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n\n\nJoining Attribute and Geospatial data\nBefore performing the georelational join, an extra step is required to convert the values in PA and SZ fields to uppercase as the values of PA and SZ fields consist of upper and lowercase while the SUBZONE_N and PLN_AREA_N columns are entirely in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate(across(where(is.character), toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using Planning Subzone name i.e. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands_on_Exercise/Ex1/Hands_on_Ex1b.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "1b: Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic maps using the tmap package:\n\nPlotting a thematic map quickly by using qtm().\nPlotting a highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map quickly by using qtm()\nqtm() is the easiest and quickest to draw a choropleth map using tmap as it is concise and provides a good default visualisation in many cases. The code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode() with plot option produces a static map. For interactive mode, view option should be used.\n\n\nfill argument is used to map the attribute of interest.\n\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\nHowever, when using qtm(), aesthetics of individual layers are harder to control. To draw a high quality cartographic choropleth map, tmap drawing elements should be used.\n\n\n\nDrawing Base Map using tmap elements\nThe basic building block of tmap is tm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons(). In the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the Planning Subzone polygons.\nTo draw a choropleth map showing the geographical distribution of a selected variable by Planning Subzone, assign the target variable such as Dependency to tm_polygons().\n\nThe default interval binning used to draw the choropleth map is pretty. tmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\n\n\nBy default, missing values will be shaded in grey.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\ntm_polygons() is a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygons using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone, and the Planning Subzones are shaded according to the respective DEPENDENCY values.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\ntm_borders() adds light grey borders on the boundary of the Planning Subzones.\n\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1). Other arguments that can be specified include col = border colour, lwd = border line width (default = 1), and lty = border line type (default = ‘solid’).\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\nData Classification Methods of tmap\nChoropleth maps can be either classified or unclassified:\n\nClassed choropleth maps: The point of classification is to take a large number of observations and group them into data ranges or classes. To define a data classification method, use the style argument of tm_fill() or tm_polygons().\nUnclassed choropleth maps: Similar to classed choropleth maps but they do not have an averaged statistic towards each particular colour.\n\nThere are many methods of choosing classes and could be based on the nature of distribution (e.g. quantile, equal interval, natural breaks) or arbitrary (e.g. fixed round numbers, census housing categories).\n\nEqual: 5 classesStandard Deviation: 5 classesQuantile: 5 classesJenks: 5 classesKMeans: 5 classesFisher: 5 classes\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe equal style divides the attribute values into equally sized classes. In variables with a skewed distribution or there are a couple of very large outliers, the resulting map is likely to end up with empty classes with little colour diversity.\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe sd style calculates a standard deviation of a given variable, and next use this value as the break width. It is a measure of dispersion and suitable for use if the distribution approximates a normal distribution.\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe quantile style creates breaks with the same number of features per class.\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe Jenks optimization method, also called the Jenks natural breaks classification method, is a data clustering method designed to determine the best arrangement of values into different classes. This is done by seeking to minimize each class’s average deviation from the class mean, while maximizing each class’s deviation from the means of the other classes. In other words, the method seeks to reduce the variance within classes and maximize the variance between classes.\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nClassification by KMeans Clustering is somewhat similar to natural breaks (Jenks), except that KMeans looks for centres of clusters of features with similar attribute values rather than looking for breaks between feature attribute values.\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nThe fisher style creates groups with maximalized homogeneity.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIn this example, the distribution of equal data classification method is substantially less evenly distributed than the quantile data classification method. The distribution of the variable and the objectives of the analysis are important factors that should be considered when deciding on the data classification method to use.\n\n\n\nEqual: 2 classesEqual: 6 classesEqual: 10 classesEqual: 20 classesQuantile: 2 classesQuantile: 6 classesQuantile: 10 classesQuantile: 20 classes\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nIncreasing the number of classes may not always be beneficial for the analysis: In the equal data classification method, the additional classes added more colours to the legend without meaningful impact on the map. For quantile data classification method, the additional number of classes appeared to be useful up until around n=10 – beyond that, again, the additional colours did not value-add to the map.\n\n\n\nPlotting choropleth map with custom breaks (Fixed Data Classification)\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill().\n\nIn tmap, the breaks include a minimum and maximum. Hence, for n categories, n+1 elements must be specified in the breaks option in increasing order.\n\nDescriptive statistics on the variable can be used to guide the setting of the break points.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.65, 0.70, 0.75 and 0.80. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Hence, we set the breaks vector as c(0, 0.60, 0.65, 0.70, 0.75, 0.80, 1.00).\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.65, 0.70, 0.75, 0.80, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package. To change the colour, assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks. In tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style(). The code chunk below uses the classic style.\n\nOther available styles are: “white”, “gray”, “natural”, “cobalt”, “col_blind”, “albatross”, “beaver”, “bw”, “watercolor”.\n\n\nTo reset to the default style use tmap_style(\"white\").\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass using tm_compass(), scale bar using tm_scale_bar() and grid lines using tm_grid().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Subzone boundary from Urban Redevelopment Authorithy (URA)\n             and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\nSmall Multiple Choropleth Maps (Facet Choropleth Maps)\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the aesthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to aesthetic argumentsBy defining a group-by variable in tm_facets()By creating multiple stand-alone maps with tmap_arrange()\n\n\nSmall multiple choropleth maps can be created by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nIt is also possible to assign multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Purples\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nSmall multiple choropleth maps can be created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nSmall multiple choropleth maps can be created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, it is also possible to use selection function to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Spatial autocorrelation is the term used to describe the presence of systematic spatial variation in a variable. Where there is positive (high) spatial autocorrelation, there is spatial clustering and neighbours are similar. Conversely, where there is negative (low) spatial autocorrelation, checkerboard patterns are observed and neighbours are dissimilar.\nSpatial autocorrelation can be used in the development of spatial policy, where one of the main development objectives of governments and planners is to ensure equal distribution of development in the area. Appropriate spatial statistical methods can be applied to discover if developments are evenly distributed geographically – if there are signs of spatial clustering and if so, where they are located."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#getting-started",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#getting-started",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\ntmap package is used for thematic mapping.\nspdep package is used to create spatial weights matrix objects.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\nThe data sets used are:\n\nHunan county boundary layer: a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: csv file that contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#importing-data",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#importing-data",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Importing Data",
    "text": "Importing Data\n\nImport shapefile into R\nThe code chunk below uses the st_read() function of sf package to import Hunan county boundary shapefile into R as a simple feature data frame called hunan.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nThere are a total of 88 polygon features and 7 fields in hunan simple feature data frame. hunan is in wgs84 GCS.\n\n\nImport aspatial data into R\nThe code chunk below uses the read_csv() function of readr package to import Hunan_2012.csv file into R and save it as a R dataframe called hunan2012.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nPerforming relational join\nleft_join() of dplyr is used to join the geographical data and attribute table using County as the common identifier.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#visualising-regional-development-indicator",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#visualising-regional-development-indicator",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nPrepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#global-spatial-autocorrelation",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#global-spatial-autocorrelation",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nThis section details the steps taken to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore computing the global spatial autocorrelation statistics, construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weights matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. The code chunk below computes the queen contiguity weights matrix.\n\nThe queen argument takes TRUE (default) or FALSE as options. If queen = TRUE, this function will return a list of first order neighbours using the Queen criteria.\n\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\nRow-standardised weights matrix\nNext, assign equal weights to each neighboring polygon (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. Other more robust options are available to correct such drawbacks, notably style=“B”.\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since users may not be aware of missing neighbors in their dataset. Using zero.policy=FALSE at first instance may be more advised as it returns an error if there are empty neighbour sets.\n\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep to compute Global Spatial Autocorrelation statistics.\nAt a confidence interval of 95%,\n\nH0: There is no spatial autocorrelation in the dataset.\nH1: There is spatial autocorrelation in the dataset.\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nGiven that p-value &lt; alpha value, we can reject the null hypothesis. Given that Moran I (Z value) is positive, it suggests that the features in the study area are clustered and observations tend to be similar.\n\nA positive Moran’s I value (I&gt;0) suggests clustering and similar observations. A negative Moran’s I value (I&lt;0) suggests dispersion and dissimilar observations. An approximately zero Moran’s I value suggests observations are arranged randomly over space.\n\n\n\nComputing Monte Carlo Moran’s I\nMonte Carlo simulation is used if there are doubts that the assumptions of Moran’s I are true (normality and randomization). The code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulations will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nGiven that p-value &lt; alpha value, we can reject the null hypothesis. Given that the Z value remains positive, it supports the earlier drawn conclusion that the features in the study area are clustered and observations tend to be similar.\n\n\nVisualising Monte Carlo Moran’s I\nIt is good practice to examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below, which uses hist() and abline() of R Graphics.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nWhen comparing the observed Moran’s I value with the distribution of Moran’s I values obtained from the Monte Carlo simulation, it can be noted that the observed value is in the extreme tails of the distribution. This further supports the conclusion drawn earlier that the spatial pattern in the data is significantly different from randomness and supports the presence of spatial autocorrelation.\n\n\nGlobal Spatial Autocorrelation: Geary’s C\nAnother method that can be used to compute Global Spatial Autocorrelation statistics is Geary’s c statistics testing. The code chunk below performs Geary’s C test using geary.test() of spdep.\nAt a confidence interval of 95%,\n\nH0: There is no spatial autocorrelation in the dataset.\nH1: There is spatial autocorrelation in the dataset.\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nGiven that p-value &lt; alpha value, we can reject the null hypothesis. Given that Geary C (Z value) is small (&lt;1), it suggests that the features in the study area are clustered and observations tend to be similar.\n\nA large Geary’s C value (C&gt;1) suggests dispersion and dissimilar observations. A small Geary’s C value (C&lt;1) suggests clustering and similar observations. A Geary’s C value of 1 suggests observations are arranged randomly over space.\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nGiven that p-value &lt; alpha value, we can reject the null hypothesis. Given that the Z value remains positive, it supports the earlier drawn conclusion that the features in the study area are clustered and observations tend to be similar.\n\n\nVisualising Monte Carlo Geary’s C\nNext, plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nWhen comparing the observed Geary’s C value with the distribution of Geary’s C values obtained from the Monte Carlo simulation, it can be noted that the observed value is in the extreme tails of the distribution. This further supports the conclusion drawn earlier that the spatial pattern in the data is significantly different from randomness and supports the presence of spatial autocorrelation."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#spatial-correlogram",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#spatial-correlogram",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are used to examine patterns of spatial autocorrelation in the data or model residuals. They show how correlated the pairs of spatial observations are when the distance (lag) between them increases - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose, they provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nPlotting the output alone may not provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\n\n\n\nHow to read Spatial Correlogram\n\n\n\n\nEach row represents a distance interval (lag) at which Moran’s I was calculated.\nThe estimate column provides the calculated Moran’s I value at each distance interval.\nThe expected column shows the value of Moran’s I under the null hypothesis of no spatial autocorrelation. Here, it’s the same constant value (-0.0114943) for all intervals, indicating the assumption of no spatial autocorrelation.\nThe Pr(I) two sided column shows the p-value associated with Moran’s I at each lag.\n\n\n\n\nObservations\n\nThere are significant positive values in the first two rows, suggesting spatial clustering or positive spatial autocorrelation at the respective distances indicated by the lags. The positive values indicate that nearby regions have similar values of GDPPC being measured.\nThere are significant negative values in the 5th and 6th rows, suggesting spatial dispersion or negative spatial autocorrelation at the respective distances indicated by the lags. The negative values suggest that neighboring regions tend to have dissimilar values of GDPPC.\nIn conclusion, this correlogram suggests that there is significant spatial autocorrelation in GDPPC at various distance intervals.\n\n\n\n\nCompute Geary’s C correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilarly, print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nObservations\n\nThere are significant low Geary’s C values (C&lt;1) in the first two rows, suggesting spatial clustering or positive spatial autocorrelation at the respective distances indicated by the lags. The low Geary’s C values indicate that nearby regions have similar values of GDPPC being measured.\nThere is significant high Geary’s C value (C&gt;1) in the 5th row, suggesting spatial dispersion or negative spatial autocorrelation at the respective distances indicated by the lag. The high Geary’s C value suggest that neighboring regions tend to have dissimilar values of GDPPC.\nIn conclusion, this correlogram suggests that there is significant spatial autocorrelation in GDPPC at various distance intervals."
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#cluster-and-outlier-analysis",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#cluster-and-outlier-analysis",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. It is a collection of geospatial statistical analysis methods for analysing the location related tendency (clusters or outliers) in the attributes of geographically referenced data (points or areas). Such spatial statistics are well suited for:\n\ndetecting clusters or outliers;\nidentifying hot spot or cold spot areas;\nassessing the assumptions of stationarity; and\nidentifying distances beyond which no discernible association obtains.\n\nIt can be indices decomposed from their global measures such as local Moran’s I and local Geary’s C, but any spatial statistics that satisfies the following two requirements can be considered LISA:\n\nthe LISA for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation;\nthe sum of LISAs for all observations is proportional to a global indicator of spatial association.\n\n\nComputing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of Zi values and a listw object providing neighbour weighting information for the polygon associated with the Zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\n\n\n\n\n\nHow to read localmoran() output\n\n\n\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\nMapping local Moran’s I\nBefore mapping the local Moran’s I map, append the local Moran’s I dataframe (i.e. localMI) to hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The resultant SpatialPolygonDataFrame is named hunan.localMI.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nUsing the choropleth mapping functions of tmap package, plot the local Moran’s I values using the code chunks below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe choropleth above shows that there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values above. The code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other. The code chunk below will be used to create such visualisation.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#creating-a-lisa-cluster-map",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#creating-a-lisa-cluster-map",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before generating the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations. The code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst, use scale() to center and scale the variable. Here, centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end ensures that the resultant data type is a vector. Now, plot the Moran scatterplot again using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\n1quadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n2hunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)\n3LM_I &lt;- localMI[,1]\n4signif &lt;- 0.05\n5quadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3\nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4\n6quadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n1\n\nCreate the quadrant objects.\n\n2\n\nDerive the spatially lagged variable of interest (i.e. GDPPC) and center the spatially lagged variable around its mean.\n\n3\n\nCenter the local Moran’s around the mean.\n\n4\n\nSet a statistical significance level for the local Moran.\n\n5\n\nDefine the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\n6\n\nAssign non-significant Moran values to the category 0.\n\n\n\n\n\n\nPlotting LISA map\nNow, build the LISA map using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot the LISA map alongside the Moran’s I values map and its corresponding p-values map. The code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands_on_Exercise/Ex2/Hands_on_Ex2b.html#hot-spot-and-cold-spot-area-analysis",
    "title": "2b: Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas. Generally, ‘hot spot’ describes a region or value that is higher relative to its surroundings.\n\nGetis and Ord’s G-Statistics\nThe Getis and Ord’s G-statistics can be used to detect spatial anomalies as it looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weights matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weights matrix\nFirst, define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord neighbours are defined based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weights matrix; and\nadaptive distance weights matrix.\n\n\nComputing fixed distance weights matrixComputing adaptive distance weights matrix\n\n\nDerive the centroids:\n\n\nShow code\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n\n\nDetermine the cut-off distance:\n\n\nShow code\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe largest first nearest neighbour distance is 61.79 km, so set this as the upper threshold to ensure all units will have at least one neighbour.\nCompute fixed distance weights matrix:\n\n\nShow code\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nUse k-nearest neighbours to control the numbers of neighbours:\n\n\nShow code\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\nComputing Gi statistics\n\nUsing fixed distance weights matrixUsing adaptive distance weights matrix\n\n\n\n\nShow code\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes gstari set to TRUE or FALSE, call set to the function call, and class localG.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, join the Gi values to the corresponding hunan sf data frame by using the code chunk below:\n\nConvert the output vector (i.e. gi.fixed) into R matrix object by using as.matrix().\ncbind() is used to join hunan data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nThe field name of the Gi values is then renamed to gstat_fixed by using rename().\n\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weights matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\nThe code chunk below is used to compute the Gi values for GDPPC2012 by using an adaptive distance weights matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nTo visualise the locations of hot spot and cold spot areas, the choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weights matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html",
    "href": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html",
    "title": "3: Processing and Visualising Flow Data",
    "section": "",
    "text": "Spatial interaction represents the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\nEach spatial interaction is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix."
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#getting-started",
    "href": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#getting-started",
    "title": "3: Processing and Visualising Flow Data",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\ntmap package is used for thematic mapping.\ntidyverse package is used for importing, integrating, wrangling and visualising data.\nstplanr package is used for plotting desire lines on maps.\n\n\npacman::p_load(sf, tmap, tidyverse, stplanr, DT)"
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#preparing-flow-data",
    "href": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#preparing-flow-data",
    "title": "3: Processing and Visualising Flow Data",
    "section": "Preparing Flow Data",
    "text": "Preparing Flow Data\n\nImport OD data\nFirstly, import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nDisplay the odbus tibble data table by using the code chunk below.\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nA quick check of odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\nExtract commuting flow data\nThe code chunk below extracts the commuting flows on weekdays between 6 and 9 o’clock.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nThe table below shows the content of odbus6_9\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nThe output is saved in rds format for future use.\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nThe code chunk below will be used to import the saved odbus6_9.rds into R environment.\n\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#working-with-geospatial-data",
    "href": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#working-with-geospatial-data",
    "title": "3: Processing and Visualising Flow Data",
    "section": "Working with Geospatial data",
    "text": "Working with Geospatial data\nFor this exercise, two geospatial data will be used:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nBoth data sets are in ESRI shapefile format.\n\nImport geospatial data\nThe two code chunks below are used to import both sets of geospatial data.\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame. st_transform() function of sf package is used to transform the projection to crs 3414.\n\n\nBusStop &lt;- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Hands_on_Exercise\\Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThe code chunk below will be used to write the mpsz sf tibble data frame into an rds file for future use.\n\nmpsz &lt;- write_rds(mpsz, \"data/rds/mpsz.rds\")"
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#geospatial-data-wrangling",
    "href": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#geospatial-data-wrangling",
    "title": "3: Processing and Visualising Flow Data",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nThe code chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nst_intersection() is used to perform point and polygon overlay and the output will be in point sf object. select() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame. Five bus stops are excluded in the resultant data frame as they are outside of Singapore’s boundary.\n\n\nbusstop_mpsz &lt;- st_intersection(BusStop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nBefore moving to the next step, save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\nNext, append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nIt is good practice to check for duplicating records before continuing further with the data wrangling.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 1,186 × 4\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ\n   &lt;chr&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;chr&gt;    \n 1 11009     01341         1 QTSZ01   \n 2 11009     01341         1 QTSZ01   \n 3 11009     01411         4 QTSZ01   \n 4 11009     01411         4 QTSZ01   \n 5 11009     01421        17 QTSZ01   \n 6 11009     01421        17 QTSZ01   \n 7 11009     01511        19 QTSZ01   \n 8 11009     01511        19 QTSZ01   \n 9 11009     01521         2 QTSZ01   \n10 11009     01521         2 QTSZ01   \n# … with 1,176 more rows\n\n\nAs there duplicated records found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\nCheck that the duplicating records issue has now been resolved.\n\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 4\n# … with 4 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;fct&gt;, TRIPS &lt;dbl&gt;,\n#   ORIGIN_SZ &lt;chr&gt;\n\n\nNext, update the od_data data frame with the planning subzone codes.\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\nAgain, check for duplicates and retain unique records.\n\n\nShow code\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nod_data &lt;- unique(od_data)\n\n\n\nod_data &lt;- od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\nSave the output into an rds file format.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#visualising-spatial-interaction",
    "href": "Hands_on_Exercise/Ex3/Hands_on_Ex3.html#visualising-spatial-interaction",
    "title": "3: Processing and Visualising Flow Data",
    "section": "Visualising Spatial Interaction",
    "text": "Visualising Spatial Interaction\nDesire lines are rays connecting a site to associated location points. This section details the steps to prepare a desire line using the stplanr package.\n\nRemove intra-zonal flows\nThe code chunk below will be used to remove intra-zonal flows which will not be plotted.\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\nCreate desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\nVisualise desire lines\nTo visualise the resulting desire lines, the code chunk below is used. &gt; Rendering may take longer due to the transparency argument i.e. alpha.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nIn the chart above, the flow data is very messy and highly skewed. As such, it may be better to focus on selected flows, such as flows greater than or equal to 5000 as shown below.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)"
  },
  {
    "objectID": "In_Class_Exercise/Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In_Class_Exercise/Ex1/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.\n\nsf package is used for importing, managing, and processing geospatial data.\ntmap package is used for thematic mapping.\nsfdep package is used to create spatial weights matrix and LISA objects using the sf class to represent spatial data.\nplotly package is used to create interactive graphs.\n\n\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, knitr)"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#importing-data",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#importing-data",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Importing Data",
    "text": "Importing Data\n\nImport shapefile into R\nThe code chunk below uses the st_read() function of sf package to import Hunan county boundary shapefile into R as a simple feature data frame called hunan.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\In_Class_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nThere are a total of 88 polygon features and 7 fields in hunan simple feature data frame. hunan is in wgs84 GCS.\n\n\nImport aspatial data into R\nThe code chunk below uses the read_csv() function of readr package to import Hunan_2012.csv file into R and save it as a R dataframe called hunan2012.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nPerforming relational join\nleft_join() of dplyr is used to join the geographical data and attribute table using County as the common identifier. Left join is done to ensure that the geospatial properties (geometry column) of the hunan sf data frame is retained. After the join, a pipe operation is done to further select only the required columns.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#plot-choropleth-map",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#plot-choropleth-map",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Plot choropleth map",
    "text": "Plot choropleth map\n\ntmap_mode(\"plot\")\ntm_shape(hunan) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#deriving-contiguity-spatial-weights",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#deriving-contiguity-spatial-weights",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Deriving Contiguity Spatial Weights",
    "text": "Deriving Contiguity Spatial Weights\n\nIdentify contiguity neighbours: Queen method\nThe code chunk below computes contiguity based neighbours based on the Queen criterion using tidy method and sfdep package (instead of spdep package).\n\nIn both packages, the queen argument takes TRUE (default) or FALSE as options. The queen argument is not specified in the code chunk below, hence, the default value of TRUE will be used.\n\n\nnb_q &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry), .before=1)\n\nThe code chunk below is used to print the summary of the first lag neighbour list.\n\nsummary(nb_q$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan province. The most connected area unit has 11 neighbours. There are two are units with only one neighbour.\nView the content of the data tables using the code chunk below.\n\nUsing sfdep instead of spdep gives an output that is a sf tibble data frame.\n\n\nkable(head(nb_q, n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nThe table above shows that polygon 1 has five neighbours. They are polygons number 2, 3, 4, 57,and 85.\n\n\nIdentify contiguity neighbours: Rook method\nThe code chunk below computes contiguity based neighbours based on the Rook criterion using the sfdept package.\n\nThe queen argument is now set to FALSE to compute based on the Rook criterion.\n\n\nnb_r &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry, queen = FALSE), .before=1)\n\nThe code chunk below is used to print the summary of the first lag neighbour list.\n\nsummary(nb_q$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan province. The most connected area unit has 11 neighbours. There are two are units with only one neighbour.\nView the content of the data tables using the code chunk below:\n\nkable(head(nb_r, n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 19, 20, 22, 70, 72, 73\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\nThe table above shows that polygon 1 has four neighbours. They are polygons number 3, 4, 57,and 85.\n\n\nIdentifying higher order neighbours\nTo identify higher order contiguity neighbours, use st_nb_lag_cumul() as shown in the code chunk below.\n\nnb2_queen &lt;-  hunan %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\nNote that if the order is 2, the result contains both 1st and 2nd order neighbors as shown on the print below.\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\nCompute contiguity weights: Queen method\nCompute the contiguity weights by using st_weights() of sfdep package. In the code chunk below, Queen method is used to derive the contiguity weights.\n\nIn the spdep package, the weights matrix can be retrieved together with the neighbour list from the poly2nb() argument.\n\n\nwm_q &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1) \n\nst_weights() takes in three arguments:\n\nnb: A neighbor list object as created by st_neighbors().\nstyle: Default “W” for row standardized weights. This value can also be “B” (basic binary coding), “C” (globally standardised, or sums over all links to n), “U” (C divided by the number of neighbours, or sums over all links to unity), “minmax”, and “S” (the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168, or sums over all links to n).\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#distance-based-weights",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#distance-based-weights",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Distance-based weights",
    "text": "Distance-based weights\nThere are three popularly used distance-based spatial weights, they are:\n\nfixed distance weights,\nadaptive distance weights, and\ninverse distance weights (IDW).\n\n\nDeriving fixed distance weights\nBefore deriving the fixed distance weights, determine the upper limit for distance band by using the steps below.\n\ngeo &lt;- sf::st_geometry(hunan)\nnb &lt;- st_knn(geo, longlat = TRUE)\ndists &lt;- unlist(st_nb_dists(geo, nb))\n\n\nst_nb_dists() of sfdep is used to calculate the nearest neighbour distance. The output is a list of distances for each observation’s neighbors list. unlist() of Base R is then used to return the output as a vector so that the summary statistics of the nearest neighbour distances can be derived.\n\nNext, derive summary statistics of the nearest neighbour distances vector (i.e. dists) by using the code chunk below.\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nThe summary statistics report above shows that the maximum nearest neighbour distance is 65.80km. By using a threshold value of 66km will ensure that each area will have at least one neighbour.\nNext, compute the fixed distance weights by using the code chunk below.\n\nwm_fd &lt;- hunan %&gt;%\n  mutate(nb = st_dist_band(geometry, upper = 66),\n               wt = st_weights(nb),\n               .before = 1)\n\n\nst_dists_band() of sfdep is used to identify neighbors based on a distance band (i.e. 66km). The output is a list of neighbours (i.e. nb). st_weights() is then used to calculate polygon spatial weights of the nb list. Note that: (1) the default style argument is set to “W” for row standardized weights, and the default allow_zero is set to TRUE, which assigns zero as lagged value to zone without neighbors.\n\n\nkable(head(wm_fd, n=10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nwt\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 5, 57, 64\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 57\n0.25, 0.25, 0.25, 0.25\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\n0.25, 0.25, 0.25, 0.25\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n1, 3, 4, 6, 69\n0.2, 0.2, 0.2, 0.2, 0.2\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69\n0.3333333, 0.3333333, 0.3333333\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 84\n0.3333333, 0.3333333, 0.3333333\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 78, 80\n0.2, 0.2, 0.2, 0.2, 0.2\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 46, 66, 68, 84, 86\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 20, 22, 70, 72, 73\n0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\nDeriving adaptive distance weights\n\nwm_ad &lt;- hunan %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),\n               .before = 1)\n\n\nst_knn() of sfdep is used to identify neighbors based on k (i.e. k = 8 indicates the nearest eight neighbours). The output is a list of neighbours (i.e. nb). st_weights() is then used to calculate polygon spatial weights of the nb list. Note that: (1) the default style argument is set to “W” for row standardized weights, and the default allow_zero is set to TRUE, which assigns zero as lagged value to zone without neighbors.\n\n\n\nDeriving inverse distance weights\n\nwm_idw &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n\n\nst_contiguity() of sfdep is used to identify the neighbours by using contiguity criteria. The output is a list of neighbours (i.e. nb). st_inverse_distance() is then used to calculate inverse distance weights of neighbours on the nb list.\n\n\n\n\n\n\n\nLearnings from the above exercise\n\n\n\nsfdep package can be used to perform the same spatial weights computations as spdep package, but with additional functionalities and has a sf and tidyverse friendly interface to the package. There is also a mapping of the functions in sfdep against that of spdep in the documentation."
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#computing-global-morans-i",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#computing-global-morans-i",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Computing Global Moran’s I",
    "text": "Computing Global Moran’s I\nIn the code chunk below, global_moran() function is used to compute the Moran’s I value. Different from spdep package, the output is a tibble data.frame.\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\nIn general, Moran’s I test will be performed instead of just computing the Moran’s I statistics. With sfdep package, Moran’s I test can be performed by using global_moran_test()as shown in the code chunk below.\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nThe default for alternative argument is “two.sided”. Other supported arguments are “greater” or “less”. The default for randomization argument is TRUE. If FALSE, there is an assumption of normality."
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#performing-global-morans-i-permutation-test",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#performing-global-morans-i-permutation-test",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Performing Global Moran’s I Permutation test",
    "text": "Performing Global Moran’s I Permutation test\nIn practice, monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by globel_moran_perm(). It is always a good practice to use set.seed() before performing simulation to ensure that the computation is reproducible.\n\nThe numbers of simulation is alway equal to nsim + 1. This mean that if nsim = 99, 100 simulations will be performed.\n\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC, wm_q$nb, wm_q$wt, nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nThe report above show that the p-value is smaller than alpha value of 0.05. Hence, reject the null hypothesis that the spatial patterns spatial independent. Because the Moran’s I statistics is greater than 0, it can be inferred that the spatial distribution shows sign of clustering."
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#computing-local-morans-i",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#computing-local-morans-i",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Computing Local Moran’s I",
    "text": "Computing Local Moran’s I\nCompute local Moran’s I of GDPPC at county level by using local_moran() of sfdep package.\n\nunnest() of tidyr package is used to expand a list-column containing data frames into rows and columns.\n\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#visualising-local-morans-i-and-p-values-of-local-morans-i",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#visualising-local-morans-i-and-p-values-of-local-morans-i",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Visualising Local Moran’s I and p-values of Local Moran’s I",
    "text": "Visualising Local Moran’s I and p-values of Local Moran’s I\nIn this code chunk below, tmap functions are used prepare a choropleth map using values in the ii and p_ii fields.\n\nFor p-values, the appropriate classification should be 0.001, 0.01, 0.05 and not significant instead of using default classification scheme.\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\", palette = \"Blues\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\", palette = \"-Greys\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#visualising-lisa-map",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#visualising-lisa-map",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Visualising LISA map",
    "text": "Visualising LISA map\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low clusters.\n\nLISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\n\nIn lisa sf data.frame, there are three fields containing the LISA categories. They are mean, median and pysal. In general, classification in mean will be used as shown in the code chunk below.\n\nIf the distribution is skewed, it is not advisable to use mean.\n\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In_Class_Exercise/Ex2/In_Class_Ex2.html#importing-data-1",
    "href": "In_Class_Exercise/Ex2/In_Class_Ex2.html#importing-data-1",
    "title": "2: Spatial Weights, GLSA & EHSA",
    "section": "Importing Data",
    "text": "Importing Data\n\nImport aspatial data into R\nThe code chunk below uses the read_csv() function of readr package to import Hunan_GDPPC.csv file into R and save it as a R dataframe called hunan_gdppc.\n\nGDPPC &lt;- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\n\nCreate a Time Series Cube\nThe code chunk below creates a time-space cube (spacetime cube) using spacetime() of sfdep.\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan, .loc_col = \"County\", .time_col = \"Year\")\n\nThe code chunk below checks that the time series cube has been created correctly.\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\nThe TRUE return confirms that GDPPC_st object is indeed a time-space cube.\n\n\nDerive spatial weights\nThe code chunk below will be used to identify neighbours and to derive an inverse distance weights.\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n\n\n\nactivate() of dplyr package is used to activate the geometry context. mutate() of dplyr package is used to create two new columns nb and wt. Then activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts(). Row order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\nThe dataset now has neighbors and weights for each time-slice.\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n\n\n\n\nComputing Gi*\nThe new columns are then used to manually compute the local Gi* for each location by grouping Year and using local_gstar_perm() of sfdep package. After which, use unnest() to unnest gi_star column of the newly created gi_stars data frame.\n\ngi_stars &lt;- GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(GDPPC, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\nPerform Emerging Hotspot Analysis\nPerform EHSA analysis by using emerging_hotspot_analysis() of sfdep package. It takes a spacetime object (i.e. GDPPC_st), and the quoted name of the variable of interest (i.e. GDPPC) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim defines the number of simulations to be performed.\n\nehsa &lt;- emerging_hotspot_analysis(x = GDPPC_st, \n                                  .var = \"GDPPC\", \n                                  k = 1, \n                                  nsim = 99)\n\n\n\nVisualising the distribution of EHSA classes\nIn the code chunk below, ggplot2 functions are used to reveal the distribution of EHSA classes as a bar chart.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\nFigure above shows that the “sporadic cold spots” class has the highest count of counties.\n\n\nVisualising EHSA\nBefore visualising the geographic distribution EHSA classes, the data frames hunan and ehsa must be joined together by using the code chunk below.\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa, by = c(\"County\" = \"location\"))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In_Class_Exercise/Ex3/In_Class_Ex3.html",
    "href": "In_Class_Exercise/Ex3/In_Class_Ex3.html",
    "title": "3: Spatial Interaction Models",
    "section": "",
    "text": "Spatial interaction represents the flow of people, material, or information between locations in geographical space."
  },
  {
    "objectID": "In_Class_Exercise/Ex3/In_Class_Ex3.html#getting-started",
    "href": "In_Class_Exercise/Ex3/In_Class_Ex3.html#getting-started",
    "title": "3: Spatial Interaction Models",
    "section": "Getting started",
    "text": "Getting started\nThe code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\n\n\npacman::p_load(tmap, sf, sp, DT, stplanr, performance, reshape2,\n               ggpubr, units, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex3/In_Class_Ex3.html#computing-distance-matrix",
    "href": "In_Class_Exercise/Ex3/In_Class_Ex3.html#computing-distance-matrix",
    "title": "3: Spatial Interaction Models",
    "section": "Computing Distance Matrix",
    "text": "Computing Distance Matrix\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. A location’s distance from itself, which is shown in the main diagonal of a distance matrix table, is 0.\nFirst, import mpsz.rds into the R environment by using the code chunk below.\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nNotice that it is a sf tibble dataframe object class.\n\nConverting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() is used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\nNext, the distance is calculated between the centroids of each pair of spatial polygons. This is a common approach as it simplifies the computation while providing a reasonable approximation of the spatial relationship between the polygons. Computing the distance between centroids is computationally less intensive as compared to calculating distances between all points along the edges of polygons, especially when dealing with complex polygons with many vertices. Additionally, centroids represent a single point that encapsulates the entire polygon. While edges provide more detailed information about the shape, centroids offer a generalized representation that can be useful in many cases, especially when the exact shape or details of the edges are less relevant.\n\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\nNotice that the output dist is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n\nLabelling column and row headers of a distance matrix.\nFirst, create a list sorted according to the the distance matrix by planning sub-zone code.\n\nsz_names &lt;- mpsz$SUBZONE_C\n\nNext, attach SUBZONE_C to row and column for distance matrix matching.\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)\n\n\n\nPivoting distance value by SUBZONE_C\nNext, pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\nNotice that the within zone distance is 0.\n\n\nUpdating intra-zonal distances\nNext, append a constant value to replace the intra-zonal distance of 0.To do so, first select and find the minimum value of the distance by using summary().\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nNext, a constant distance value of 50m is added into intra-zones distance.\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\nThe code chunk below will be used to check the result data.frame.\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe code chunk below is used to rename the origin and destination fields.\n\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nLastly, the code chunk below is used to save the dataframe for future use.\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "In_Class_Exercise/Ex3/In_Class_Ex3.html#preparing-flow-data",
    "href": "In_Class_Exercise/Ex3/In_Class_Ex3.html#preparing-flow-data",
    "title": "3: Spatial Interaction Models",
    "section": "Preparing flow data",
    "text": "Preparing flow data\nThe code chunk below is used import od_data rds file that was saved in Hands-on Exercise 3 into the R environment.\n\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")\n\nNext, compute the total passenger trip between and within planning subzones by using the code chunk below to get the output flow_data.\n\nflow_data &lt;- od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\nUse the code chunk below to display the flow_data dataframe.\n\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\nSeparating intra-flow from passenger volume df\nThe code chunk below is used to add three new fields into the flow_data dataframe.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0, flow_data$TRIPS)\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 0.000001, 1)\n\n\n\nCombining passenger volume data with distance value\nBefore joining flow_data and distPair, convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\nNow, left_join() of dplyr will be used to join flow_data dataframe and distPair dataframe to give an output called flow_data1.\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In_Class_Exercise/Ex3/In_Class_Ex3.html#preparing-origin-and-destination-attributes",
    "href": "In_Class_Exercise/Ex3/In_Class_Ex3.html#preparing-origin-and-destination-attributes",
    "title": "3: Spatial Interaction Models",
    "section": "Preparing Origin and Destination Attributes",
    "text": "Preparing Origin and Destination Attributes\n\nImporting population data\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")\n\n\n\nGeospatial data wrangling\n\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\nPreparing origin attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\nPreparing destination attribute\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nThe output data file is named SIM_data and saved out in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/SIM_data\")"
  },
  {
    "objectID": "In_Class_Exercise/Ex3/In_Class_Ex3.html#calibrating-spatial-interaction-models",
    "href": "In_Class_Exercise/Ex3/In_Class_Ex3.html#calibrating-spatial-interaction-models",
    "title": "3: Spatial Interaction Models",
    "section": "Calibrating Spatial Interaction Models",
    "text": "Calibrating Spatial Interaction Models\nIn this section, Spatial Interaction Models are calibrated using Poisson Regression method.\n\nImporting the modelling data\nFirstly, import the modelling data using the code chunk below.\n\nSIM_data &lt;- read_rds(\"data/rds/SIM_data.rds\")\n\n\n\nVisualising the dependent variable\nPlot the distribution of the dependent variable (i.e. TRIPS) as a histogram by using the code chunk below.\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nNotice that the distribution is highly skewed and not resemble a bell shape (also known as a normal distribution).\nNext, visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nNotice that their relationship hardly resembles a linear relationship.\nOn the other hand, plotting the scatter plot using the log transformed version of both variables reveals a closer resemblance to a linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\nChecking for variables with zero values\nSince Poisson Regression is based of log and log 0 is undefined, it is important to ensure that there are no 0 values in the explanatory variables. In the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 all contain 0 values. In view of this, code chunk below will be used to replace zero values to 0.99.\n\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0, 0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0, 0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0, 0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0, 0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0, 0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0, 0.99, SIM_data$ORIGIN_AGE25_64)\n\nRun summary() again to check that the replacement has been done correctly.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nNotice that all 0 values have been replaced by 0.99.\n\n\nUnconstrained Spatial Interaction Model\nNext, calibrate an unconstrained spatial interaction model by using glm() of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\nThe general formula of Unconstrained Spatial Interaction Model is:\n\\[\n\\lambda_{ij} = exp(k + \\mu lnV_i + \\alpha lnW_j - \\beta lnd_{ij})\n\\]\nThe code chunk used to calibrate to model is shown below:\n\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\n\nR-squared function\nTo measure how much variation of the trips can be accounted by the model, a function to calculate R-Squared value is written in the code chunk below.\n\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNext, compute the R-squared of the unconstrained SIM by using the code chunk below.\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446\n\n\n\n\n\nOrigin (Production) Constrained Spatial Interaction Model\nNext, fit an origin constrained SIM by using the code chunk below.\nThe general formula of Origin Constrained Spatial Interaction Model is:\n\\[\n\\lambda_{ij} = exp(k + \\mu_i + \\alpha lnW_j - \\beta lnd_{ij})\n\\]\n\norcSIM &lt;- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-241.02   -16.13    -7.46     0.80   418.33  \n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\nExamine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115\n\n\n\n\nDestination Constrained Spatial Interaction Model\nNext, fit a destination constrained SIM by using the code chunk below.\nThe general formula of Destination Constrained Spatial Interaction Model is:\n\\[\n\\lambda_{ij} = exp(k + \\mu lnV_i + \\alpha_i - \\beta lnd_{ij})\n\\]\n\ndecSIM &lt;- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-189.20   -15.64    -7.08     1.55   379.03  \n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nExamine how the constraints hold for destinations this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166\n\n\n\n\nDoubly Constrained Spatial Interaction Model\nNext, fit a doubly constrained SIM by using the code chunk below.\nThe general formula of Doubly Constrained Spatial Interaction Model is:\n\\[\n\\lambda_{ij} = exp(k + \\mu_i + \\alpha_i - \\beta lnd_{ij})\n\\]\n\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-159.373   -12.413    -4.694     2.892   270.252  \n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nExamine how the constraints hold for destinations this time.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675\n\n\nNotice that there is a relatively greater improvement in the R^2 value.\n\n\nModel comparison\nAnother useful model performance measure for continuous dependent variable is Root Mean Squared Error, which can be done using the compare_performance() of the performance package.\nFirst, create a list called model_list using the code chunk below.\n\nmodel_list &lt;- list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\nNext, compute the RMSE of all the models in model_list using the code chunk below.\n\ncompare_performance(model_list, metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2429.978\noriginConstrained      |   glm | 2057.579\ndestinationConstrained |   glm | 1891.724\ndoublyConstrained      |   glm | 1487.111\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.\n\n\nVisualising Fitted Values\nNext, to visualise the observed values and the fitted values, first extract the fitted values from each model by using the code chunk below.\n\ndf &lt;- as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nNext, join the values to SIM_data data frame.\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nRepeat the same steps for Origin Constrained SIM (i.e. orcSIM).\n\ndf &lt;- as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\nRepeat the same step by for Destination Constrained SIM (i.e. decSIM).\n\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\nRepeat the same step by for Doubly Constrained SIM (i.e. dbcSIM).\n\ndf &lt;- as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\n\nSIM_data &lt;- SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nFinally, plot the fitted values for all four SIM.\n\nunc_p &lt;- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n \norc_p &lt;- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n \ndec_p &lt;- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n \ndbc_p &lt;- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n \nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/entertn.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/entertn.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/FinServ.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/FinServ.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/data/geospatial/MPSZ-2019.html",
    "href": "In_Class_Exercise/Ex4/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4a.html",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4a.html",
    "title": "4a: Geocoding",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\nhttr: for working with HTTP\n\n\npacman::p_load(tmap, sf, httr, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#getting-started",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#getting-started",
    "title": "4a: Geocoding",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched. The packages used are:\n\ntmap: for thematic mapping\nsf: for geospatial data wrangling\ntidyverse: for non-spatial data wrangling\nhttr: for working with HTTP\n\n\npacman::p_load(tmap, sf, httr, tidyverse)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#geocoding-using-sla-api",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#geocoding-using-sla-api",
    "title": "4a: Geocoding",
    "section": "Geocoding using SLA API",
    "text": "Geocoding using SLA API\nAddress geocoding, or simply geocoding, is the process of taking a text-based description of a location, such as an address or the name of a place, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSLA supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code data and returns a X/Y pair in SVY21 projected coordinate system and a latitude/longitude pair in WGS84 geographical coordinate system.\n\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv &lt;- read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$postal_code\n\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor (postcode in postcodes) {\n  query &lt;- list('searchVal'=postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum'='1')\n  res &lt;- GET(url, query=query)\n  \n  if ((content(res)$found)!=0){\n    found &lt;- rbind(found, data.frame(content(res))[4:13])\n  } else {\n    not_found = data.frame(postcode)\n  }\n}\n\nNext, the code chunk below will be used to combine both the found and not_found data frames into a single tibble data frame called merged. Additionally, merged and not_found tibble data frames will be written into csv files for future use.\n\nmerged &lt;- merge(csv, found, by.x = \"postal_code\", by.y = \"results.POSTAL\", all = T)\nwrite_csv(merged, \"data/aspatial/schools.csv\")\nwrite_csv(not_found, \"data/aspatial/not_found.csv\")\n\nNext, manually update the csv file for the school where the geocoding could not be completed, then reload the csv file as a schools tibble data frame. A pipe operation is done to rename the coordinates columns and select only required columns.\n\nschools &lt;- read_csv(\"data/aspatial/schools.csv\")\n\nschools &lt;- schools %&gt;%\n  rename(\"latitude\" = \"results.LATITUDE\",\n         \"longitude\" = \"results.LONGITUDE\") %&gt;%\n  select(postal_code, school_name, latitude, longitude)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#converting-aspatial-data-into-sf-tibble-data-frame",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#converting-aspatial-data-into-sf-tibble-data-frame",
    "title": "4a: Geocoding",
    "section": "Converting aspatial data into sf tibble data frame",
    "text": "Converting aspatial data into sf tibble data frame\nNext, convert the aspatial data frame into a simple feature tibble data frame called schools_sf using st_as_sf() of sf package. The data frame is then converted into the svy21 projected coordinate system.\n\nSpecify the coordinates in the coords argument in the order of longitude followed by latitude.\n\n\nschools_sf &lt;- st_as_sf(schools, coords = c(\"longitude\", \"latitude\"), crs = st_crs(4326)) %&gt;%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#plotting-a-point-simple-feature-layer",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#plotting-a-point-simple-feature-layer",
    "title": "4a: Geocoding",
    "section": "Plotting a point simple feature layer",
    "text": "Plotting a point simple feature layer\nTo ensure that the schools_sf tibble data frame is projected and converted correctly, it will be plotted on a map for visual inspection.\n\nThe set.zoom.limits argument ensures that the map cannot be zommed out beyond Singapore and also cannot be zoomed in too much such that the map cannot be loaded.\n\n\ntmap_mode(\"view\")\n\ntm_shape(schools_sf) +\n  tm_dots() + \n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n# before moving to the next layer change back to non-interactive mode\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#importing-geospatial-data",
    "href": "In_Class_Exercise/Ex4/In_Class_Ex4a.html#importing-geospatial-data",
    "title": "4a: Geocoding",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\n\nImporting Planning and Subzone data\nThe code chunk below uses the st_read() function of sf package to import MPSZ-2019 shapefile into R as a simple feature data frame called mpsz. To ensure we can use mpsz together with schools_sf, mpsz is reprojected to the svy21 projected coordinate system (crs=3413).\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\In_Class_Exercise\\Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThe code chunk below counts the number of schools within each planning subzone by using st_intersects() and lengths(), then examines the summary statistics of the new derived variable SCHOOL_COUNT.\n\nmpsz$SCHOOL_COUNT &lt;- lengths(st_intersects(mpsz, schools_sf))\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n\n\n\n\nImporting Planning and Subzone data\n\nbiz_sf &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"Business\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `Business' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\In_Class_Exercise\\Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nTo ensure that the biz_sf tibble data frame is projected and converted correctly, it will be plotted on a map for visual inspection.\n\nThe check.and.fix argument checks for and fixes geometric errors such as the polygons not being enclosed fully prior to plotting. tm_shape(mpsz) + tm_polygons() provides the boundary map before the biz_sf layer. In order to make use of boundary maps, always plot the polygons first before the points.\n\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +    # boundary map\n  tm_polygons() +   # boundary map\n  tm_shape(biz_sf) +\n  tm_dots()\n\n\n\n\nThe code chunk below counts the number of businesses within each planning subzone by using st_intersects() and lengths(), then examines the summary statistics of the new derived variable BIZ_COUNT.\n\nmpsz$BIZ_COUNT &lt;- lengths(st_intersects(mpsz, biz_sf))\n\nsummary(mpsz$BIZ_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/Business.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/Business.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/F&B.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/F&B.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/Liesure&Recreation.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/Liesure&Recreation.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In_Class_Exercise/Ex5/data/geospatial/Retails.html",
    "href": "In_Class_Exercise/Ex5/data/geospatial/Retails.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "As city-wide urban infrastructures become increasingly digital, datasets from technologies like GPS and RFID on vehicles offer opportunities to track movement patterns over space and time. For instance, smart cards and GPS devices on public buses collect routes and ridership data, containing valuable structure and patterns for understanding human movement and behavior within cities. Despite their potential, the practical use of these extensive location-aware datasets often remains limited to basic tracking and mapping within GIS applications due to the lack of comprehensive spatial and spatio-temporal analysis functions in conventional GIS tools.\nExploratory Spatial Data Analysis (ESDA) holds tremendous potential to address such complex problems. In this study, appropriate Local Indicators of Spatial Association (GLISA) and Emerging Hot Spot Analysis (EHSA) will be applied to undercover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#geovisualisation-and-analysis",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#geovisualisation-and-analysis",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Geovisualisation and Analysis",
    "text": "Geovisualisation and Analysis\n\nCompute the passenger trips generated by origin at a hexagon level of 250m for the following time periods:\n\nWeekday morning peak – 6am to 9am (inclusive)\nWeekday evening peak – 5pm to 8pm (inclusive)\nWeekend/holiday morning peak – 11am to 2pm (inclusive)\nWeekend/holiday evening peak – 4pm to 7pm (inclusive)\n\nDisplay the geographical distribution of the passenger trips using appropriate geovisualisation methods.\nDescribe the spatial patterns revealed by the geovisualisation (not more than 200 words per visual)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#emerging-hot-spot-analysis",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#emerging-hot-spot-analysis",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Emerging Hot Spot Analysis",
    "text": "Emerging Hot Spot Analysis\nWith reference to the passenger trips generated by origin at the hexagon level for the four time periods given above:\n\nPerform Mann-Kendall Test by using the spatio-temporal local Gi* values,\nPrepare EHSA maps of the Gi* values of the passenger trips by origin at the hexagon level. The maps should only display the significant (i.e. p-value &lt; 0.05).\nWith reference to the EHSA maps and data visualisation prepared, describe the spatial patterns revealed (not more than 250 words per cluster)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#import-geospatial-data-bus-stop-locations",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#import-geospatial-data-bus-stop-locations",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Import Geospatial Data: Bus Stop Locations",
    "text": "Import Geospatial Data: Bus Stop Locations\nThe code chunk below uses the st_read() function of sf package to import BusStop shapefile into R as a simple feature data frame called BusStop. As BusStop uses svy21 projected coordinate system, the crs is set to 3414.\n\n\nCode\nBusStop &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\n\nReading layer `BusStop' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nCode\n# Examine the structure of the data frame\nstr(BusStop)\n\n\nClasses 'sf' and 'data.frame':  5161 obs. of  4 variables:\n $ BUS_STOP_N: chr  \"22069\" \"32071\" \"44331\" \"96081\" ...\n $ BUS_ROOF_N: chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC  : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ geometry  :sfc_POINT of length 5161; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\"\n\n\nThere are a total of 5161 features in the BusStop shapefile. Notably, BUS_STOP_N is listed as a character variable. As this variable will be used as the identifier to link to the aspatial data, it should be transformed to a factor so that R treats it as a grouping variable.\n\n\nCode\n# Apply as.factor() to the column\nBusStop$BUS_STOP_N &lt;- as.factor(BusStop$BUS_STOP_N)\n\n# Re-examine the structure of the data frame\nstr(BusStop)\n\n\nClasses 'sf' and 'data.frame':  5161 obs. of  4 variables:\n $ BUS_STOP_N: Factor w/ 5145 levels \"01012\",\"01013\",..: 1008 1724 2118 4972 431 3787 1160 2941 1610 4983 ...\n $ BUS_ROOF_N: chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC  : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ geometry  :sfc_POINT of length 5161; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\"\n\n\nBased on the output above, BUS_STOP_N is now a factor of 5145 levels. However, there are a total of 5161 observations. As such, the duplicate records should be checked. The code chunk below shows a list of duplicated bus stop codes.\n\n\nCode\nduplicate &lt;- BusStop %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  arrange(BUS_STOP_N)\n\nkable(duplicate)\n\n\n\n\n\n\n\n\n\n\n\nBUS_STOP_N\nBUS_ROOF_N\nLOC_DESC\ngeometry\n\n\n\n\n11009\nB04\nGhim Moh Ter\nPOINT (23101.34 32594.17)\n\n\n11009\nB04-TMNL\nGHIM MOH TER\nPOINT (23100.58 32604.36)\n\n\n22501\nB02\nBlk 662A\nPOINT (13489.09 35536.4)\n\n\n22501\nB02\nBLK 662A\nPOINT (13488.02 35537.88)\n\n\n43709\nB06\nBLK 644\nPOINT (18963.42 36762.8)\n\n\n43709\nB06\nBLK 644\nPOINT (18952.02 36751.83)\n\n\n47201\nUNK\nNA\nPOINT (22616.75 47793.68)\n\n\n47201\nNIL\nW’LANDS NTH STN\nPOINT (22632.92 47934)\n\n\n51071\nB21\nMACRITCHIE RESERVOIR\nPOINT (28311.27 36036.92)\n\n\n51071\nB21\nMACRITCHIE RESERVOIR\nPOINT (28282.54 36033.93)\n\n\n52059\nB03\nOPP BLK 65\nPOINT (30770.3 34460.06)\n\n\n52059\nB09\nBLK 219\nPOINT (30565.45 36133.15)\n\n\n53041\nB05\nUpp Thomson Road\nPOINT (28105.8 37246.76)\n\n\n53041\nB07\nUpp Thomson Road\nPOINT (27956.34 37379.29)\n\n\n58031\nUNK\nOPP CANBERRA DR\nPOINT (27089.69 47570.9)\n\n\n58031\nUNK\nOPP CANBERRA DR\nPOINT (27111.07 47517.77)\n\n\n62251\nB03\nBef Blk 471B\nPOINT (35500.54 39943.41)\n\n\n62251\nB03\nBEF BLK 471B\nPOINT (35500.36 39943.34)\n\n\n67421\nB01\nCHENG LIM STN EXIT B\nPOINT (34548.54 42052.15)\n\n\n67421\nNIL\nCHENG LIM STN EXIT B\nPOINT (34741.77 42004.21)\n\n\n68091\nB01\nAFT BAKER ST\nPOINT (32164.11 42695.98)\n\n\n68091\nB08\nAFT BAKER ST\nPOINT (32038.84 43298.68)\n\n\n68099\nB02\nBEF BAKER ST\nPOINT (32154.9 42742.82)\n\n\n68099\nB07\nBEF BAKER ST\nPOINT (32004.05 43320.34)\n\n\n77329\nB01\nBEF PASIR RIS ST 53\nPOINT (40765.35 39452.18)\n\n\n77329\nB03\nPasir Ris Central\nPOINT (40728.15 39438.15)\n\n\n82221\nB01\nBLK 3A\nPOINT (35323.6 33257.05)\n\n\n82221\nB01\nBlk 3A\nPOINT (35308.74 33335.17)\n\n\n96319\nNA\nYusen Logistics\nPOINT (42187.23 34995.78)\n\n\n96319\nNIL\nYUSEN LOGISTICS\nPOINT (42187.23 34995.78)\n\n\n97079\nB14\nOPP ST. JOHN’S CRES\nPOINT (44144.57 38980.25)\n\n\n97079\nB14\nOPP ST. JOHN’S CRES\nPOINT (44055.75 38908.5)\n\n\n\n\n\nThe code chunk below uses the distinct() function to keep only the unique rows based on the BUS_STOP_N while preserving all other fields (.keep_all = TRUE). By default, distinct() keeps the first occurrence of each unique combination of values in the specified columns.\n\n\nCode\nBusStop &lt;- BusStop %&gt;%\n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n# Re-examine the structure of the data frame\nstr(BusStop)\n\n\nClasses 'sf' and 'data.frame':  5145 obs. of  4 variables:\n $ BUS_STOP_N: Factor w/ 5145 levels \"01012\",\"01013\",..: 1008 1724 2118 4972 431 3787 1160 2941 1610 4983 ...\n $ BUS_ROOF_N: chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC  : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ geometry  :sfc_POINT of length 5145; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\"\n\n\nThere are now a total of 5145 observations, aligned with the number of factor levels."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#import-passenger-volume-by-origin-destination-bus-stops",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#import-passenger-volume-by-origin-destination-bus-stops",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Import Passenger Volume by Origin-Destination Bus Stops",
    "text": "Import Passenger Volume by Origin-Destination Bus Stops\nThe code chunk below uses the read_csv() function of readr package (imported with the tidyverse package) to import the csv files into R.\n\n\nCode\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\n# Examine the structure of the data frame\nstr(odbus)\n\n\nspc_tbl_ [5,709,512 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ YEAR_MONTH         : chr [1:5709512] \"2023-08\" \"2023-08\" \"2023-08\" \"2023-08\" ...\n $ DAY_TYPE           : chr [1:5709512] \"WEEKDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKDAY\" ...\n $ TIME_PER_HOUR      : num [1:5709512] 16 16 14 14 17 17 17 17 7 17 ...\n $ PT_TYPE            : chr [1:5709512] \"BUS\" \"BUS\" \"BUS\" \"BUS\" ...\n $ ORIGIN_PT_CODE     : chr [1:5709512] \"04168\" \"04168\" \"80119\" \"80119\" ...\n $ DESTINATION_PT_CODE: chr [1:5709512] \"10051\" \"10051\" \"90079\" \"90079\" ...\n $ TOTAL_TRIPS        : num [1:5709512] 7 2 3 10 5 4 3 22 3 3 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   YEAR_MONTH = col_character(),\n  ..   DAY_TYPE = col_character(),\n  ..   TIME_PER_HOUR = col_double(),\n  ..   PT_TYPE = col_character(),\n  ..   ORIGIN_PT_CODE = col_character(),\n  ..   DESTINATION_PT_CODE = col_character(),\n  ..   TOTAL_TRIPS = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nBased on the data frame structure seen above, ORIGIN_PT_CODE and DESTINATION_PT_CODE are listed as character variables. These variables are equivalent to BUS_STOP_N of BusStop sf data frame and should be transformed to factors so that R treats them as grouping variables.\n\n\nCode\n# Columns to convert to factors\ncolumns_to_convert &lt;- c(\"ORIGIN_PT_CODE\", \"DESTINATION_PT_CODE\")\n\n# Apply as.factor() to the adjusted columns\nodbus[columns_to_convert] &lt;- lapply(odbus[columns_to_convert], as.factor)\n\n# Re-examine the structure of the data frame\nstr(odbus)\n\n\nspc_tbl_ [5,709,512 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ YEAR_MONTH         : chr [1:5709512] \"2023-08\" \"2023-08\" \"2023-08\" \"2023-08\" ...\n $ DAY_TYPE           : chr [1:5709512] \"WEEKDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKENDS/HOLIDAY\" \"WEEKDAY\" ...\n $ TIME_PER_HOUR      : num [1:5709512] 16 16 14 14 17 17 17 17 7 17 ...\n $ PT_TYPE            : chr [1:5709512] \"BUS\" \"BUS\" \"BUS\" \"BUS\" ...\n $ ORIGIN_PT_CODE     : Factor w/ 5067 levels \"01012\",\"01013\",..: 104 104 4422 4422 2008 2008 832 832 779 355 ...\n $ DESTINATION_PT_CODE: Factor w/ 5071 levels \"01012\",\"01013\",..: 239 239 4736 4736 691 691 807 807 234 107 ...\n $ TOTAL_TRIPS        : num [1:5709512] 7 2 3 10 5 4 3 22 3 3 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   YEAR_MONTH = col_character(),\n  ..   DAY_TYPE = col_character(),\n  ..   TIME_PER_HOUR = col_double(),\n  ..   PT_TYPE = col_character(),\n  ..   ORIGIN_PT_CODE = col_character(),\n  ..   DESTINATION_PT_CODE = col_character(),\n  ..   TOTAL_TRIPS = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nBased on the output above, ORIGIN_PT_CODE and DESTINATION_PT_CODE are now factors."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#extract-commuting-flow-data",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#extract-commuting-flow-data",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Extract Commuting Flow data",
    "text": "Extract Commuting Flow data\nThe code chunk below extracts commuting flows for the four target time periods. For completeness, a list of all possible Bus Stops x Day Time x Time combinations is created. Following which, the commuting flow for each Bus Stops x Day Time x Time combination within the odbus data frame is computed and missing combinations are imputed with a value of 0. Lastly the resultant data frame is pivoted wider to form a data frame where each row represents one bus stop code, similar to the BusStop sf data frame.\n\n\nCode\n# Create a list of possible bus stop code, day type and time per hour for checking\nBusStopList &lt;- expand.grid(ORIGIN_PT_CODE = unique(BusStop$BUS_STOP_N),\n                          DAY_TYPE = c(\"WEEKDAY\", \"WEEKENDS/HOLIDAY\"),\n                          TIME_PER_HOUR = unique(odbus$TIME_PER_HOUR))\n\n# Commute commuting flow by bus stop code, day type and time per hour\nodbus_recoded &lt;- odbus %&gt;%\n  group_by(ORIGIN_PT_CODE, DAY_TYPE, TIME_PER_HOUR) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) \n\n# Identify missing Bus Stops and impute a 0 value\nodbus_missing &lt;- BusStopList %&gt;%\n  anti_join(odbus_recoded, by = c(\"ORIGIN_PT_CODE\", \"DAY_TYPE\", \"TIME_PER_HOUR\")) %&gt;%\n  mutate(TRIPS = 0)\n\n# Combine the above two data frames\nodbus_long &lt;- rbind(odbus_recoded, odbus_missing) %&gt;%\n    mutate(peak_period = case_when(\n    DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;=9 ~ \n      \"weekday_morn\",\n    DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;=20 ~ \n      \"weekday_evening\",\n    DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;=14 ~ \n      \"weekend_morn\",\n    DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;=19 ~ \n      \"weekend_evening\",\n    TRUE ~ \"non_peak\")) \n\n# Pivot wider to form data frame with one bus stop code per row\nodbus_wide_peak &lt;- odbus_long %&gt;%\n  group_by(ORIGIN_PT_CODE, peak_period) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TRIPS)) %&gt;%\n  pivot_wider(names_from = peak_period,\n              values_from = TOTAL_TRIPS)\n\nodbus_wide &lt;- odbus_long %&gt;%\n  filter(!(peak_period == \"non_peak\")) %&gt;%\n  group_by(ORIGIN_PT_CODE, DAY_TYPE, TIME_PER_HOUR) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TRIPS)) %&gt;%\n  mutate(Day_Time = paste(DAY_TYPE, TIME_PER_HOUR)) %&gt;%\n  ungroup %&gt;%\n  select(-c(DAY_TYPE, TIME_PER_HOUR)) %&gt;%\n  pivot_wider(names_from = Day_Time,\n              values_from = TOTAL_TRIPS) %&gt;%\n  left_join(odbus_wide_peak)"
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#append-commuting-flow-data-with-bus-stop-locations",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#append-commuting-flow-data-with-bus-stop-locations",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Append Commuting Flow data with Bus Stop Locations",
    "text": "Append Commuting Flow data with Bus Stop Locations\nleft_join() of dplyr is then used to join the geographical data and commuting flow data table using the Bus Stop Code as the common identifier. Left join is done to ensure that the geospatial properties (geometry column) of the BusStop sf data frame is retained and bus stops not found within the geospatial data set are dropped.\n\n\nCode\nodBusStop &lt;- left_join(BusStop, odbus_wide, by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nstr(odBusStop)\n\n\nClasses 'sf' and 'data.frame':  5145 obs. of  25 variables:\n $ BUS_STOP_N         : Factor w/ 5199 levels \"01012\",\"01013\",..: 1008 1724 2118 4972 431 3787 1160 2941 1610 4983 ...\n $ BUS_ROOF_N         : chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC           : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ WEEKDAY 6          : num  0 0 497 67 46 ...\n $ WEEKDAY 7          : num  9 0 623 128 36 ...\n $ WEEKDAY 8          : num  1 0 631 62 60 ...\n $ WEEKDAY 9          : num  5 0 373 50 48 ...\n $ WEEKDAY 17         : num  19 0 654 254 47 ...\n $ WEEKDAY 18         : num  17 0 485 104 60 ...\n $ WEEKDAY 19         : num  6 0 382 33 58 70 149 284 841 221 ...\n $ WEEKDAY 20         : num  1 0 221 8 30 42 18 140 610 91 ...\n $ WEEKENDS/HOLIDAY 11: num  0 0 178 27 12 57 3 415 502 234 ...\n $ WEEKENDS/HOLIDAY 12: num  2 0 201 39 32 44 3 447 551 246 ...\n $ WEEKENDS/HOLIDAY 13: num  1 0 183 17 24 27 4 320 560 206 ...\n $ WEEKENDS/HOLIDAY 14: num  3 0 138 27 13 30 0 254 357 172 ...\n $ WEEKENDS/HOLIDAY 16: num  6 1 130 21 21 34 17 131 465 232 ...\n $ WEEKENDS/HOLIDAY 17: num  4 0 151 23 10 41 37 133 541 171 ...\n $ WEEKENDS/HOLIDAY 18: num  1 0 135 29 11 57 15 142 499 167 ...\n $ WEEKENDS/HOLIDAY 19: num  1 0 130 11 19 41 15 91 368 140 ...\n $ non_peak           : num  163 6 3813 935 412 ...\n $ weekday_evening    : num  43 0 1742 399 195 ...\n $ weekday_morn       : num  15 0 2124 307 190 ...\n $ weekend_evening    : num  12 1 546 84 61 ...\n $ weekend_morn       : num  6 0 700 110 81 ...\n $ geometry           :sfc_POINT of length 5145; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:24] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\" \"WEEKDAY 6\" ...\n\n\nThere are a total of 5145 observations, which matches the number of features in the BusStop sf data frame."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#create-spatial-grids",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#create-spatial-grids",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Create Spatial Grids",
    "text": "Create Spatial Grids\nSpatial grids are commonly used in spatial analysis to divide the study area into equal-sized, regular polygons that can tessellate the whole study area. After that, a variable is summarized within each polygon. For this exercise, a hexagon layer of 250m (where 250m is the perpendicular distance between the hexagon centre and its edges) will be created.\nIn the code chunk below, st_make_grid is used to create the hexagon grids using the svy21 projected coordinate system. In st_make_grid, cellsize argument refers to the cell size in the units that the crs of the spatial data is using. The cellsize can be defined as the distance between opposite edges. Since the data is set in SVY21 projected coordinate system, which uses metres as the unit, the value is set as c(500,500) to create a hexagon layer of 250m. The resulting data frame is then converted into a sf data frame and an index is added for each hexagon grid.\n\n\nCode\nhex_grid &lt;- st_make_grid(odBusStop, cellsize = c(500, 500), \n                         crs = 3413, what = \"polygons\", square = FALSE) %&gt;%\n  st_sf() %&gt;%\n  mutate(index = row_number())\n\n\nIn the code chunk below, st_join and st_intersects() is used to return a list of bus stops lying within each hexagon grid. A left join is done in this process (using the argument left = TRUE) to ensure that the geospatial properties (geometry column) of the hex_grid sf data frame is retained. After filtering out hexagon grids that do not contain any bus stops, the number of bus stops and the total number of trips at each time period is then computed for each hexagon grid.\n\n\nCode\nhex_grid_count &lt;- st_join(hex_grid, odBusStop, join = st_intersects, left = TRUE) %&gt;%\n  filter(!(is.na(BUS_STOP_N))) %&gt;%\n  group_by(index) %&gt;%\n  summarise(\n    count = n(),\n    bus_stop_codes = paste(BUS_STOP_N, collapse = \", \"),\n    bus_stop_names = paste(LOC_DESC, collapse = \", \"),\n    across(starts_with(\"week\"), sum)\n  ) %&gt;%\n  ungroup()\n\n\nThe hex_grid_count sf data frame can now be used for plotting the geographical distribution of peak hour bus stops and commuting flow using tmap."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#visualisation-of-geographical-distribution-of-commuting-flow",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#visualisation-of-geographical-distribution-of-commuting-flow",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Visualisation of Geographical Distribution of Commuting Flow",
    "text": "Visualisation of Geographical Distribution of Commuting Flow\ntmap package can be used to help visualise the geographical distribution of the commuting flow over the four target time periods. Such geovisualisations can help identify areas with high commuting flow, which can be further used for other operational needs such as traffic management, bus route planning and crowd control management.\n\nContinuous Scale\nFor efficiency of plotting, only the columns that will be used for this section will be selected.\n\n\nCode\nhex_grid_count2 &lt;- hex_grid_count %&gt;%\n  select(index, count, bus_stop_codes, bus_stop_names, geometry,\n         weekday_evening, weekday_morn, weekend_evening, weekend_morn)\n\n\nThe following code chunks will review the geographical distribution of the weekdays and weekends peak hour commuting flows using a continuous scale fill.\n\nGeographical Distribution of Weekday Peak Hour Commuting FlowsGeographical Distribution of Weekend/PH Peak Hour Commuting Flows\n\n\nThe geographical distribution of the weekdays peak hour commuting flows is plotted side by side using tm_facets() function. The free.scales argument is set to FALSE to show a consistent scale across both time periods.\n\n\nCode\ntmap_mode(\"view\")\n\ntm_shape(hex_grid_count2) +\n  tm_fill(col = c(\"weekday_morn\", \"weekday_evening\"),\n          palette = \"Blues\",\n          style = \"cont\", \n          popup.vars = c(\"Bus Stops\" = \"bus_stop_codes\", \n                         \"Weekday Morning\" = \"weekday_morn\", \n                         \"Weekday Evening\" = \"weekday_evening\")) + \n  tm_facets(ncol = 1, free.scales = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe visualisation above shows a heavily right-skewed distribution across all the weekday peak hour time periods. Most bus stops have less than 100k commuter trips at each of these time periods. Given the current geographical distribution, it is challenging to identify the areas with high commuting flow. However, notable hexagon grids that can be distinctively identified as having high commuting flow &gt;300k are:\n\nWeekday Mornings: 1251, 2411\nWeekday Evenings: 1251, 2411, 3239, 4349, 4539\n\n\n\nThe code chunk below displays the hexagon grids with significantly high commuting flow &gt;300k in greater detail.\n\n\nCode\nweekday_300k &lt;- hex_grid_count2 %&gt;%\n  filter(weekday_morn &gt;= 300000 | weekday_evening &gt;= 300000) %&gt;%\n  select(index, bus_stop_names, weekday_morn, weekday_evening)\n\nkable(weekday_300k)\n\n\n\n\n\n\n\n\n\n\n\n\nindex\nbus_stop_names\nweekday_morn\nweekday_evening\ngeometry\n\n\n\n\n1251\nBLK 664C, Blk 662A, BLK 662D, BOON LAY MRT STN, BOON LAY INT, OPP BLK 662C, OPP BOON LAY MRT STN\n396701\n551636\nPOLYGON ((13720.12 35286.69…\n\n\n2411\nBLK 515, BEF W’LANDS STN EXIT 7, WOODLANDS REG INT, W’LANDS CIVIC CTR, BLK 894C, W’LANDS STN EXIT 4, W’LANDS STN EXIT 5, OPP W’LANDS CIVIC CTR\n313192\n474311\nPOLYGON ((22970.12 46112.01…\n\n\n3239\nBLK 322, BLK 422, AFT ANG MO KIO INT, AFT ANG MO KIO STN EXIT A, ANG MO KIO INT, ANG MO KIO STN\n212340\n325858\nPOLYGON ((29720.12 38750.79…\n\n\n4349\nBEDOK STN EXIT B, PANASONIC, OPP PANASONIC, BEDOK BUS INT, BEDOK STN EXIT A\n187052\n370328\nPOLYGON ((38720.12 33554.64…\n\n\n4539\nTAMPINES INT, TAMPINES INT, UOB TAMPINES CTR, OPP CENTURY SQ, OPP OUR TAMPINES HUB, OUR TAMPINES HUB, Aft Tampines Stn Exit E, Tampines Stn Exit D\n202366\n446207\nPOLYGON ((40220.12 37018.74…\n\n\n\n\n\n\n\nThe geographical distribution of the weekends / holidays peak hour commuting flows is plotted side by side using tm_facets() function. The free.scales argument is set to FALSE to show a consistent scale across both time periods.\n\n\nCode\ntmap_mode(\"view\")\n\ntm_shape(hex_grid_count2) +\n  tm_fill(col = c(\"weekend_morn\", \"weekend_evening\"),\n          palette = \"Purples\",\n          style = \"cont\", \n          popup.vars = c(\"Bus Stops\" = \"bus_stop_codes\", \n                         \"Weekend/PH Morning\" = \"weekend_morn\", \n                         \"Weekend/PH Evening\" = \"weekend_evening\")) + \n  tm_facets(ncol = 1, free.scales = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nSimilarly, the visualisation above shows a heavily right-skewed distribution across all the weekend peak hour time periods. However, the continuous scale suggests that weekend peak hour commuting flow volume is approximately one-fifth of weekday peak hour commuting flow volume. Most bus stops have less than 20k commuter trips at each of these time periods. Again, it is challenging to identify the areas with high commuting flow but notable hexagon grids that can be distinctively identified as having high commuting flow &gt;80k are:\n\nWeekend/PH Mornings: 1251, 2411, 4349, 4539\nWeekend/PH Evenings: 1251, 2411, 3239, 3578, 4349, 4539\n\n\n\nThe code chunk below displays the hexagon grids with significantly more commuting flow &gt;80k in greater detail.\n\n\nCode\nweekend_80k &lt;- hex_grid_count2 %&gt;%\n  filter(weekend_morn &gt;= 80000 | weekend_evening &gt;= 80000) %&gt;%\n  select(index, bus_stop_names, weekend_morn, weekend_evening)\n\nkable(weekend_80k)\n\n\n\n\n\n\n\n\n\n\n\n\nindex\nbus_stop_names\nweekend_morn\nweekend_evening\ngeometry\n\n\n\n\n1251\nBLK 664C, Blk 662A, BLK 662D, BOON LAY MRT STN, BOON LAY INT, OPP BLK 662C, OPP BOON LAY MRT STN\n108551\n149047\nPOLYGON ((13720.12 35286.69…\n\n\n2411\nBLK 515, BEF W’LANDS STN EXIT 7, WOODLANDS REG INT, W’LANDS CIVIC CTR, BLK 894C, W’LANDS STN EXIT 4, W’LANDS STN EXIT 5, OPP W’LANDS CIVIC CTR\n99396\n123274\nPOLYGON ((22970.12 46112.01…\n\n\n3239\nBLK 322, BLK 422, AFT ANG MO KIO INT, AFT ANG MO KIO STN EXIT A, ANG MO KIO INT, ANG MO KIO STN\n79535\n94824\nPOLYGON ((29720.12 38750.79…\n\n\n3578\nBLK 421, SERANGOON INT, S’GOON STN EXIT A / BLK 413, S’GOON STN EXIT C / BLK 201, S’GOON STN EXIT E, S’GOON STN EXIT H, BLK 409, S’GOON STN EXIT D / BLK 416\n57084\n80507\nPOLYGON ((32470.12 36585.73…\n\n\n4349\nBEDOK STN EXIT B, PANASONIC, OPP PANASONIC, BEDOK BUS INT, BEDOK STN EXIT A\n101960\n118967\nPOLYGON ((38720.12 33554.64…\n\n\n4539\nTAMPINES INT, TAMPINES INT, UOB TAMPINES CTR, OPP CENTURY SQ, OPP OUR TAMPINES HUB, OUR TAMPINES HUB, Aft Tampines Stn Exit E, Tampines Stn Exit D\n95639\n124569\nPOLYGON ((40220.12 37018.74…\n\n\n\n\n\n\n\n\nHowever, due to the heavily right-skewed distribution, not much can be glimpsed from the current geovisualisation using continuous scale fill. A data classification method will be used to replot the maps.\n\n\nJenks Natural Breaks\nThe Jenks optimization method, also called the Jenks natural breaks classification method, is a data clustering method designed to determine the best arrangement of values into different classes by seeking to reduce the variance within classes and maximize the variance between classes. For this exercise, the number of breaks is defined at n=6.\nThe following code chunks will review the geographical distribution of the weekdays and weekends peak hour commuting flows using a continuous scale fill.\n\nGeographical Distribution of Weekday Peak Hour Commuting FlowsGeographical Distribution of Weekend/PH Peak Hour Commuting Flows\n\n\nThe geographical distribution of the weekdays peak hour commuting flows is plotted side by side using tm_facets() function. The free.scales argument is set to FALSE to show a consistent scale across both time periods.\n\n\nCode\ntmap_mode(\"view\")\n\ntm_shape(hex_grid_count2) +\n  tm_fill(col = c(\"weekday_morn\", \"weekday_evening\"),\n          palette = \"Blues\",\n          n = 6, style = \"jenks\", \n          popup.vars = c(\"Bus Stops\" = \"bus_stop_codes\", \n                         \"Weekday Morning\" = \"weekday_morn\", \n                         \"Weekday Evening\" = \"weekday_evening\")) + \n  tm_facets(ncol = 1, free.scales = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nweekday_156k &lt;- hex_grid_count2 %&gt;%\n  filter(weekday_morn &gt;= 156000 | weekday_evening &gt;= 156000) %&gt;%\n  select(index, bus_stop_names, weekday_morn, weekday_evening)\n\nkable(weekday_156k)\n\n\n\n\n\n\n\n\n\n\n\n\nindex\nbus_stop_names\nweekday_morn\nweekday_evening\ngeometry\n\n\n\n\n1251\nBLK 664C, Blk 662A, BLK 662D, BOON LAY MRT STN, BOON LAY INT, OPP BLK 662C, OPP BOON LAY MRT STN\n396701\n551636\nPOLYGON ((13720.12 35286.69…\n\n\n1438\nLAKESIDE STN, OPP BLK 203, BLK 517, OPP LAKESIDE STN\n94194\n172864\nPOLYGON ((15220.12 36152.72…\n\n\n1815\nCHOA CHU KANG INT, LOT 1 / CHOA CHU KANG STN, OPP NORTHVALE CONDO, OPP CHOA CHU KANG STN\n156028\n289879\nPOLYGON ((18220.12 40482.84…\n\n\n1904\nBLK 644, BLK 231, BLK 503, BLK 225, BT BATOK INT, BLK 240\n137323\n164006\nPOLYGON ((18970.12 36585.73…\n\n\n2054\nBLK 431, CLEMENTI STN, CLEMENTI STN\n202467\n184460\nPOLYGON ((20220.12 32688.62…\n\n\n2062\nBT PANJANG STN EXIT A/ LRT, OPP BT PANJANG STN, AFT BT PANJANG STN, BT PANJANG INT, THE LINEAR, BT PANJANG STN EXIT B, OPP BLK 180, BLK 180\n95420\n230072\nPOLYGON ((20220.12 39616.82…\n\n\n2411\nBLK 515, BEF W’LANDS STN EXIT 7, WOODLANDS REG INT, W’LANDS CIVIC CTR, BLK 894C, W’LANDS STN EXIT 4, W’LANDS STN EXIT 5, OPP W’LANDS CIVIC CTR\n313192\n474311\nPOLYGON ((22970.12 46112.01…\n\n\n3204\nBLK 84B, OPP TOA PAYOH STN, BLK 138B, BLK 79C, TOA PAYOH BUS INT, TOA PAYOH BUS INT, TOA PAYOH STN\n166638\n248170\nPOLYGON ((29470.12 34853.68…\n\n\n3239\nBLK 322, BLK 422, AFT ANG MO KIO INT, AFT ANG MO KIO STN EXIT A, ANG MO KIO INT, ANG MO KIO STN\n212340\n325858\nPOLYGON ((29720.12 38750.79…\n\n\n3578\nBLK 421, SERANGOON INT, S’GOON STN EXIT A / BLK 413, S’GOON STN EXIT C / BLK 201, S’GOON STN EXIT E, S’GOON STN EXIT H, BLK 409, S’GOON STN EXIT D / BLK 416\n111428\n299786\nPOLYGON ((32470.12 36585.73…\n\n\n3859\nNAUNG RESIDENCE, THE MIDTOWN, HOUGANG CTRL INT, BLK 302, HOUGANG CTRL INT, BLK 327\n106496\n183771\nPOLYGON ((34720.12 38750.79…\n\n\n3924\nBLK 248A, SENGKANG INT, COMPASSVALE INT, BLK 240, Sengkang Stn, BLK 259C, BLK 250A\n77090\n211180\nPOLYGON ((35220.12 41348.87…\n\n\n3957\nPUNGGOL STN / WATERWAY PT, PUNGGOL BUS INTERCHANGE, BEF BLK 264, OPP BLK 272C, BLK 272C\n88871\n179509\nPOLYGON ((35470.12 42647.91…\n\n\n4018\nBLK 102C, BEF PUNGGOL RD, AFT PUNGGOL RD, OPP BLK 103A\n207583\n146562\nPOLYGON ((35970.12 41781.88…\n\n\n4349\nBEDOK STN EXIT B, PANASONIC, OPP PANASONIC, BEDOK BUS INT, BEDOK STN EXIT A\n187052\n370328\nPOLYGON ((38720.12 33554.64…\n\n\n4539\nTAMPINES INT, TAMPINES INT, UOB TAMPINES CTR, OPP CENTURY SQ, OPP OUR TAMPINES HUB, OUR TAMPINES HUB, Aft Tampines Stn Exit E, Tampines Stn Exit D\n202366\n446207\nPOLYGON ((40220.12 37018.74…\n\n\n4635\nOPP PASIR RIS STN EXIT A, PASIR RIS INT, PASIR RIS INT, AFT PASIR RIS ST 53, AFT PASIR RIS DR 3, BLK 586, BEF PASIR RIS ST 53, AFT PASIR RIS STN EXIT A, BEF PASIR RIS STN\n88685\n220510\nPOLYGON ((40970.12 39183.81…\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe geographical distribution of weekday peak hour commuting flow is much clearer in this geovisualisation using Jenks Natural Breaks. Areas with high commuting flow could be defined as the last two classes (commuting flow &gt;156k) and the code chunk above displays these hexagon grids in greater detail. It can also be observed that all of the highest commuting flow areas are in the housing estates.\n\n\n\n\nThe geographical distribution of the weekends / holidays peak hour commuting flows is plotted side by side using tm_facets() function. The free.scales argument is set to FALSE to show a consistent scale across both time periods.\n\n\nCode\ntmap_mode(\"view\")\n\ntm_shape(hex_grid_count2) +\n  tm_fill(col = c(\"weekend_morn\", \"weekend_evening\"),\n          palette = \"Purples\",\n          n = 6, style = \"jenks\", \n          popup.vars = c(\"Bus Stops\" = \"bus_stop_codes\", \n                         \"Weekend/PH Morning\" = \"weekend_morn\", \n                         \"Weekend/PH Evening\" = \"weekend_evening\")) + \n  tm_facets(ncol = 1, free.scales = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below displays the hexagon grids that fall into the last two classes (&gt;31k) in greater detail.\n\n\nCode\nweekend_31k &lt;- hex_grid_count2 %&gt;%\n  filter(weekend_morn &gt;= 31000 | weekend_evening &gt;= 31000) %&gt;%\n  select(index, bus_stop_names, weekend_morn, weekend_evening)\n\nkable(weekend_31k)\n\n\n\n\n\n\n\n\n\n\n\n\nindex\nbus_stop_names\nweekend_morn\nweekend_evening\ngeometry\n\n\n\n\n1251\nBLK 664C, Blk 662A, BLK 662D, BOON LAY MRT STN, BOON LAY INT, OPP BLK 662C, OPP BOON LAY MRT STN\n108551\n149047\nPOLYGON ((13720.12 35286.69…\n\n\n1438\nLAKESIDE STN, OPP BLK 203, BLK 517, OPP LAKESIDE STN\n23964\n37003\nPOLYGON ((15220.12 36152.72…\n\n\n1778\nJ GATEWAY, JURONG EAST TEMP INT, OPP JEM\n25234\n37976\nPOLYGON ((17970.12 34853.68…\n\n\n1815\nCHOA CHU KANG INT, LOT 1 / CHOA CHU KANG STN, OPP NORTHVALE CONDO, OPP CHOA CHU KANG STN\n62447\n78360\nPOLYGON ((18220.12 40482.84…\n\n\n1904\nBLK 644, BLK 231, BLK 503, BLK 225, BT BATOK INT, BLK 240\n39157\n43066\nPOLYGON ((18970.12 36585.73…\n\n\n2024\nOPP REGENT PK, NAN HUA PR SCH, CLEMENTI INT, REGENT PK\n37828\n40308\nPOLYGON ((19970.12 33121.63…\n\n\n2054\nBLK 431, CLEMENTI STN, CLEMENTI STN\n44441\n52125\nPOLYGON ((20220.12 32688.62…\n\n\n2062\nBT PANJANG STN EXIT A/ LRT, OPP BT PANJANG STN, AFT BT PANJANG STN, BT PANJANG INT, THE LINEAR, BT PANJANG STN EXIT B, OPP BLK 180, BLK 180\n48824\n64095\nPOLYGON ((20220.12 39616.82…\n\n\n2102\nW’LANDS CHECKPT\n42251\n38354\nPOLYGON ((20470.12 46978.04…\n\n\n2133\nW’LANDS CHECKPT\n28240\n38286\nPOLYGON ((20720.12 47411.05…\n\n\n2135\nJOHOR BAHRU CHECKPT, JOHOR BAHRU CHECKPT\n31773\n38431\nPOLYGON ((20720.12 49143.1,…\n\n\n2411\nBLK 515, BEF W’LANDS STN EXIT 7, WOODLANDS REG INT, W’LANDS CIVIC CTR, BLK 894C, W’LANDS STN EXIT 4, W’LANDS STN EXIT 5, OPP W’LANDS CIVIC CTR\n99396\n123274\nPOLYGON ((22970.12 46112.01…\n\n\n2854\nHARBOURFRONT STN EXIT A, OPP VIVOCITY, HARBOURFRONT/VIVOCITY\n24091\n41675\nPOLYGON ((26720.12 27492.46…\n\n\n2950\nOPP TIONG BAHRU STN, TIONG BAHRU STN, CTRL GREEN CONDO\n37980\n35154\nPOLYGON ((27470.12 29657.53…\n\n\n3014\nOPP NGEE ANN CITY, BEF ORCHARD STN EXIT B, ORCHARD STN / LUCKY PLAZA, ORCHARD STN / TANGS PLAZA, OPP ORCHARD STN / ION\n35047\n54816\nPOLYGON ((27970.12 31389.58…\n\n\n3166\nOPP HONG LIM CPLX, CHINATOWN STN EXIT E, MAXWELL RD FC, NEW BRIDGE CTR, OPP SRI MARIAMMAN TP, CHINATOWN STN EXIT C\n43599\n45553\nPOLYGON ((29220.12 29224.51…\n\n\n3204\nBLK 84B, OPP TOA PAYOH STN, BLK 138B, BLK 79C, TOA PAYOH BUS INT, TOA PAYOH BUS INT, TOA PAYOH STN\n71600\n78369\nPOLYGON ((29470.12 34853.68…\n\n\n3239\nBLK 322, BLK 422, AFT ANG MO KIO INT, AFT ANG MO KIO STN EXIT A, ANG MO KIO INT, ANG MO KIO STN\n79535\n94824\nPOLYGON ((29720.12 38750.79…\n\n\n3292\nST JOSEPH’S CH, AFT BUGIS STN EXIT C, OPP BUGIS STN EXIT C, BRAS BASAH CPLX, HOTEL GRAND PACIFIC, BEF BENCOOLEN STN EXIT A, AFT WATERLOO ST, BEF WATERLOO ST\n29286\n38048\nPOLYGON ((30220.12 30956.57…\n\n\n3578\nBLK 421, SERANGOON INT, S’GOON STN EXIT A / BLK 413, S’GOON STN EXIT C / BLK 201, S’GOON STN EXIT E, S’GOON STN EXIT H, BLK 409, S’GOON STN EXIT D / BLK 416\n57084\n80507\nPOLYGON ((32470.12 36585.73…\n\n\n3822\nSIMS VILLE, BLK 1015, PAYA LEBAR STN EXIT D, OPP BLK 1015, PAYA LEBAR STN EXIT C, PAYA LEBAR STN EXIT B\n28803\n34103\nPOLYGON ((34470.12 33121.63…\n\n\n3859\nNAUNG RESIDENCE, THE MIDTOWN, HOUGANG CTRL INT, BLK 302, HOUGANG CTRL INT, BLK 327\n46128\n50760\nPOLYGON ((34720.12 38750.79…\n\n\n3924\nBLK 248A, SENGKANG INT, COMPASSVALE INT, BLK 240, Sengkang Stn, BLK 259C, BLK 250A\n44740\n53323\nPOLYGON ((35220.12 41348.87…\n\n\n3957\nPUNGGOL STN / WATERWAY PT, PUNGGOL BUS INTERCHANGE, BEF BLK 264, OPP BLK 272C, BLK 272C\n41764\n49806\nPOLYGON ((35470.12 42647.91…\n\n\n4006\nOPP PARKWAY PARADE, PARKWAY PARADE, OPP 112 KATONG\n31559\n37707\nPOLYGON ((35970.12 31389.58…\n\n\n4018\nBLK 102C, BEF PUNGGOL RD, AFT PUNGGOL RD, OPP BLK 103A\n39349\n41052\nPOLYGON ((35970.12 41781.88…\n\n\n4349\nBEDOK STN EXIT B, PANASONIC, OPP PANASONIC, BEDOK BUS INT, BEDOK STN EXIT A\n101960\n118967\nPOLYGON ((38720.12 33554.64…\n\n\n4539\nTAMPINES INT, TAMPINES INT, UOB TAMPINES CTR, OPP CENTURY SQ, OPP OUR TAMPINES HUB, OUR TAMPINES HUB, Aft Tampines Stn Exit E, Tampines Stn Exit D\n95639\n124569\nPOLYGON ((40220.12 37018.74…\n\n\n4635\nOPP PASIR RIS STN EXIT A, PASIR RIS INT, PASIR RIS INT, AFT PASIR RIS ST 53, AFT PASIR RIS DR 3, BLK 586, BEF PASIR RIS ST 53, AFT PASIR RIS STN EXIT A, BEF PASIR RIS STN\n40921\n54305\nPOLYGON ((40970.12 39183.81…\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nFor the weekend peak hour commuting flow, areas with high commuting flow could be defined as the last two classes (commuting flow &gt;31k) and the code chunk above displays these hexagon grids in greater detail. Using Jenks Natural Breaks for data classification also reveals more high commuting flow areas that are not just in the major housing estates, but also in the town area and the area surrounding Woodlands Checkpoint."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#time-series-cube",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#time-series-cube",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Time Series Cube",
    "text": "Time Series Cube\nSpatio-temporal data are typically presented in long formats, where a row identifies a unique location and time observation represented by a column dedicated to time and another to locations. However, such data are traditionally not linked to the geographies as they contain only an identifier of the location, but not the spatial representation that makes the data meaningful for geospatial analysis.\nThe spacetime class in sfdep package can be used to create lattice data that is a representation of spatio-temporal data for a set of regions containing the geometries over a number of different time-periods. There are two possible layouts: spatio-temporal full grid and sparse grids.\nGiven a number of spatial features n, and time periods m, a spatio-temporal full grid contains n×m rows. Each location has a recorded observation for each of the time periods in m. When there are missing observations for some locations or time periods and they are entirely omitted from the data set, that is a spatio-temporal sparse grid.\nFor this analysis, time series cubes will be created for each of the four target time periods respectively using the earlier created hex_grid_count."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#create-time-series-cube",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#create-time-series-cube",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Create Time Series Cube",
    "text": "Create Time Series Cube\nIn the code chunks below, relevant columns that correspond to the target time periods will be selected from hex_grid_count and joined with hex_grid to create the n number of spatial features. The corresponding sf data frame will then be pivoted longer to create a time series data containing the m time periods. Once the data frame has nxm rows, apply the spacetime() function to create the time series cube.\n\nWeekday Morning Time Series CubeWeekday Evening Time Series CubeWeekend/PH Morning Time Series CubeWeekend/PH Evening Time Series Cube\n\n\n\n\nCode\n# Select relevant columns from hex_grid_count\nweekday_morn_hex &lt;- hex_grid_count %&gt;%\n  select(index, count, bus_stop_codes, bus_stop_names, geometry,\n         `WEEKDAY 6`, `WEEKDAY 7`, `WEEKDAY 8`, `WEEKDAY 9`)\n\n# Join with hex_grid and pivot longer to create time series data\nweekday_morn_full &lt;- st_join(hex_grid, weekday_morn_hex, join = st_within) %&gt;%\n  select(-c(index.y)) %&gt;%\n  rename(index = index.x) %&gt;%\n  rename_with(~gsub(\"WEEKDAY \", \"\", .), matches(\"^WEEKDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`6`, `7`, `8`, `9`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(index, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n# Apply spacetime() function\nweekday_morn_cube &lt;- spacetime(weekday_morn_full, hex_grid,\n                               .loc_col = \"index\", .time_col = \"TIME_PER_HOUR\")\n\n# Verify that resultant output is a spacetime cube\nis_spacetime_cube(weekday_morn_cube)\n\n\n[1] TRUE\n\n\nThe TRUE return confirms that weekday_morn_cube object is indeed an time-space cube.\n\n\n\n\nCode\n# Select relevant columns from hex_grid_count\nweekday_evening_hex &lt;- hex_grid_count %&gt;%\n  select(index, count, bus_stop_codes, bus_stop_names, geometry,\n         `WEEKDAY 17`, `WEEKDAY 18`, `WEEKDAY 19`, `WEEKDAY 20`)\n\n# Join with hex_grid and pivot longer to create time series data\nweekday_evening_full &lt;- st_join(hex_grid, weekday_evening_hex, join = st_within) %&gt;%\n  select(-c(index.y)) %&gt;%\n  rename(index = index.x) %&gt;%\n  rename_with(~gsub(\"WEEKDAY \", \"\", .), matches(\"^WEEKDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`17`, `18`, `19`, `20`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(index, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n# Apply spacetime() function\nweekday_evening_cube &lt;- spacetime(weekday_evening_full, hex_grid,\n                               .loc_col = \"index\", .time_col = \"TIME_PER_HOUR\")\n\n# Verify that resultant output is a spacetime cube\nis_spacetime_cube(weekday_evening_cube)\n\n\n[1] TRUE\n\n\nThe TRUE return confirms that weekday_evening_cube object is indeed an time-space cube.\n\n\n\n\nCode\n# Select relevant columns from hex_grid_count\nweekend_morn_hex &lt;- hex_grid_count %&gt;%\n  select(index, count, bus_stop_codes, bus_stop_names, geometry,\n         `WEEKENDS/HOLIDAY 11`, `WEEKENDS/HOLIDAY 12`, \n         `WEEKENDS/HOLIDAY 13`, `WEEKENDS/HOLIDAY 14`)\n\n# Join with hex_grid and pivot longer to create time series data\nweekend_morn_full &lt;- st_join(hex_grid, weekend_morn_hex, join = st_within) %&gt;%\n  select(-c(index.y)) %&gt;%\n  rename(index = index.x) %&gt;%\n  rename_with(~gsub(\"WEEKENDS/HOLIDAY \", \"\", .), matches(\"^WEEKENDS/HOLIDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`11`, `12`, `13`, `14`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(index, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n# Apply spacetime() function\nweekend_morn_cube &lt;- spacetime(weekend_morn_full, hex_grid,\n                               .loc_col = \"index\", .time_col = \"TIME_PER_HOUR\")\n\n# Verify that resultant output is a spacetime cube\nis_spacetime_cube(weekend_morn_cube)\n\n\n[1] TRUE\n\n\nThe TRUE return confirms that weekend_morn_cube object is indeed an time-space cube.\n\n\n\n\nCode\n# Select relevant columns from hex_grid_count\nweekend_evening_hex &lt;- hex_grid_count %&gt;%\n  select(index, count, bus_stop_codes, bus_stop_names, geometry,\n         `WEEKENDS/HOLIDAY 16`, `WEEKENDS/HOLIDAY 17`, \n         `WEEKENDS/HOLIDAY 18`, `WEEKENDS/HOLIDAY 19`)\n\n# Join with hex_grid and pivot longer to create time series data\nweekend_evening_full &lt;- st_join(hex_grid, weekend_evening_hex, join = st_within) %&gt;%\n  select(-c(index.y)) %&gt;%\n  rename(index = index.x) %&gt;%\n  rename_with(~gsub(\"WEEKENDS/HOLIDAY \", \"\", .), matches(\"^WEEKENDS/HOLIDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`16`, `17`, `18`, `19`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(index, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n# Apply spacetime() function\nweekend_evening_cube &lt;- spacetime(weekend_evening_full, hex_grid,\n                               .loc_col = \"index\", .time_col = \"TIME_PER_HOUR\")\n\n# Verify that resultant output is a spacetime cube\nis_spacetime_cube(weekend_evening_cube)\n\n\n[1] TRUE\n\n\nThe TRUE return confirms that weekend_evening_cube object is indeed an time-space cube."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#computation-of-local-gi-statistics",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#computation-of-local-gi-statistics",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Computation of Local Gi* statistics",
    "text": "Computation of Local Gi* statistics\nTo compute the local Gi* statistics, spatial weights must first be derived. The code chunks below will be used to identify neighbors and to derive an inverse distance weights for each target time period. activate() is used to first activate the geometry context, followed by mutate() to create two new columns nb and wt. Then activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts().\n\nSpatial Weights for Weekday MorningSpatial Weights for Weekday EveningSpatial Weights for Weekend/PH MorningSpatial Weights for Weekend/PH Evening\n\n\n\n\nCode\nweekday_morn_nb &lt;- weekday_morn_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\n\nCode\nweekday_evening_nb &lt;- weekday_evening_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\n\nCode\nweekend_morn_nb &lt;- weekend_morn_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\n\nCode\nweekend_evening_nb &lt;- weekend_evening_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\n\n\n\n\nIn the code chunks below, the new columns are used to manually calculate the local Gi* for each location. This is done by grouping by TIME_PER_HOUR and using local_gstar_perm() of sfdep package. After which, unnest() is used to unnest the gi_star column of the newly created output.\n\nGi* for Weekday MorningGi* for Weekday EveningGi* for Weekend/PH MorningGi* for Weekend/PH Evening\n\n\n\n\nCode\ngi_weekday_morn &lt;- weekday_morn_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\n\n\n\nCode\ngi_weekday_evening &lt;- weekday_evening_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\n\n\n\nCode\ngi_weekend_morn &lt;- weekend_morn_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\n\n\n\n\n\nCode\ngi_weekend_evening &lt;- weekend_evening_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)"
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#mann-kendall-test",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#mann-kendall-test",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Mann-Kendall Test",
    "text": "Mann-Kendall Test\nWith the above Gi* statistics, it is possible to evaluate each location for a trend using the Mann-Kendall test.\n\nMann-Kendall Test for Weekday MorningMann-Kendall Test for Weekday EveningMann-Kendall Test for Weekend/PH MorningMann-Kendall Test for Weekend/PH Evening\n\n\nThe code chunk below performs the Mann-Kendall Test for the following high commuting flow hexagon grids:\n\n\n [1] 1251 1438 1815 1904 2054 2062 2411 3204 3239 3578 3859 3924 3957 4018 4349\n[16] 4539 4635\n\n\n\n\nCode\nplot_weekdaymorn &lt;- gi_weekday_morn %&gt;% \n  ungroup() %&gt;% \n  filter(index %in% weekday_156k$index) |&gt; \n  select(index, TIME_PER_HOUR, gi_star)\n\n# Plot result using ggplot2 functions and ggplotly() of plotly package\np1 &lt;- ggplot(data = plot_weekdaymorn, \n       aes(x = TIME_PER_HOUR, \n           y = gi_star,\n           color = as.factor(index))) +\n  geom_line() +\n  labs(color = \"Hexagon Grid\") + \n  theme_light()\n\nggplotly(p1)\n\n\n\n\n\n\nThe Mann-Kendall test is done for each hexagon grid in the code chunk below.\n\n\nCode\nweekdaymorn_ehsa &lt;- gi_weekday_morn %&gt;%\n  group_by(index) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# Save out the model\nwrite_rds(weekdaymorn_ehsa, \"data/rds/weekdaymorn_ehsa.rds\")\n\n\n\n\n# A tibble: 17 × 7\n   index    tau     sl     S     D  varS                                geometry\n   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;                           &lt;POLYGON [m]&gt;\n 1  3859  1.00  0.0894     6  6.00  8.67 ((34720.12 38750.79, 34470.12 38895.13…\n 2  1438 -0.667 0.308     -4  6.00  8.67 ((15220.12 36152.72, 14970.12 36297.06…\n 3  2054  0.667 0.308      4  6.00  8.67 ((20220.12 32688.62, 19970.12 32832.95…\n 4  2062 -0.667 0.308     -4  6.00  8.67 ((20220.12 39616.82, 19970.12 39761.16…\n 5  2411 -0.667 0.308     -4  6.00  8.67 ((22970.12 46112.01, 22720.12 46256.35…\n 6  3204  0.667 0.308      4  6.00  8.67 ((29470.12 34853.68, 29220.12 34998.02…\n 7  3578  0.667 0.308      4  6.00  8.67 ((32470.12 36585.73, 32220.12 36730.07…\n 8  3924 -0.667 0.308     -4  6.00  8.67 ((35220.12 41348.87, 34970.12 41493.21…\n 9  3957 -0.667 0.308     -4  6.00  8.67 ((35470.12 42647.91, 35220.12 42792.25…\n10  4018 -0.667 0.308     -4  6.00  8.67 ((35970.12 41781.88, 35720.12 41926.22…\n11  4635 -0.667 0.308     -4  6.00  8.67 ((40970.12 39183.81, 40720.12 39328.14…\n12  1815 -0.333 0.734     -2  6.00  8.67 ((18220.12 40482.84, 17970.12 40627.18…\n13  1904 -0.333 0.734     -2  6.00  8.67 ((18970.12 36585.73, 18720.12 36730.07…\n14  3239  0.333 0.734      2  6.00  8.67 ((29720.12 38750.79, 29470.12 38895.13…\n15  4539  0.333 0.734      2  6.00  8.67 ((40220.12 37018.74, 39970.12 37163.08…\n16  1251  0     1          0  6.00  8.67 ((13720.12 35286.69, 13470.12 35431.03…\n17  4349  0     1          0  6.00  8.67 ((38720.12 33554.64, 38470.12 33698.98…\n\n\n\nIn the above result, sl is the p-value.\n\n\n\n\n\n\n\nInsights\n\n\n\nThe chart and the table above suggests a slight upward trend across the 4 hours of the weekday morning peak period for hexagon grid 3859.\n\nAt an alpha value of 0.05 (CI 95%), p-value &gt; alpha value, suggesting that this trend is insignificant.\nAt alpha value of 0.1 (CI 90%), p-value &lt; alpha value, suggesting that this trend is significant.\n\nFor all the other hexagon grids, there is no significant upward or downward trend in commuting flow across the 4 hours of the weekday morning peak period.\n\n\n\n\nThe code chunk below performs the Mann-Kendall Test for the following high commuting flow hexagon grids:\n\n\n [1] 1251 1438 1815 1904 2054 2062 2411 3204 3239 3578 3859 3924 3957 4018 4349\n[16] 4539 4635\n\n\n\n\nCode\nplot_weekdayevening &lt;- gi_weekday_evening %&gt;% \n  ungroup() %&gt;% \n  filter(index %in% weekday_156k$index) |&gt; \n  select(index, TIME_PER_HOUR, gi_star)\n\n# Plot result using ggplot2 functions and ggplotly() of plotly package\np2 &lt;- ggplot(data = plot_weekdayevening, \n       aes(x = TIME_PER_HOUR, \n           y = gi_star,\n           color = as.factor(index))) +\n  geom_line() +\n  labs(color = \"Hexagon Grid\") + \n  theme_light()\n\nggplotly(p2)\n\n\n\n\n\n\nThe Mann-Kendall test is done for each hexagon grid in the code chunk below.\n\n\nCode\nweekdayevening_ehsa &lt;- gi_weekday_evening %&gt;%\n  group_by(index) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# Save out the model\nwrite_rds(weekdayevening_ehsa, \"data/rds/weekdayevening_ehsa.rds\")\n\n\n\n\n# A tibble: 17 × 7\n   index    tau     sl     S     D  varS                                geometry\n   &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;                           &lt;POLYGON [m]&gt;\n 1  1904 -1.00  0.0894    -6  6.00  8.67 ((18970.12 36585.73, 18720.12 36730.07…\n 2  4018 -1.00  0.0894    -6  6.00  8.67 ((35970.12 41781.88, 35720.12 41926.22…\n 3  1251  0.667 0.308      4  6.00  8.67 ((13720.12 35286.69, 13470.12 35431.03…\n 4  1438 -0.667 0.308     -4  6.00  8.67 ((15220.12 36152.72, 14970.12 36297.06…\n 5  2062  0.667 0.308      4  6.00  8.67 ((20220.12 39616.82, 19970.12 39761.16…\n 6  3204 -0.667 0.308     -4  6.00  8.67 ((29470.12 34853.68, 29220.12 34998.02…\n 7  3239  0.667 0.308      4  6.00  8.67 ((29720.12 38750.79, 29470.12 38895.13…\n 8  3578  0.667 0.308      4  6.00  8.67 ((32470.12 36585.73, 32220.12 36730.07…\n 9  4349  0.667 0.308      4  6.00  8.67 ((38720.12 33554.64, 38470.12 33698.98…\n10  4539  0.667 0.308      4  6.00  8.67 ((40220.12 37018.74, 39970.12 37163.08…\n11  4635  0.667 0.308      4  6.00  8.67 ((40970.12 39183.81, 40720.12 39328.14…\n12  2054 -0.333 0.734     -2  6.00  8.67 ((20220.12 32688.62, 19970.12 32832.95…\n13  3859  0.333 0.734      2  6.00  8.67 ((34720.12 38750.79, 34470.12 38895.13…\n14  3957  0.333 0.734      2  6.00  8.67 ((35470.12 42647.91, 35220.12 42792.25…\n15  1815  0     1          0  6.00  8.67 ((18220.12 40482.84, 17970.12 40627.18…\n16  2411  0     1          0  6.00  8.67 ((22970.12 46112.01, 22720.12 46256.35…\n17  3924  0     1          0  6.00  8.67 ((35220.12 41348.87, 34970.12 41493.21…\n\n\n\nIn the above result, sl is the p-value.\n\n\n\n\n\n\n\nInsights\n\n\n\nThe chart and the table above suggests a slight downward trend across the 4 hours of the weekday evening peak period for hexagon grids 1904 and 4018.\n\nAt an alpha value of 0.05 (CI 95%), p-value &gt; alpha value, suggesting that this trend is insignificant.\nAt alpha value of 0.1 (CI 90%), p-value &lt; alpha value, suggesting that this trend is significant.\n\nFor all the other hexagon grids, there is no significant upward or downward trend in commuting flow across the 4 hours of the weekday evening peak period.\n\n\n\n\nThe code chunk below performs the Mann-Kendall Test for the following high commuting flow hexagon grids:\n\n\n [1] 1251 1438 1778 1815 1904 2024 2054 2062 2102 2133 2135 2411 2854 2950 3014\n[16] 3166 3204 3239 3292 3578 3822 3859 3924 3957 4006 4018 4349 4539 4635\n\n\n\n\nCode\nplot_weekendmorn &lt;- gi_weekend_morn %&gt;% \n  ungroup() %&gt;% \n  filter(index %in% weekend_31k$index) |&gt; \n  select(index, TIME_PER_HOUR, gi_star)\n\n# Plot result using ggplot2 functions and ggplotly() of plotly package\np3 &lt;- ggplot(data = plot_weekendmorn, \n       aes(x = TIME_PER_HOUR, \n           y = gi_star,\n           color = as.factor(index))) +\n  geom_line() +\n  labs(color = \"Hexagon Grid\") + \n  theme_light()\n\nggplotly(p3)\n\n\n\n\n\n\nThe Mann-Kendall test is done for each hexagon grid in the code chunk below.\n\n\nCode\nweekendmorn_ehsa &lt;- gi_weekend_morn %&gt;%\n  group_by(index) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# Save out the model\nwrite_rds(weekendmorn_ehsa, \"data/rds/weekendmorn_ehsa.rds\")\n\n\n\n\n# A tibble: 29 × 7\n   index   tau     sl     S     D  varS                                 geometry\n   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;                            &lt;POLYGON [m]&gt;\n 1  1438 -1.00 0.0894    -6  6.00  8.67 ((15220.12 36152.72, 14970.12 36297.06,…\n 2  2102 -1.00 0.0894    -6  6.00  8.67 ((20470.12 46978.04, 20220.12 47122.37,…\n 3  2133 -1.00 0.0894    -6  6.00  8.67 ((20720.12 47411.05, 20470.12 47555.39,…\n 4  2950 -1.00 0.0894    -6  6.00  8.67 ((27470.12 29657.53, 27220.12 29801.86,…\n 5  3859 -1.00 0.0894    -6  6.00  8.67 ((34720.12 38750.79, 34470.12 38895.13,…\n 6  4018 -1.00 0.0894    -6  6.00  8.67 ((35970.12 41781.88, 35720.12 41926.22,…\n 7  1251  1.00 0.0894     6  6.00  8.67 ((13720.12 35286.69, 13470.12 35431.03,…\n 8  1778  1.00 0.0894     6  6.00  8.67 ((17970.12 34853.68, 17720.12 34998.02,…\n 9  2411  1.00 0.0894     6  6.00  8.67 ((22970.12 46112.01, 22720.12 46256.35,…\n10  2854  1.00 0.0894     6  6.00  8.67 ((26720.12 27492.46, 26470.12 27636.8, …\n# … with 19 more rows\n\n\n\nIn the above result, sl is the p-value.\n\n\n\n\n\n\n\nInsights\n\n\n\nThe chart and the table above suggests a slight downward trend across the 4 hours of the weekend morning peak period for hexagon grids 1438, 2102, 2133, 2950, 3859 and 4018.\n\nAt an alpha value of 0.05 (CI 95%), p-value &gt; alpha value, suggesting that this trend is insignificant.\nAt alpha value of 0.1 (CI 90%), p-value &lt; alpha value, suggesting that this trend is significant.\n\nConversely, there is a slight upward trend across the 4 hours of the weekend morning peak period for hexagon grids 1251, 1778, 2411, 2854, 3014, 3166, 3292, 3578, 3924, 3957, 4349, 4539 and 4635.\n\nAt an alpha value of 0.05 (CI 95%), p-value &gt; alpha value, suggesting that this trend is insignificant.\nAt alpha value of 0.1 (CI 90%), p-value &lt; alpha value, suggesting that this trend is significant.\n\nFor all the other hexagon grids, there is no significant upward or downward trend in commuting flow across the 4 hours of the weekend morning peak period.\n\n\n\n\nThe code chunk below performs the Mann-Kendall Test for the following high commuting flow hexagon grids:\n\n\n [1] 1251 1438 1778 1815 1904 2024 2054 2062 2102 2133 2135 2411 2854 2950 3014\n[16] 3166 3204 3239 3292 3578 3822 3859 3924 3957 4006 4018 4349 4539 4635\n\n\n\n\nCode\nplot_weekendevening &lt;- gi_weekend_evening %&gt;% \n  ungroup() %&gt;% \n  filter(index %in% weekend_31k$index) |&gt; \n  select(index, TIME_PER_HOUR, gi_star)\n\n# Plot result using ggplot2 functions and ggplotly() of plotly package\np4 &lt;- ggplot(data = plot_weekendevening, \n       aes(x = TIME_PER_HOUR, \n           y = gi_star,\n           color = as.factor(index))) +\n  geom_line() +\n  labs(color = \"Hexagon Grid\") + \n  theme_light()\n\nggplotly(p4)\n\n\n\n\n\n\nThe Mann-Kendall test is done for each hexagon grid in the code chunk below.\n\n\nCode\nweekendevening_ehsa &lt;- gi_weekend_evening %&gt;%\n  group_by(index) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)\n\n# Save out the model\nwrite_rds(weekendevening_ehsa, \"data/rds/weekendevening_ehsa.rds\")\n\n\n\n\n# A tibble: 29 × 7\n   index   tau     sl     S     D  varS                                 geometry\n   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;                            &lt;POLYGON [m]&gt;\n 1  2950 -1.00 0.0894    -6  6.00  8.67 ((27470.12 29657.53, 27220.12 29801.86,…\n 2  3166 -1.00 0.0894    -6  6.00  8.67 ((29220.12 29224.51, 28970.12 29368.85,…\n 3  3292 -1.00 0.0894    -6  6.00  8.67 ((30220.12 30956.57, 29970.12 31100.9, …\n 4  3924 -1.00 0.0894    -6  6.00  8.67 ((35220.12 41348.87, 34970.12 41493.21,…\n 5  4018 -1.00 0.0894    -6  6.00  8.67 ((35970.12 41781.88, 35720.12 41926.22,…\n 6  1251  1.00 0.0894     6  6.00  8.67 ((13720.12 35286.69, 13470.12 35431.03,…\n 7  1778  1.00 0.0894     6  6.00  8.67 ((17970.12 34853.68, 17720.12 34998.02,…\n 8  2062  1.00 0.0894     6  6.00  8.67 ((20220.12 39616.82, 19970.12 39761.16,…\n 9  2411  1.00 0.0894     6  6.00  8.67 ((22970.12 46112.01, 22720.12 46256.35,…\n10  2854  1.00 0.0894     6  6.00  8.67 ((26720.12 27492.46, 26470.12 27636.8, …\n# … with 19 more rows\n\n\n\nIn the above result, sl is the p-value.\n\n\n\n\n\n\n\nInsights\n\n\n\nThe chart and the table above suggests a slight downward trend across the 4 hours of the weekend evening peak period for hexagon grids 2950, 3166, 3292, 3924 and 4018.\n\nAt an alpha value of 0.05 (CI 95%), p-value &gt; alpha value, suggesting that this trend is insignificant.\nAt alpha value of 0.1 (CI 90%), p-value &lt; alpha value, suggesting that this trend is significant.\n\nConversely, there is a slight upward trend across the 4 hours of the weekend morning peak period for hexagon grids 1251, 1778, 2062, 2411, 2854 and 4635.\n\nAt an alpha value of 0.05 (CI 95%), p-value &gt; alpha value, suggesting that this trend is insignificant.\nAt alpha value of 0.1 (CI 90%), p-value &lt; alpha value, suggesting that this trend is significant.\n\nFor all the other hexagon grids, there is no significant upward or downward trend in commuting flow across the 4 hours of the weekend morning peak period."
  },
  {
    "objectID": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#perform-emerging-hot-spot-analysis-ehsa",
    "href": "Take_Home_Exercise/Ex1/Take_home_Ex1.html#perform-emerging-hot-spot-analysis-ehsa",
    "title": "1: Geospatial Analytics for Public Good",
    "section": "Perform Emerging Hot Spot Analysis (EHSA)",
    "text": "Perform Emerging Hot Spot Analysis (EHSA)\nIn the code chunks below, emerging_hotspot_analysis() of sfdep package is used to perform Emerging Hot Spot Analysis on a spacetime object e.g. weekday_morn_cube. The .var argument takes the name of a variable of interest (e.g. TRIPS), the k argument is used to specify the number of time lags which is set to 1 by default, and the nsim argument maps the number of simulations to be performed.\nFor visualisation, ggplot2 functions are used to reveal the distribution of EHSA classes as a bar chart. To visualise the geographic distribution of the EHSA classes, hex_grid sf data frame is joined to the EHSA data frames. Then, tmap functions will be used to plot categorical choropleth maps.\n\n\nCode\n# Creating a custom color palette for choropleth map\nmy_palette &lt;- c(\"no pattern detected\" = \"grey85\",\n                \"new hotspot\" = \"mistyrose1\",\n                \"sporadic hotspot\" = \"lightpink\",\n                \"consecutive hotspot\" = \"indianred\",\n                \"persistent hotspot\" = \"darkred\")\n\n\n\nEHSA for Weekday MorningEHSA for Weekday EveningEHSA for Weekend/PH MorningEHSA for Weekend/PH Evening\n\n\n\n\nCode\nwkd_morn_ehsa &lt;- emerging_hotspot_analysis(\n  x = weekday_evening_cube, \n  .var = \"TRIPS\", \n  k = 1, \n  nsim = 99\n)\n\n# Save out the model\nwrite_rds(wkd_morn_ehsa, \"data/rds/wkd_morn_ehsa.rds\")\n\n\n\n\nCode\n# Visualise the distribution of classes\nv1 &lt;- ggplot(data = wkd_morn_ehsa,\n             aes(x = classification)) +\n  geom_bar() + \n  theme(axis.text = element_text(size = 6))\n\nggplotly(v1)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nMore than half of the hexagon grids had no pattern detected - likely due to the large number of 0s in the data frame. The next largest class of hexagon grids are “sporadic cold spots”, which refers to locations that are on-again then off-again cold spots.\n\n\n\nChoropleth Map for Weekday Morning Hotspots\nThe following choropleth map is charted at an alpha value of 0.1 (CI 90%). - Based on the Mann-Kendall Test performed earlier, there are no areas with a significant trend observed at alpha value of 0.05 (CI 95%).\n\n\nCode\nwkd_morn_ehsa_grid &lt;- hex_grid %&gt;%\n  left_join(wkd_morn_ehsa,\n            by = c(\"index\" = \"location\"))\n\n# Plot the choropleth map for significant values\nmorn_ehsa_sig &lt;- wkd_morn_ehsa_grid  %&gt;%\n  # Remove coldspot areas since most of these areas have low bus stop density\n  filter(p_value &lt; 0.1)\n\ntmap_mode(\"view\")\n\ntm_shape(morn_ehsa_sig) +\n  tm_fill(\"classification\", palette = my_palette) + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBased on the map, there are clusters of hot spots in several areas of Singapore during weekday morning peak hours. Among the grids identified earlier as high commuting flow regions, most are also hot spot areas. However, there are also clusters which were previously not identified as a high commuting flow region but should also be reviewed when doing further analysis.\n\n\n\n\n\n\n\nCode\nwkd_evening_ehsa &lt;- emerging_hotspot_analysis(\n  x = weekday_evening_cube, \n  .var = \"TRIPS\", \n  k = 1, \n  nsim = 99\n)\n\n# Save out the model\nwrite_rds(wkd_evening_ehsa, \"data/rds/wkd_evening_ehsa.rds\")\n\n\n\n\nCode\n# Visualise the distribution of classes\nv2 &lt;- ggplot(data = wkd_evening_ehsa,\n             aes(x = classification)) +\n  geom_bar() + \n  theme(axis.text = element_text(size = 6))\n\nggplotly(v2)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nMore than half of the hexagon grids had no pattern detected - likely due to the large number of 0s in the data frame. The next largest class of hexagon grids are “sporadic cold spots”. Among the “hot spots” classes, more areas are “sporadic hot spots”.\n\n\n\nChoropleth Map for Weekday Evening\nThe following choropleth map is charted at an alpha value of 0.1 (CI 90%). - Based on the Mann-Kendall Test performed earlier, there are no areas with a significant trend observed at alpha value of 0.05 (CI 95%).\n\n\nCode\nwkd_evening_ehsa_grid &lt;- hex_grid %&gt;%\n  left_join(wkd_evening_ehsa,\n            by = c(\"index\" = \"location\"))\n\n# Plot the choropleth map for significant values\nehsa_sig &lt;- wkd_evening_ehsa_grid  %&gt;%\n  # alpha value set at 0.1 based on Mann-Kendall Test performed earlier\n  filter(p_value &lt; 0.1) \n\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\", palette = my_palette) + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBased on the map, there are clusters of hot spots in several areas of Singapore during weekday evening peak hours. Among the grids identified earlier as high commuting flow regions, most are also hot spot areas. However, there are also clusters which were previously not identified as a high commuting flow region but should also be reviewed when doing further analysis.\n\n\n\n\n\n\n\nCode\nwke_morn_ehsa &lt;- emerging_hotspot_analysis(\n  x = weekend_morn_cube, \n  .var = \"TRIPS\", \n  k = 1, \n  nsim = 99\n)\n\n# Save out the model\nwrite_rds(wke_morn_ehsa, \"data/rds/wke_morn_ehsa.rds\")\n\n\n\n\nCode\n# Visualise the distribution of classes\nv3 &lt;- ggplot(data = wke_morn_ehsa,\n             aes(x = classification)) +\n  geom_bar() + \n  theme(axis.text = element_text(size = 6))\n\nggplotly(v3)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nMore than half of the hexagon grids had no pattern detected - likely due to the large number of 0s in the data frame. The next largest class of hexagon grids are “sporadic cold spots”, which refers to locations that are on-again then off-again cold spots.\n\n\n\nChoropleth Map for Weekend/PH Morning\nThe following choropleth map is charted at an alpha value of 0.1 (CI 90%). - Based on the Mann-Kendall Test performed earlier, there are no areas with a significant trend observed at alpha value of 0.05 (CI 95%).\n\n\nCode\nwke_morn_ehsa_grid &lt;- hex_grid %&gt;%\n  left_join(wke_morn_ehsa,\n            by = c(\"index\" = \"location\"))\n\n# Plot the choropleth map for significant values\nwkemorn_ehsa_sig &lt;- wke_morn_ehsa_grid  %&gt;%\n  # alpha value set at 0.1 based on Mann-Kendall Test performed earlier\n  filter(p_value &lt; 0.1) \n\ntm_shape(wkemorn_ehsa_sig) +\n  tm_fill(\"classification\", palette = my_palette) + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBased on the map, there are clusters of hot spots in several areas of Singapore during weekend morning peak hours. However, not all grids identified earlier as high commuting flow regions are also hot spot areas. The biggest cluster of hot spot area is in the Downtown region, though some larger housing estates such as Tampines, Boon Lay, Punggol/Sengkang are also hot spot areas. This could be due to the timings used for the weekend morning peak hour definition being around lunch time and considerably later than the weekday morning peak hours.\n\n\n\n\n\n\n\nCode\nwke_evening_ehsa &lt;- emerging_hotspot_analysis(\n  x = weekend_evening_cube, \n  .var = \"TRIPS\", \n  k = 1, \n  nsim = 99\n)\n\n# Save out the model\nwrite_rds(wke_evening_ehsa, \"data/rds/wke_evening_ehsa.rds\")\n\n\n\n\nCode\n# Visualise the distribution of classes\nv4 &lt;- ggplot(data = wke_evening_ehsa,\n             aes(x = classification)) +\n  geom_bar() + \n  theme(axis.text = element_text(size = 6))\n\nggplotly(v4)\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nMore than half of the hexagon grids had no pattern detected - likely due to the large number of 0s in the data frame. The next largest class of hexagon grids are “sporadic cold spots”, which refers to locations that are on-again then off-again cold spots.\n\n\n\nChoropleth Map for Weekend/PH Evening\nThe following choropleth map is charted at an alpha value of 0.1 (CI 90%). - Based on the Mann-Kendall Test performed earlier, there are no areas with a significant trend observed at alpha value of 0.05 (CI 95%).\n\n\nCode\nwke_evening_ehsa_grid &lt;- hex_grid %&gt;%\n  left_join(wke_evening_ehsa,\n            by = c(\"index\" = \"location\"))\n\n# Plot the choropleth map for significant values\nevening_ehsa_sig &lt;- wke_evening_ehsa_grid  %&gt;%\n  # alpha value set at 0.1 based on Mann-Kendall Test performed earlier\n  filter(p_value &lt; 0.1) \n\ntm_shape(evening_ehsa_sig) +\n  tm_fill(\"classification\", palette = my_palette) + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBased on the map, there are clusters of hot spots in several areas of Singapore during weekend/PH evening peak hours. However, not all grids identified earlier as high commuting flow regions are also hot spot areas. Most of the clusters are found in the housing estates and around Woodlands Checkpoint. The Downtown area, while still a high commuting flow region, is no longer a hot spot area by evening time."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/entertn.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/entertn.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/FinServ.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/FinServ.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/data/geospatial/MPSZ-2019.html",
    "href": "Take_Home_Exercise/Ex2/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "",
    "text": "Traditionally, commuter surveys are used by transport operators and urban managers to uncover insights related to urban mobility challenges. However, commuter surveys are costly, time-consuming and often yield outdated information due to their extended completion timelines. As urban infrastructures become increasingly digitized e.g. with widespread adoption of GPS in vehicles and transport cards, digital data sets offer a framework for tracking movement patterns over space and time, promising a new way to understand commuter behavior.\nDespite increasing amounts of open data available, there has not been significant practice research carried out to show how these disparate data sources can be integrated, analysed, and modelled to support policy making decisions. There is also a general lack of practical research to show how geospatial data science and analysis (GDSA) can be used to support decision-making.\nThis study aims to demonstrate the potential value of GDSA to integrate publicly available data from multiple sources. Specifically, it seeks to build spatial interaction models to determine factors affecting urban mobility patterns of public bus commuter flows."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#geospatial-data-science",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#geospatial-data-science",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Geospatial Data Science",
    "text": "Geospatial Data Science\n\nDerive an analytical hexagon data of 375m (this distance is the perpendicular distance between the hexagon centre and its edges) to represent the Traffic Analysis Zone (TAZ).\nConstruct an Origin-Destination (O-D) matrix of commuter flows at the analytics hexagon level for Weekdays Morning Peak: 6am-9am (inclusive) by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from LTA DataMall.\nDisplay the O-D flows of the passenger trips by using appropriate geovisualisation methods (not more than 5 maps).\nDescribe the spatial patterns revealed by the geovisualisation (not more than 100 words per visual).\nAssemble at least three propulsive and three attractiveness variables by using aspatial and geospatial data from publicly available sources.\nCompute a distance matrix by using the analytical hexagon data derived earlier."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#spatial-interaction-modelling",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#spatial-interaction-modelling",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Spatial Interaction Modelling",
    "text": "Spatial Interaction Modelling\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows at the selected time interval.\nPresent the modelling results by using appropriate geovisualisation and graphical visualisation method (not more than 5 visuals).\nWith reference to the Spatial Interaction Model output tables, maps and data visualisation prepared, describe the modelling results (not more than 100 words per visual)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#import-geospatial-data-mpsz",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#import-geospatial-data-mpsz",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Import Geospatial data: MPSZ",
    "text": "Import Geospatial data: MPSZ\nst_read() function of sf package is used to import MPSZ-2019 shapefile into R as a simple feature data frame called mpsz. As MPSZ-2019 uses svy21 projected coordinate system, the crs argument is set to 3414.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#create-spatial-grids",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#create-spatial-grids",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Create Spatial Grids",
    "text": "Create Spatial Grids\nFor this study, a hexagon layer of 375m (where 375m is the perpendicular distance between the hexagon centre and its edges) will be created to represent the TAZ.\nIn the code chunk below, st_make_grid() of sf package is used to create the hexagon grid TAZ using the svy21 projected coordinate system. The cellsize argument refers to the cell size in the units that the crs of the spatial data is using and can be defined as the distance between opposite edges. Since the data is set in svy21 projected coordinate system, which uses metres as the unit, the value is set as c(750,750) to create a hexagon layer of 375m. The resulting data frame is then converted into a sf data frame and an index is added for each hexagon grid.\nHowever, this hexagon layer created covers the entire plot area, including non-land areas. As this study is only interested in the land areas of Singapore, the mpsz sf data frame is also used to create a border of the land areas. This border is then used to clip the hexagon grid layer using st_intersection() of sf package, resulting in the output hex_grid_bounded sf data frame.\n\n\nCode\n# Create hexagon grid layer\nhex_grid &lt;- st_make_grid(mpsz, cellsize = c(750, 750), \n                         crs = 3413, what = \"polygons\", square = FALSE) %&gt;%\n  st_sf() %&gt;%\n  # Apply as.factor() since index will be used as the identifier to link to other data sets\n  mutate(index = as.factor(row_number()))\n\n# Create border of Singapore's land area\nmpsz_border &lt;- mpsz %&gt;%\n  summarise()\n\n# Clip the hexagon grid layer\nhex_grid_bounded &lt;- st_intersection(hex_grid, mpsz_border)\n\n\nTo ensure that the hex_grid_bounded sf data frame is created correctly, it will be plotted on a map for visual inspection using tmap functions such as tm_shape() and tm_polygons().\n\n\nCode\ntmap_mode(\"plot\")\n\ntm_shape(hex_grid_bounded) +\n  tm_polygons()\n\n\n\n\n\n\nWhile the map above shows the TAZ for the land areas correctly, some zones are cut off by the borders and hence, incomplete. This should be rectified such that all zones have a complete hexagon shape.\n\nThe code chunk below checks if the hex_grid sf data frame intersects any polygons in the hex_grid_bounded sf data frame using st_intersects(). The grid index of these intersecting hexagons are then retrieved and filtered out from the hex_grid sf data frame to create a new hex_grid_bounded2 sf data frame.\n\n\nCode\n# Check if hex grid intersects any polygons using st_intersects\n# Returns a list of intersecting hexagons\nintersection_list = hex_grid$index[lengths(st_intersects(hex_grid, hex_grid_bounded)) &gt; 0]\n\n# Filter for the intersecting hexagons\nhex_grid_bounded2 = hex_grid %&gt;%\n  filter(index %in% intersection_list)\n\n\nTo ensure that the hex_grid_bounded2 sf data frame is created correctly, it will be plotted on a map for visual inspection using tmap functions.\n\n\nCode\ntm_shape(hex_grid_bounded2) +\n  tm_polygons()\n\n\n\n\n\nThe map above now shows the complete analytical hexagon data of 375m (perpendicular distance between the centre of hexagon and its edges) that represents the TAZ.\n\nAs not all TAZ have bus stops, the map could be further refined to reflect the Bus Stop Density within each TAZ."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#import-geospatial-data-bus-stop-locations",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#import-geospatial-data-bus-stop-locations",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Import Geospatial Data: Bus Stop Locations",
    "text": "Import Geospatial Data: Bus Stop Locations\nThe code chunk below uses the st_read() function of sf package to import BusStop shapefile into R as a simple feature data frame called BusStop. As BusStop uses svy21 projected coordinate system, the crs argument is set to 3414.\n\nBusStop &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"BusStop\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n# Examine the structure of the data frame\nstr(BusStop)\n\nClasses 'sf' and 'data.frame':  5161 obs. of  4 variables:\n $ BUS_STOP_N: chr  \"22069\" \"32071\" \"44331\" \"96081\" ...\n $ BUS_ROOF_N: chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC  : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ geometry  :sfc_POINT of length 5161; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\"\n\n\nThere are a total of 5161 features in the BusStop shapefile. Notably, BUS_STOP_N is listed as a character variable. As this variable will be used as the identifier to link to the aspatial data, it should be transformed to a factor so that R treats it as a grouping variable.\n\n\nCode\n# Apply as.factor() to the column\nBusStop$BUS_STOP_N &lt;- as.factor(BusStop$BUS_STOP_N)\n\n# Re-examine the structure of the data frame\nstr(BusStop)\n\n\nClasses 'sf' and 'data.frame':  5161 obs. of  4 variables:\n $ BUS_STOP_N: Factor w/ 5145 levels \"01012\",\"01013\",..: 1008 1724 2118 4972 431 3787 1160 2941 1610 4983 ...\n $ BUS_ROOF_N: chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC  : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ geometry  :sfc_POINT of length 5161; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\"\n\n\nBased on the output above, BUS_STOP_N is now a factor of 5145 levels. However, there are a total of 5161 observations, suggesting the presence of duplicate records. The code chunk below generates a list of duplicated bus stop codes using group_by() and filter() functions of dplyr package and displays them using datatable() function of DT package.\n\n\nCode\nduplicate &lt;- BusStop %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  arrange(BUS_STOP_N, LOC_DESC)\n\nDT::datatable(duplicate)\n\n\n\n\n\n\n\nThe code chunk below uses the distinct() function of dplyr package to keep only the unique rows based on the BUS_STOP_N while preserving all other fields (through the argument .keep_all = TRUE). By default, distinct() keeps the first occurrence of each unique combination of values in the specified columns. Once duplicates are removed, the resultant sf data frame is re-examined for its structure.\n\n\nCode\nBusStop &lt;- BusStop %&gt;%\n  distinct(BUS_STOP_N, .keep_all = TRUE)\n\n# Re-examine the structure of the data frame\nstr(BusStop)\n\n\nClasses 'sf' and 'data.frame':  5145 obs. of  4 variables:\n $ BUS_STOP_N: Factor w/ 5145 levels \"01012\",\"01013\",..: 1008 1724 2118 4972 431 3787 1160 2941 1610 4983 ...\n $ BUS_ROOF_N: chr  \"B06\" \"B23\" \"B01\" \"B05\" ...\n $ LOC_DESC  : chr  \"OPP CEVA LOGISTICS\" \"AFT TRACK 13\" \"BLK 239\" \"GRACE INDEPENDENT CH\" ...\n $ geometry  :sfc_POINT of length 5145; first list element:  'XY' num  13576 32884\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"BUS_STOP_N\" \"BUS_ROOF_N\" \"LOC_DESC\"\n\n\nThere are now a total of 5145 observations, aligned with the number of factor levels."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#compute-bus-stop-density",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#compute-bus-stop-density",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Compute Bus Stop Density",
    "text": "Compute Bus Stop Density\nThe code chunk below uses st_intersects() of sf package to return lists of bus stops that lie inside each TAZ and lengths() to count the number of bus stops in each list. This is then appended back to hex_grid_bounded2 sf data frame in a new column called busstop_count.\n\n\nCode\nhex_grid_bounded2$busstop_count &lt;- lengths(st_intersects(hex_grid_bounded2, BusStop))\n\n\nThe map is then updated to fill by colour based on the bus stop density. This is the base map that will be used for future geovisualisation in this study.\n\n\nCode\ntm_shape(hex_grid_bounded2) +\n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"Bus Stop Density\") + \n  tm_borders(col = \"grey\")"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#import-passenger-volume-by-origin-destination-bus-stops",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#import-passenger-volume-by-origin-destination-bus-stops",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Import Passenger Volume by Origin-Destination Bus Stops",
    "text": "Import Passenger Volume by Origin-Destination Bus Stops\nThe code chunk below uses the read_csv() function of readr package (imported with the tidyverse package) to import the csv files into R and glimpse() is used to examine the data frame.\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\n# Examine the data frame\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nBased on the data frame structure seen above, ORIGIN_PT_CODE and DESTINATION_PT_CODE are listed as character variables. These variables are equivalent to BUS_STOP_N of BusStop sf data frame and should be transformed to factors so that R treats them as grouping variables.\n\n\nCode\n# Columns to convert to factors\ncolumns_to_convert &lt;- c(\"ORIGIN_PT_CODE\", \"DESTINATION_PT_CODE\")\n\n# Apply as.factor() to the adjusted columns\nodbus[columns_to_convert] &lt;- lapply(odbus[columns_to_convert], as.factor)\n\n# Re-examine the data frame\nglimpse(odbus)\n\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nBased on the output above, ORIGIN_PT_CODE and DESTINATION_PT_CODE are now factors."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#extract-commuting-flow-data",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#extract-commuting-flow-data",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Extract Commuting Flow data",
    "text": "Extract Commuting Flow data\nThe code chunk below extracts commuting flows for the target time period of Weekdays morning peak period (defined as between 6am to 9am (inclusive)).\n\n\nCode\n# Commute commuting flow for target time period\nod_wkday_morn &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;=9) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS)) %&gt;%\n  ungroup()\n\n\nThe extracted commuting flow data is displayed for inspection using head() function shown in the code chunk below.\n\n\nCode\nhead(od_wkday_morn, 10)\n\n\n# A tibble: 10 × 3\n   ORIGIN_PT_CODE DESTINATION_PT_CODE TRIPS\n   &lt;fct&gt;          &lt;fct&gt;               &lt;dbl&gt;\n 1 01012          01112                 276\n 2 01012          01113                 143\n 3 01012          01121                  66\n 4 01012          01211                 134\n 5 01012          01311                 256\n 6 01012          07371                  22\n 7 01012          60011                  26\n 8 01012          60021                  20\n 9 01012          60031                  21\n10 01012          60159                  26"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#geospatial-data-wrangling",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#geospatial-data-wrangling",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nThe extracted commuting flows above are in aspatial format and will need to be converted into geospatial data.\nThe code chunk below populates the hexagon grid index (i.e. index) of hex_grid_bounded2 sf data frame into BusStop sf data frame. st_intersection() is used to perform point and polygon overlay and the output will be in point sf object. select() of dplyr package is then use to retain only BUS_STOP_N and index in the BusStop_hex sf data frame.\n\n\nCode\n# Identify hexagon grid index for each bus stop\nBusStop_hex &lt;- st_intersection(BusStop, hex_grid_bounded2) %&gt;%\n  select(BUS_STOP_N, index) %&gt;%\n  st_drop_geometry()\n\nglimpse(BusStop_hex)\n\n\nRows: 5,140\nColumns: 2\n$ BUS_STOP_N &lt;fct&gt; 25059, 25751, 26379, 26299, 25761, 26399, 25719, 25711, 263…\n$ index      &lt;fct&gt; 118, 146, 174, 175, 200, 201, 201, 201, 201, 202, 202, 203,…\n\n\nFrom the print result above, there are now a total of 5140 observations. Five bus stops have been excluded in the resultant data frame as they are outside of Singapore’s boundary.\nNext, append the hexagon grid index from BusStop_hex data frame to od_wkday_morn data frame for both ORIGIN_PT_CODE and DESTINATION_PT_CODE fields.\n\n\nCode\n# Join hexagon grid index for ORIGIN_PT_CODE\nod_data &lt;- left_join(od_wkday_morn , BusStop_hex,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(\"ORIGIN_hex\" = \"index\")\n\n# Join hexagon grid index for DESTINATION_PT_CODE\nod_data &lt;- left_join(od_data , BusStop_hex,\n            by = c(\"DESTINATION_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(\"DESTIN_hex\" = \"index\") %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_hex, DESTIN_hex) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TRIPS))\n\n\nThe resultant data frame is checked for duplicates, if any.\n\n\nCode\nduplicate &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nDT::datatable(duplicate)\n\n\n\n\n\n\n\nThe output above shows that there are no duplicates in the data frame."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#remove-intra-zonal-flows",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#remove-intra-zonal-flows",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Remove intra-zonal flows",
    "text": "Remove intra-zonal flows\nThe code chunk below will be used to remove intra-zonal flows that will not be plotted.\n\n\nCode\nod_plot &lt;- od_data[od_data$ORIGIN_hex!=od_data$DESTIN_hex,]"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#create-desire-lines",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#create-desire-lines",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Create desire lines",
    "text": "Create desire lines\nIn this code chunk below, od2line() of stplanr package is used to create the desire lines.\n\n\nCode\nflowLine &lt;- od2line(flow = od_plot, \n                    zones = hex_grid_bounded2,\n                    zone_code = \"index\")"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualise-desire-lines",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualise-desire-lines",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Visualise desire lines",
    "text": "Visualise desire lines\nIn the code chunk below, tmap functions are used to visualise the resulting desire lines. To aid in a clearer and less cluttered visualization, only desire lines with at least 5000 trips are shown.\n\n\nCode\ntm_shape(hex_grid_bounded2) +\n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\",\n          title = \"Bus Stop Density\") +\n  tm_borders(col = \"grey\") +\nflowLine %&gt;%  \n  filter(TOTAL_TRIPS &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TOTAL_TRIPS\",\n           style = \"fixed\",\n           scale = c(1,2,3,4,5,7,9),\n           n = 6, \n           alpha = 0.7,\n           title.lwd = \"Total Trips\") + \n  tm_layout(main.title = \"Desire Lines with at least 5000 trips between Traffic Analysis Zones for Weekday Morning Peak Period\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE)\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nIt is possible to identify centroids where people are travelling to or from during weekday morning peak period. Most centroids are in residential areas (e.g. Tampines, Jurong East, Punggol), though some are in the Central region. Notably, there are several long-distance bus routes linking the East to the North, and the Central region to the North-Western part of Singapore. The most in-demand bus route on the map appears to be between Woodlands Checkpoint and Kranji, but neither TAZ has the highest bus stop count.\n\n\nIt is also possible to zoom in to individual regions of Singapore to observe commuting trends. In the code chunk below, a left join is performed for hex_grid_bounded2 and mpsz sf data frames using st_join() and the left = TRUE argument. When plotting the desire lines, a filter can now be applied on the REGION_N column to zoom in to a specific region of Singapore e.g. West region.\n\n\nCode\nhex_grid_mpsz &lt;- st_join(hex_grid_bounded2, mpsz, left = TRUE)\n\ntmap_mode(\"view\")\n\nhex_grid_mpsz %&gt;%\n  filter(REGION_N == \"WEST REGION\") %&gt;%  # Filter for West region\ntm_shape() +\n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\",\n          title = \"Bus Stop Density\",\n          popup.vars = c(\"SUBZONE_N\")) + \n  tm_view(set.zoom.limits = c(11,14)) + \n  tm_borders(col = \"grey\") +\nflowLine %&gt;%  \n  filter(TOTAL_TRIPS &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TOTAL_TRIPS\",\n           style = \"fixed\",\n           scale = c(1,2,3,4,5,7,9),\n           n = 6, \n           alpha = 0.7,\n           popup.vars = c(\"TOTAL_TRIPS\"))\n\n\n\n\n\n\n\nCode\ntmap_mode(\"plot\")\n\n\n\n\n\n\n\n\nInsights\n\n\n\nWhen zoomed into a specific region such as the West Region, it can be observed that bus stop density does not appear to directly correlate with the number of desire lines or the line thickness. For example, while hexagon grid index 772 has the highest bus stop density in the map above, its neighbouring grid 826 has more high volume flows that start from / end at that TAZ – of which, one of the high volume flows has as many as 89k trips being made per month.\nAs such, there is a need to further understand what drives such trends in commuting flows."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#population-density",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#population-density",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Population Density",
    "text": "Population Density\n\nImport Aspatial Data: HDB\nThe code chunk below uses read_csv() function of readr package to import the specially prepared hdb csv data. The output R object is a tibble data frame called hdb. glimpse() is used to examine the structure of the tibble data frame.\n\nhdb &lt;- read_csv(\"data/aspatial/hdb.csv\")\n\nglimpse(hdb)\n\nRows: 12,442\nColumns: 37\n$ ...1                  &lt;dbl&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14…\n$ blk_no                &lt;chr&gt; \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ street                &lt;chr&gt; \"BEACH RD\", \"BEDOK STH AVE 1\", \"CANTONMENT RD\", …\n$ max_floor_lvl         &lt;dbl&gt; 16, 14, 2, 15, 4, 25, 12, 14, 12, 2, 15, 15, 13,…\n$ year_completed        &lt;dbl&gt; 1970, 1975, 2010, 1982, 1975, 1982, 1975, 1977, …\n$ residential           &lt;chr&gt; \"Y\", \"Y\", \"N\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"N\"…\n$ commercial            &lt;chr&gt; \"Y\", \"N\", \"Y\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"Y\", \"Y\"…\n$ market_hawker         &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"…\n$ miscellaneous         &lt;chr&gt; \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"Y\", \"N\", \"N\"…\n$ multistorey_carpark   &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"…\n$ precinct_pavilion     &lt;chr&gt; \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"…\n$ bldg_contract_town    &lt;chr&gt; \"KWN\", \"BD\", \"CT\", \"BD\", \"PRC\", \"BM\", \"QT\", \"GL\"…\n$ total_dwelling_units  &lt;dbl&gt; 142, 206, 0, 102, 55, 96, 125, 247, 95, 0, 220, …\n$ `1room_sold`          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `2room_sold`          &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `3room_sold`          &lt;dbl&gt; 138, 204, 0, 0, 54, 0, 118, 0, 62, 0, 216, 214, …\n$ `4room_sold`          &lt;dbl&gt; 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `5room_sold`          &lt;dbl&gt; 2, 2, 0, 92, 1, 96, 7, 0, 33, 0, 4, 5, 0, 4, 0, …\n$ exec_sold             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ multigen_sold         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ studio_apartment_sold &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `1room_rental`        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0…\n$ `2room_rental`        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 247, 0, 0, 0, 0, 0, 0, 56, …\n$ `3room_rental`        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1,…\n$ other_room_rental     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0,…\n$ lat                   &lt;dbl&gt; 1.295097, 1.320852, 1.275488, 1.327969, 1.388610…\n$ lng                   &lt;dbl&gt; 103.8541, 103.9337, 103.8414, 103.9227, 103.9881…\n$ building              &lt;chr&gt; \"RAFFLES HOTEL\", \"NIL\", \"PINNACLE @ DUXTON\", \"PI…\n$ addr                  &lt;chr&gt; \"1 BEACH ROAD RAFFLES HOTEL SINGAPORE 189673\", \"…\n$ postal                &lt;chr&gt; \"189673\", \"460001\", \"080001\", \"461001\", \"500001\"…\n$ SUBZONE_NO            &lt;dbl&gt; 2, 6, 3, 3, 1, 9, 10, 5, 3, 5, 1, 5, 2, 2, 1, 7,…\n$ SUBZONE_N             &lt;chr&gt; \"CITY HALL\", \"BEDOK SOUTH\", \"CHINATOWN\", \"KEMBAN…\n$ SUBZONE_C             &lt;chr&gt; \"DTSZ02\", \"BDSZ06\", \"OTSZ03\", \"BDSZ03\", \"CHSZ01\"…\n$ PLN_AREA_N            &lt;chr&gt; \"DOWNTOWN CORE\", \"BEDOK\", \"OUTRAM\", \"BEDOK\", \"CH…\n$ PLN_AREA_C            &lt;chr&gt; \"DT\", \"BD\", \"OT\", \"BD\", \"CH\", \"BM\", \"QT\", \"GL\", …\n$ REGION_N              &lt;chr&gt; \"CENTRAL REGION\", \"EAST REGION\", \"CENTRAL REGION…\n$ REGION_C              &lt;chr&gt; \"CR\", \"ER\", \"CR\", \"ER\", \"ER\", \"CR\", \"CR\", \"CR\", …\n\n\nThe hdb tibble data frame consists of 12,442 rows and 37 columns. Each row of data shows one address (with postal code) and its corresponding number of dwelling units at that address. Based on the column names, there appears to be different building types i.e. “residential”, “commercial” , “market_hawker” and “miscellaneous”. For the purpose of computing a proxy for population density, filter() of dplyr package will be used to extract residential units.\n\n\nCode\nhdb_residential &lt;- hdb %&gt;%\n  filter(residential == \"Y\")\n\n# Examine the data\nhead(hdb_residential, 10)\n\n\n# A tibble: 10 × 37\n    ...1 blk_no street   max_f…¹ year_…² resid…³ comme…⁴ marke…⁵ misce…⁶ multi…⁷\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  \n 1     0 1      BEACH RD      16    1970 Y       Y       N       N       N      \n 2     1 1      BEDOK S…      14    1975 Y       N       N       Y       N      \n 3     3 1      CHAI CH…      15    1982 Y       N       N       N       N      \n 4     4 1      CHANGI …       4    1975 Y       Y       N       N       N      \n 5     5 1      DELTA A…      25    1982 Y       N       N       N       N      \n 6     6 1      DOVER RD      12    1975 Y       N       N       Y       N      \n 7     7 1      EUNOS C…      14    1977 Y       N       N       Y       N      \n 8     8 1      EVERTON…      12    1980 Y       Y       N       N       N      \n 9    10 1      GHIM MO…      15    1975 Y       N       N       Y       N      \n10    11 1      HAIG RD       15    1976 Y       N       N       Y       N      \n# … with 27 more variables: precinct_pavilion &lt;chr&gt;, bldg_contract_town &lt;chr&gt;,\n#   total_dwelling_units &lt;dbl&gt;, `1room_sold` &lt;dbl&gt;, `2room_sold` &lt;dbl&gt;,\n#   `3room_sold` &lt;dbl&gt;, `4room_sold` &lt;dbl&gt;, `5room_sold` &lt;dbl&gt;,\n#   exec_sold &lt;dbl&gt;, multigen_sold &lt;dbl&gt;, studio_apartment_sold &lt;dbl&gt;,\n#   `1room_rental` &lt;dbl&gt;, `2room_rental` &lt;dbl&gt;, `3room_rental` &lt;dbl&gt;,\n#   other_room_rental &lt;dbl&gt;, lat &lt;dbl&gt;, lng &lt;dbl&gt;, building &lt;chr&gt;, addr &lt;chr&gt;,\n#   postal &lt;chr&gt;, SUBZONE_NO &lt;dbl&gt;, SUBZONE_N &lt;chr&gt;, SUBZONE_C &lt;chr&gt;, …\n\n\nAmong the residential units, there appears to be some outliers such as Raffles Hotel being indicated as a residential dwelling. Given this, the data will be checked for buildings which contain a “hotel” in its name using the grepl() function.\n\n\nCode\nhotels &lt;- hdb_residential %&gt;%\n  filter(grepl(\"HOTEL\", building, ignore.case = TRUE))\n\nkable(hotels)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…1\nblk_no\nstreet\nmax_floor_lvl\nyear_completed\nresidential\ncommercial\nmarket_hawker\nmiscellaneous\nmultistorey_carpark\nprecinct_pavilion\nbldg_contract_town\ntotal_dwelling_units\n1room_sold\n2room_sold\n3room_sold\n4room_sold\n5room_sold\nexec_sold\nmultigen_sold\nstudio_apartment_sold\n1room_rental\n2room_rental\n3room_rental\nother_room_rental\nlat\nlng\nbuilding\naddr\npostal\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\n\n\n\n\n0\n1\nBEACH RD\n16\n1970\nY\nY\nN\nN\nN\nN\nKWN\n142\n0\n1\n138\n1\n2\n0\n0\n0\n0\n0\n0\n0\n1.295097\n103.8541\nRAFFLES HOTEL\n1 BEACH ROAD RAFFLES HOTEL SINGAPORE 189673\n189673\n2\nCITY HALL\nDTSZ02\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n\n\n4580\n3\nBEACH RD\n16\n1970\nY\nY\nN\nN\nN\nN\nKWN\n138\n0\n1\n134\n0\n3\n0\n0\n0\n0\n0\n0\n0\n1.294801\n103.8545\nRAFFLES HOTEL SINGAPORE\n3 BEACH ROAD RAFFLES HOTEL SINGAPORE SINGAPORE 189674\n189674\n2\nCITY HALL\nDTSZ02\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n\n\n\n\n\nThe output above shows two listings which appear to be hotels. Upon checking, there appears to be an error with the geocoding due to similarities in address names. “Block 1 Beach Road” is indeed a HDB block while Raffles Hotel has a similar address name of “1 Beach Road”. However, both of these addresses have different postal codes. This could be due to an issue with the geocoding process as the original data set did not provide postal codes, leading to a confusion when there are similar addresses.\nGiven that 1 Beach Rd and 2 Beach Rd faced issues with geocoding, the data will be filtered for other similar addresses to ensure the geocoding has been done correctly.\n\n\nCode\nbeach_rd &lt;- hdb_residential %&gt;%\n  filter(grepl(\"BEACH RD\", street, ignore.case = TRUE))\n\nkable(beach_rd)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…1\nblk_no\nstreet\nmax_floor_lvl\nyear_completed\nresidential\ncommercial\nmarket_hawker\nmiscellaneous\nmultistorey_carpark\nprecinct_pavilion\nbldg_contract_town\ntotal_dwelling_units\n1room_sold\n2room_sold\n3room_sold\n4room_sold\n5room_sold\nexec_sold\nmultigen_sold\nstudio_apartment_sold\n1room_rental\n2room_rental\n3room_rental\nother_room_rental\nlat\nlng\nbuilding\naddr\npostal\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\n\n\n\n\n0\n1\nBEACH RD\n16\n1970\nY\nY\nN\nN\nN\nN\nKWN\n142\n0\n1\n138\n1\n2\n0\n0\n0\n0\n0\n0\n0\n1.295097\n103.8541\nRAFFLES HOTEL\n1 BEACH ROAD RAFFLES HOTEL SINGAPORE 189673\n189673\n2\nCITY HALL\nDTSZ02\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n\n\n1660\n15\nBEACH RD\n20\n1974\nY\nY\nN\nN\nN\nN\nKWN\n76\n0\n0\n0\n76\n0\n0\n0\n0\n0\n0\n0\n0\n1.295796\n103.8555\nNIL\n15 BEACH ROAD\nNIL\n1\nBUGIS\nDTSZ01\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n\n\n2079\n17\nBEACH RD\n20\n1974\nY\nY\nN\nN\nN\nN\nKWN\n76\n0\n0\n0\n76\n0\n0\n0\n0\n0\n0\n0\n0\n1.303689\n103.8636\nGOLDEN BEACH VISTA\n17 BEACH ROAD GOLDEN BEACH VISTA SINGAPORE 190017\n190017\n9\nCRAWFORD\nKLSZ09\nKALLANG\nKL\nCENTRAL REGION\nCR\n\n\n2567\n2\nBEACH RD\n16\n1970\nY\nY\nN\nN\nN\nN\nKWN\n139\n0\n1\n136\n0\n2\n0\n0\n0\n0\n0\n0\n0\n1.390462\n103.9753\nCHANGI BEACH CLUB\n2 ANDOVER ROAD CHANGI BEACH CLUB SINGAPORE 509984\n509984\n1\nCHANGI POINT\nCHSZ01\nCHANGI\nCH\nEAST REGION\nER\n\n\n4580\n3\nBEACH RD\n16\n1970\nY\nY\nN\nN\nN\nN\nKWN\n138\n0\n1\n134\n0\n3\n0\n0\n0\n0\n0\n0\n0\n1.294801\n103.8545\nRAFFLES HOTEL SINGAPORE\n3 BEACH ROAD RAFFLES HOTEL SINGAPORE SINGAPORE 189674\n189674\n2\nCITY HALL\nDTSZ02\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n\n\n6028\n4\nBEACH RD\n16\n1968\nY\nN\nN\nY\nN\nN\nKWN\n336\n0\n0\n0\n0\n0\n0\n0\n0\n336\n0\n0\n0\n1.304716\n103.8652\nNIL\n4 BEACH ROAD SINGAPORE 190004\n190004\n9\nCRAWFORD\nKLSZ09\nKALLANG\nKL\nCENTRAL REGION\nCR\n\n\n7743\n5\nBEACH RD\n16\n1968\nY\nN\nN\nY\nN\nN\nKWN\n336\n0\n0\n0\n0\n0\n0\n0\n0\n336\n0\n0\n0\n1.298092\n103.8569\nBEACH ROAD CONSERVATION AREA\n5 TAN QUEE LAN STREET BEACH ROAD CONSERVATION AREA SINGAPORE 188094\n188094\n1\nBUGIS\nDTSZ01\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n\n\n8956\n6\nBEACH RD\n16\n1968\nY\nY\nN\nN\nN\nN\nKWN\n198\n0\n45\n1\n28\n0\n0\n0\n0\n57\n67\n0\n0\n1.303992\n103.8644\nBEACH ROAD GARDENS\n6 BEACH ROAD BEACH ROAD GARDENS SINGAPORE 190006\n190006\n9\nCRAWFORD\nKLSZ09\nKALLANG\nKL\nCENTRAL REGION\nCR\n\n\n\n\n\nAccording to postal code conventions, the postal codes for these HDB dwellings should be in the format of 1900XX, where XX is replaced by the block number. However, apart from 1 and 3 Beach Road identified earlier, 2, 5 and 15 Beach Road also do not have the correct postal codes, which suggests that the coordinates for these addresses are inaccurate.\nThe data will be modified using the mutate() and ifelse() functions of dplyr package. The correct coordinates values will be searched for using the OneMap service. The final output is then saved out as a new tibble data frame hdb_residential2.\n\n\nCode\nhdb_residential2 &lt;- hdb_residential %&gt;%\n  mutate(postal = ifelse(blk_no == 1 & street == \"BEACH RD\", 190001, postal)) %&gt;%\n  mutate(lat = ifelse(blk_no == 1 & street == \"BEACH RD\", 1.3036714, lat)) %&gt;%\n  mutate(lng = ifelse(blk_no == 1 & street == \"BEACH RD\", 103.8644787, lng)) %&gt;%\n  mutate(postal = ifelse(blk_no == 2 & street == \"BEACH RD\", 190002, postal)) %&gt;%\n  mutate(lat = ifelse(blk_no == 2 & street == \"BEACH RD\", 1.3040331, lat)) %&gt;%\n  mutate(lng = ifelse(blk_no == 2 & street == \"BEACH RD\", 103.8649285, lng)) %&gt;%\n  mutate(postal = ifelse(blk_no == 3 & street == \"BEACH RD\", 190003, postal)) %&gt;%\n  mutate(lat = ifelse(blk_no == 3 & street == \"BEACH RD\", 1.3041872, lat)) %&gt;%\n  mutate(lng = ifelse(blk_no == 3 & street == \"BEACH RD\", 103.8651934, lng)) %&gt;%\n  mutate(postal = ifelse(blk_no == 5 & street == \"BEACH RD\", 190005, postal)) %&gt;%\n  mutate(lat = ifelse(blk_no == 5 & street == \"BEACH RD\", 1.3043463, lat)) %&gt;%\n  mutate(lng = ifelse(blk_no == 5 & street == \"BEACH RD\", 103.8648158, lng)) %&gt;%\n  mutate(postal = ifelse(blk_no == 15 & street == \"BEACH RD\", 190015, postal)) %&gt;%\n  mutate(lat = ifelse(blk_no == 15 & street == \"BEACH RD\", 1.3034254, lat)) %&gt;%\n  mutate(lng = ifelse(blk_no == 15 & street == \"BEACH RD\", 103.8631535, lng))\n\n\nThe resultant data frame is checked for duplicates, if any.\n\n\nCode\nduplicate &lt;- hdb_residential2 %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nDT::datatable(duplicate)\n\n\n\n\n\n\n\nThe output above shows that there are no duplicate rows in the data set.\n\n\nConvert Aspatial data to Geospatial data\nTo convert the aspatial data to geospatial data, the latitude (lat) and longitude (lng) columns will be used. These columns are in decimal degree format, indicating that the data is in wgs84 geographic coordinate system.\nThe code chunk below converts hdb_residential2 data frame into a sf data frame using st_as_sf() of sf package. The coords argument requires the column name of the x-coordinates first followed by the column name of the y-coordinates. Lastly, as the resultant data frame has many columns, only the required columns will be selected using select() function of dplyr package.\n\n\nCode\nhdb_residential_sf &lt;- st_as_sf(hdb_residential2, \n                   coords = c(\"lng\", \"lat\"),\n                   crs=4326) %&gt;%\n  st_transform(crs = 3414) %&gt;%\n  select(postal, total_dwelling_units, geometry)\n\n# Examine the structure of the data frame\nstr(hdb_residential_sf)\n\n\nsf [10,181 × 3] (S3: sf/tbl_df/tbl/data.frame)\n $ postal              : chr [1:10181] \"190001\" \"460001\" \"461001\" \"500001\" ...\n $ total_dwelling_units: num [1:10181] 142 206 102 55 96 125 247 95 220 219 ...\n $ geometry            :sfc_POINT of length 10181; first list element:  'XY' num [1:2] 31468 31779\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA\n  ..- attr(*, \"names\")= chr [1:2] \"postal\" \"total_dwelling_units\"\n\n\nThe table above shows the structure of hdb_residential_sf. A new column called geometry has been added into the data frame while the lng and lat columns have been dropped. To ensure that the hdb_residential_sf sf data frame is projected and converted correctly, it will be plotted on a map for visual inspection.\n\n\nCode\n# boundary map\ntm_shape(hex_grid_bounded2) +\n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\",\n          title = \"Bus Stop Density\") +\n  tm_borders(col = \"grey\") +\n# plot housing locations\ntm_shape(hdb_residential_sf) +\n  tm_dots() + \n  tm_layout(main.title = \"Location of HDB Residential Units\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE)\n\n\n\n\n\n\nAll the HDB Residential Units are encompassed in TAZ with bus stops, which aligns with the urban planning for Singapore where all HDB estates would have access to public transportation.\n\n\n\nPerforming in-polygon count\nIn the code chunk below, st_join() and st_intersects() is used to join hex_grid_bounded2 and hdb_residential_sf. The left = TRUE argument ensures that all elements from the hex_grid_bounded2 are retained in the result. Once the hexagon grid indexes are obtained for each point feature, the geometry can be dropped using st_drop_geometry(). group_by() function of dplyr package is then used to group the data by hexagon grid index before adding up the total count of dwelling units within each TAZ. Lastly, is.na() is used to check for missing counts and replaces them with 0 using the mutate() and ifelse() functions, ensuring a clean data set without missing values for further analysis and visualization.\n\n\nCode\nhousing_count &lt;- st_join(hex_grid_bounded2, hdb_residential_sf, \n                     join = st_intersects, left = TRUE) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(index) %&gt;%\n  summarise(housing_count = sum(total_dwelling_units)) %&gt;%\n  ungroup() %&gt;%\n  mutate(housing_count = ifelse(is.na(housing_count), 0, housing_count))\n\n\nA new hex_grid_bounded3 sf data frame is created using left_join() on hex_grid_bounded2 and housing_count. A summary of this new column is generated using summary().\n\n\nCode\nhex_grid_bounded3 &lt;- left_join(hex_grid_bounded2, housing_count,\n                               by = c(\"index\" = \"index\"))\n\nsummary(hex_grid_bounded3$housing_count)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     0.0     0.0   560.8     0.0  8324.0 \n\n\nThe new variable is also plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) +\n  tm_fill(col = \"housing_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"Housing Density\") + \n  tm_borders(col = \"grey\")\n\n\n\n\n\n\nBased on the summary stats and the choropleth map above, it can be observed that there is a large number of zero values in the field housing_count. If log() is going to be used to transform this field, an additional step is required to ensure that all zero values are replaced with a negligible offset that is between the values of 0 and 1 (but not either value)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#employment-opportunities-density",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#employment-opportunities-density",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Employment Opportunities Density",
    "text": "Employment Opportunities Density\n\nImport Geospatial data: Business\nThe code chunk below uses the st_read() function of sf package to import the specially prepared Business shapefile into R as a simple feature data frame called biz. As Business uses svy21 projected coordinate system, the crs argument is set to 3414.\n\n\nCode\nbiz &lt;- st_read(dsn = \"data/geospatial\", layer = \"Business\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `Business' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nTo ensure that the biz sf data frame is projected and converted correctly, it will be plotted on a map for visual inspection.\n\n\nCode\n# boundary map\ntm_shape(hex_grid_bounded3) +\n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\",\n          title = \"Bus Stop Density\") +\n  tm_borders(col = \"grey\") +\n# plot biz locations\ntm_shape(biz) +\n  tm_dots() + \n  tm_layout(main.title = \"Location of Businesses\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE)\n\n\n\n\n\n\nThe locations of businesses appear to be most densely concentrated in the central and west regions, which aligns with known business zones i.e. CBD and Jurong Industrial Area.\n\n\n\nPerform point-in-polygon count\nThe code chunk below uses st_intersects() to return a list of businesses that lie inside each TAZ and lengths() to count the number of businesses in each list. This is then appended to the hex_grid_bounded3 sf data frame in a new column called biz_count and a summary of this new column is generated.\n\n\nCode\nhex_grid_bounded3$biz_count &lt;- lengths(st_intersects(hex_grid_bounded3, biz))\n\nsummary(hex_grid_bounded3$biz_count)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   3.368   1.000 126.000 \n\n\nThe new variable is also plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) +\n  tm_fill(col = \"biz_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"Business Density\") + \n  tm_borders(col = \"grey\")\n\n\n\n\n\n\nBased on the summary stats and the choropleth map above, it can be observed that the distribution of biz_count is extremely skewed with a large number of zero values. If log() is going to be used to transform this field, an additional step is required to ensure that all zero values are replaced with a negligible offset that is between the values of 0 and 1 (but not either value)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#schools-density",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#schools-density",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Schools Density",
    "text": "Schools Density\n\nGeocode Aspatial data: Schools\nAddress geocoding is the process of taking an aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth’s surface.\nSingapore Land Authority (SLA) supports an online geocoding service called OneMap API. Within which, the Search API service can be used to look up the address data or 6-digit postal code for an entered value, and returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below will perform geocoding using SLA OneMap API. The input data Generalinformationofschools is given in csv file format and read into R Studio environment using read_csv() function of readr package. A collection of http call functions of httr package of R will then be used to pass the individual records to the geocoding server at OneMap.\nAfter completion of the geocoding process, two tibble data frames will be created: found and not_found. found contains all records that are geocoded correctly and not_found contains records that fail to be geocoded. The found data table will then be joined with the initial csv data table by using a unique identifier (i.e. postal code) common to both data tables and saved out as a csv file called schools.\n\n\nCode\nurl &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv &lt;- read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes &lt;- csv$postal_code\n\nfound &lt;- data.frame()\nnot_found &lt;- data.frame()\n\nfor (postcode in postcodes) {\n  query &lt;- list('searchVal'=postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum'='1')\n  res &lt;- GET(url, query=query)\n  \n  if ((content(res)$found)!=0){\n    found &lt;- rbind(found, data.frame(content(res))[4:13])\n  } else {\n    not_found = data.frame(postcode)\n  }\n}\n\nmerged &lt;- merge(csv, found, by.x = \"postal_code\", by.y = \"results.POSTAL\", all = T)\n\nwrite_csv(merged, \"data/aspatial/schools.csv\")\nwrite_csv(not_found, \"data/aspatial/not_found.csv\")\n\n\nNext, the csv file for the school(s) where the geocoding could not be completed is manually updated outside of the R environment before it is reloaded as a schools tibble data frame. A pipe operation is done to rename the coordinates columns and select only required columns.\n\n\nCode\nschools &lt;- read_csv(\"data/aspatial/schools.csv\")\n\nschools &lt;- schools %&gt;%\n  rename(\"latitude\" = \"results.LATITUDE\",\n         \"longitude\" = \"results.LONGITUDE\") %&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\n\n\n\nConversion of Aspatial data to Geospatial data\nNext, convert the aspatial data frame into a sf tibble data frame called schools_sf using st_as_sf() of sf package. The data frame is then converted into the svy21 projected coordinate system. The coordinates in the coords argument are specified in the order of longitude followed by latitude.\n\n\nCode\nschools_sf &lt;- st_as_sf(schools, coords = c(\"longitude\", \"latitude\"), \n                       crs = st_crs(4326)) %&gt;%\n  st_transform(crs = 3414)\n\n\nTo ensure that the schools_sf data frame is projected and converted correctly, it will be plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) + \n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\",\n          title = \"Bus Stop Density\") +\n  tm_borders(col = \"grey\") +\ntm_shape(schools_sf) + \n  tm_dots() + \n  tm_layout(main.title = \"Location of Schools\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE)\n\n\n\n\n\n\nAll schools plotted are either encompassed in TAZ with bus stops, or are at the edge of a neighbouring TAZ, which aligns with the urban planning for Singapore where all schools are in close proximity to a bus stop.\n\n\n\nPerform point-in-polygon count\nThe code chunk below uses st_intersects() to return a list of schools that lie inside each TAZ and lengths() to count the number of schools in each list. This is then appended back to hex_grid_bounded3 sf data frame in a new column called school_count. Lastly, a summary of this new column is generated.\n\n\nCode\nhex_grid_bounded3$school_count &lt;- lengths(st_intersects(hex_grid_bounded3, schools_sf))\n\nsummary(hex_grid_bounded3$school_count)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1799  0.0000  5.0000 \n\n\nThe new column is also plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) +\n  tm_fill(col = \"school_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"School Density\") + \n  tm_borders(col = \"grey\")\n\n\n\n\n\n\nBased on the summary stats and the choropleth map above, it can be observed that there is a large number of zero values in the field school_count. If log() is going to be used to transform this field, an additional step is required to ensure that all zero values are replaced with a negligible offset that is between the values of 0 and 1 (but not either value)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#financial-services-density",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#financial-services-density",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Financial Services Density",
    "text": "Financial Services Density\n\nImport Geospatial data: Train Stations\nThe code chunk below uses the st_read() function of sf package to import FinServ shapefile into R as a simple feature data frame called FinServ. As FinServ uses svy21 projected coordinate system, the crs argument is set to 3414.\n\n\nCode\nFinServ &lt;- st_read(dsn = \"data/geospatial\", layer = \"FinServ\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `FinServ' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\n\nThe FinServ sf data frame will now be plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) + \n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\",\n          title = \"Bus Stop Density\") +\n  tm_borders(col = \"grey\") +\ntm_shape(FinServ) + \n  tm_dots() + \n  tm_layout(main.title = \"Location of Financial Services\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE)\n\n\n\n\n\n\nThe location of most financial services overlaps with TAZ with bus stops, though there are several financial services in the south region that are not served by bus stops.\n\n\n\nPerform point-in-polygon count\nThe code chunk below uses st_intersects() to return a list of financial service centres that lie inside each TAZ and lengths() to count the number of financial service centres in each list. This is then appended back to hex_grid_bounded3 sf data frame in a new column called fin_count. Lastly, a summary of this new column is generated.\n\n\nCode\nhex_grid_bounded3$fin_count &lt;- lengths(st_intersects(hex_grid_bounded3, FinServ))\n\nsummary(hex_grid_bounded3$fin_count)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.707   0.000 176.000 \n\n\nThe new column is also plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) +\n  tm_fill(col = \"fin_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"Financial Services Density\") + \n  tm_borders(col = \"grey\")\n\n\n\n\n\n\nBased on the summary stats and the choropleth map above, the distribution of fin_count is extremely skewed with a large number of zero values. If log() is going to be used to transform this field, an additional step is required to ensure that all zero values are replaced with a negligible offset that is between the values of 0 and 1 (but not either value)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#public-transportation-density",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#public-transportation-density",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Public Transportation Density",
    "text": "Public Transportation Density\nBus stop counts has previously been computed. Another critical component of Singapore’s public transportation is the MRT / LRT system.\n\nImport Geospatial data: Train Stations\nThe code chunk below uses the st_read() function of sf package to import RapidTransitSystemStation shapefile into R as a simple feature data frame called mrt_lrt. As RapidTransitSystemStation uses svy21 projected coordinate system, the crs argument is set to 3414.\n\n\nCode\nmrt_lrt &lt;- st_read(dsn = \"data/geospatial\", layer = \"RapidTransitSystemStation\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `RapidTransitSystemStation' from data source \n  `C:\\magdalenecjw\\ISSS624 Geospatial\\Take_Home_Exercise\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\n\n\nWarning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, :\nGDAL Message 1: Non closed ring detected. To avoid accepting it, set the\nOGR_GEOMETRY_ACCEPT_UNCLOSED_RING configuration option to NO\n\n\nSimple feature collection with 220 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n\n\nIn the output above, there is a warning that a non closed ring is detected in the geometry of the sf data frame. The code chunk below uses st_is_valid() to check for the error.\n\n\nCode\nst_is_valid(mrt_lrt)\n\n\n  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [61]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [97]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[145]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[157]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE\n[169]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[181]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[193]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[205]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[217]  TRUE FALSE  TRUE  TRUE\n\n\nFrom the output above, it can be observed that there are two types of issues:\n\nThere are two invalid geometries (i.e. FALSE outcomes).\nThere is one geometry with an NA outcome.\n\nThe specific stations can be identified and addressed using the following code chunks.\n\nInvalid geometriesNA geometries\n\n\n\n\nCode\n# Identify problematic geometries\nproblematic_geoms &lt;- mrt_lrt[which(!st_is_valid(mrt_lrt)), ]\n\nkable(problematic_geoms)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTYP_CD\nSTN_NAM\nTYP_CD_DES\nSTN_NAM_DE\ngeometry\n\n\n\n\n159\n0\nNA\nMRT\nHARBOURFRONT MRT STATION\nPOLYGON ((26736.44 27495.44…\n\n\n218\n0\nNA\nMRT\nUPPER THOMSON MRT STATION\nPOLYGON ((27808.12 37518.2,…\n\n\n\n\n\nBased on the output above, the invalid geometries are for Harbourfront MRT Station and Upper Thomson MRT Station. These two invalid geometries will be fixed using the st_make_valid() function from the sf package.\n\n\n\n\nCode\n# Identify NA geometries\nna_geoms &lt;- mrt_lrt[is.na(st_is_valid(mrt_lrt)), ]\n\nkable(na_geoms)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTYP_CD\nSTN_NAM\nTYP_CD_DES\nSTN_NAM_DE\ngeometry\n\n\n\n\n163\n0\nNA\nMRT\nBOCC\nPOLYGON ((42614.11 35130.09…\n\n\n\n\n\nBased on the output above, the NA geometry is for BOCC, which refers to the Bus Operations Control Centre. Given that this is not a public transportation node that is accessible to the general public, this feature will be dropped from the final mrt_lrt sf data frame.\n\n\n\nThe code chunk below fixes the mrt_lrt data frame by first filtering out the 163th feature, which corresponds to the BOCC station with the NA geometry, then applying st_make_valid() to resolve the two invalid geometries. The geometries are verified again after fixing.\n\n\nCode\nmrt_lrt_fixed &lt;- mrt_lrt[-163, ] %&gt;%\n  st_make_valid()\n\n# Verify that the geometries are valid after fixing\nst_is_valid(mrt_lrt_fixed)\n\n\n  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[121] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[136] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[151] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[166] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[181] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[196] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[211] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n\nThe output above now shows that all the geometries are valid. The mrt_lrt_fixed sf data frame will now be plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) + \n  tm_fill(col = \"busstop_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"Bus Stop Density\") +\n  tm_borders(col = \"grey\") +\ntm_shape(mrt_lrt_fixed) + \n  tm_polygons(col = \"brown\") + \n  tm_layout(main.title = \"Location of MRT / LRT Stations\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE)\n\n\n\n\n\n\nMost MRT / LRT Stations are in a TAZ that contains at least one bus stop. However, some MRT / LRT Stations appear to cut across multiple TAZ.\n\n\n\nPerform point-in-polygon count\nAs the geometries for the MRT / LRT stations are polygons that may cut across multiple TAZ, there is a need to convert them into points before Perform point-in-polygon count. A simple way could be to use st_centroid() to get the centroid of each polygon. Using centroids requires fewer computational resources than computing based on all points along polygon edges, especially with complex polygons featuring many vertices. Additionally, centroids act as singular points summarizing the entire shape, providing a simplified representation in contrast to edges.\n\n\nCode\nmrt_lrt_points &lt;- st_centroid(mrt_lrt_fixed)\n\n\nThe code chunk below then uses st_intersects() to return a list of MRT / LRT stations that lie inside each TAZ and lengths() to count the number of stations in each list. This is then appended back to hex_grid_bounded2 sf data frame in a new column called mrtlrt_count. Lastly, a summary of this new column is generated.\n\n\nCode\nhex_grid_bounded3$mrtlrt_count &lt;- lengths(st_intersects(hex_grid_bounded3, mrt_lrt_points))\n\nsummary(hex_grid_bounded3$mrtlrt_count)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.0000  0.1126  0.0000  4.0000 \n\n\nThe new column is also plotted on a map for visual inspection.\n\n\nCode\ntm_shape(hex_grid_bounded3) +\n  tm_fill(col = \"mrtlrt_count\",\n          palette = \"Blues\",\n          style = \"cont\", \n          title = \"MRT/LRT Station Count\") + \n  tm_borders(col = \"grey\")\n\n\n\n\n\n\nBased on the summary stats and the choropleth map above, it can be observed that there is a large number of zero values in the field mrtlrt_count. If log() is going to be used to transform this field, an additional step is required to ensure that all zero values are replaced with a negligible offset that is between the values of 0 and 1 (but not either value)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#assemble-the-variables",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#assemble-the-variables",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Assemble the variables",
    "text": "Assemble the variables\nThe propulsive and attractiveness variables will be compiled into a tibble data frame called propulsive to be used for the Spatial Interaction Model later. A prefix of “o_” will be added to the column names to identify them as origin variables.\n\n\nCode\npropulsive &lt;- hex_grid_bounded3 %&gt;%\n  st_drop_geometry() %&gt;%\n  select(index, housing_count, biz_count, \n         school_count, busstop_count, mrtlrt_count)\n  \n\norigin &lt;- names(propulsive) %&gt;%\n  modify_at(-1, ~ paste0(\"o_\", .))  # Add prefix to all except index\n\n# Assign modified names back to the data frame\nnames(propulsive) &lt;- origin"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-destination-variables",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-destination-variables",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare destination variables",
    "text": "Prepare destination variables\nThe attractiveness variables will be compiled into a tibble data frame called attractiveness to be used for the Spatial Interaction Model later. A prefix of “d_” will be added to the column names to identify them as origin variables.\n\n\nCode\nattractiveness &lt;- hex_grid_bounded3 %&gt;%\n  st_drop_geometry() %&gt;%\n  select(index, biz_count, school_count, \n         fin_count, busstop_count, mrtlrt_count)\n\ndestin &lt;- names(attractiveness) %&gt;%\n  modify_at(-1, ~ paste0(\"d_\", .))  # Add prefix to all except index\n\n# Assign modified names back to the data frame\nnames(attractiveness) &lt;- destin"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#separating-intra-flow-from-passenger-volume",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#separating-intra-flow-from-passenger-volume",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Separating intra-flow from passenger volume",
    "text": "Separating intra-flow from passenger volume\nThe code chunk below is used to add three new fields into the od_data dataframe.\nFirstly, a new column FlowNoIntra is created to differentiate intra-zone trips from inter-zone trips based on the comparison of origin and destination zones. The ifelse() function is used to check if the values in columns ORIGIN_hex and DESTIN_hex are equal; if so, it is an indication that such trips start and end in the same zone, hence, the FlowNoIntra column is set to a value of 0. Otherwise, it holds the value from the TOTAL_TRIPS column.\nNext, an offset column is created using another ifelse() statement where for intra-zone trips, the offset column is set to a negligible offset value of 0.000001. Otherwise, for inter-zone trips, it is set to 1.\n\n\nCode\nod_data$FlowNoIntra &lt;- ifelse(\n  od_data$ORIGIN_hex == od_data$DESTIN_hex, 0, od_data$TOTAL_TRIPS)\nod_data$offset &lt;- ifelse(\n  od_data$ORIGIN_hex == od_data$DESTIN_hex, 0.000001, 1)\n\n\nNext, inter-zonal flow will be selected from od_data and save into a new output data.frame called inter_zonal_flow by using the code chunk below.\n\n\nCode\nod_data &lt;- od_data %&gt;%\n  filter(FlowNoIntra &gt; 0)"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#combining-passenger-volume-data-with-distance-value",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#combining-passenger-volume-data-with-distance-value",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Combining passenger volume data with distance value",
    "text": "Combining passenger volume data with distance value\nBefore joining od_data and distPair, convert the data value type of ORIGIN_hex and DESTIN_hex fields of od_data dataframe into factor data type.\n\n\nCode\nod_data$ORIGIN_hex &lt;- as.factor(od_data$ORIGIN_hex)\nod_data$DESTIN_hex &lt;- as.factor(od_data$DESTIN_hex)\n\n\nNext, left_join() of dplyr will be used to join od_data data frame and distPair data frame to give an output called flow_data.\n\n\nCode\nflow_data &lt;- od_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_hex\" = \"orig\",\n                    \"DESTIN_hex\" = \"dest\"))"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-origin-attributes",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-origin-attributes",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare origin attributes",
    "text": "Prepare origin attributes\nNext, left_join() is used to join flow_data to the origin attributes prepared earlier (propulsive tibble data frame) using the hexagon grid index as a common identifier.\n\n\nCode\nflow_data &lt;- flow_data %&gt;%\n  left_join(propulsive, by = c(\"ORIGIN_hex\" = \"index\"))"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-destination-attributes",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-destination-attributes",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare destination attributes",
    "text": "Prepare destination attributes\nLastly, left_join() is used to join flow_data to the destination attributes prepared earlier (attractiveness tibble data frame) using the hexagon grid index as a common identifier.\n\n\nCode\nflow_data &lt;- flow_data %&gt;%\n  left_join(attractiveness, by = c(\"DESTIN_hex\" = \"index\"))"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualising-the-dependent-variable",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualising-the-dependent-variable",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Visualising the dependent variable",
    "text": "Visualising the dependent variable\nThe code chunk below plots the distribution of the dependent variable (i.e. TOTAL_TRIPS) as a histogram.\n\n\nCode\nggplot(data = flow_data,\n       aes(x = TOTAL_TRIPS)) +\n  geom_histogram() + \n  labs(title = \"Distribution of Trips across TAZ\",\n       x = \"Total Trips\",\n       y = \"Counts\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\nThe distribution shown is highly skewed and does not resemble a normal distribution (bell-shaped curve).\n\nThe code chunk below visualises the relationship between the dependent variable and a key independent variable (i.e. dist) of the SIM. Specifying the argument method = lm within the geom_smooth() function fits a linear regression line to the data.\n\n\nCode\nggplot(data = flow_data,\n       aes(x = dist,\n           y = TOTAL_TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) + \n  labs(title = \"Relationship between Distance and Total Trips\", \n       x = \"Distance\", \n       y = \"Total Trips\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\nThe relationship between these two variables appears to be non-linear.\n\nThe scatterplot is re-plotted after applying a log transformation on both variables.\n\n\nCode\nggplot(data = flow_data,\n       aes(x = log(dist),\n           y = log(TOTAL_TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm) + \n  labs(title = \"Relationship between Log Distance and Log Total Trips\", \n       x = \"Log Distance\", \n       y = \"Log Total Trips\") +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\nWhile the relationship is still non-linear, it is less skewed than before."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#check-for-variables-with-zero-values",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#check-for-variables-with-zero-values",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Check for variables with zero values",
    "text": "Check for variables with zero values\nSince Poisson Regression is based on log and log 0 is undefined, it is important to ensure that no 0 values in the explanatory variables before running the model. In the code chunk below, summary() is used to compute the summary statistics of all variables in the flow_data data frame.\n\n\nCode\nsummary(flow_data)\n\n\n   ORIGIN_hex      DESTIN_hex     TOTAL_TRIPS       FlowNoIntra     \n 2634   :  285   2010   :  364   Min.   :    1.0   Min.   :    1.0  \n 1849   :  284   1982   :  355   1st Qu.:    7.0   1st Qu.:    7.0  \n 2010   :  283   2009   :  342   Median :   37.0   Median :   37.0  \n 2038   :  282   1984   :  317   Mean   :  378.3   Mean   :  378.3  \n 1987   :  281   2634   :  299   3rd Qu.:  177.0   3rd Qu.:  177.0  \n 1990   :  280   1849   :  298   Max.   :89347.0   Max.   :89347.0  \n (Other):63356   (Other):63076                                      \n     offset       dist       o_housing_count  o_biz_count      o_school_count  \n Min.   :1   Min.   :  750   Min.   :   0    Min.   :  0.000   Min.   :0.0000  \n 1st Qu.:1   1st Qu.: 3000   1st Qu.:   0    1st Qu.:  0.000   1st Qu.:0.0000  \n Median :1   Median : 5408   Median : 976    Median :  1.000   Median :0.0000  \n Mean   :1   Mean   : 6280   Mean   :1848    Mean   :  6.571   Mean   :0.5865  \n 3rd Qu.:1   3rd Qu.: 8842   3rd Qu.:3399    3rd Qu.:  6.000   3rd Qu.:1.0000  \n Max.   :1   Max.   :25200   Max.   :8324    Max.   :126.000   Max.   :5.0000  \n                                                                               \n o_busstop_count  o_mrtlrt_count    d_biz_count      d_school_count  \n Min.   : 1.000   Min.   :0.0000   Min.   :  0.000   Min.   :0.0000  \n 1st Qu.: 5.000   1st Qu.:0.0000   1st Qu.:  0.000   1st Qu.:0.0000  \n Median : 8.000   Median :0.0000   Median :  1.000   Median :0.0000  \n Mean   : 7.825   Mean   :0.4422   Mean   :  7.355   Mean   :0.5578  \n 3rd Qu.:10.000   3rd Qu.:1.0000   3rd Qu.:  7.000   3rd Qu.:1.0000  \n Max.   :20.000   Max.   :4.0000   Max.   :126.000   Max.   :5.0000  \n                                                                     \n  d_fin_count      d_busstop_count  d_mrtlrt_count  \n Min.   :  0.000   Min.   : 1.000   Min.   :0.0000  \n 1st Qu.:  0.000   1st Qu.: 5.000   1st Qu.:0.0000  \n Median :  3.000   Median : 8.000   Median :0.0000  \n Mean   :  8.999   Mean   : 7.766   Mean   :0.4669  \n 3rd Qu.:  9.000   3rd Qu.:10.000   3rd Qu.:1.0000  \n Max.   :176.000   Max.   :20.000   Max.   :4.0000  \n                                                    \n\n\nThe print report above reveals that all the count variables except o_busstop_count and d_busstop_count consist of 0 values, which should be replaced to a negligible value of 0.99.\nIn the code chunk below, vars(ends_with(\"_count\")) selects all columns with names ending in “_count”, while ifelse() function checks if the values in these columns are equal to 0. If so, it replaces them with 0.99; otherwise, it leaves them unchanged.\n\n\nCode\nflow_data &lt;- flow_data %&gt;%\n  mutate_at(vars(ends_with(\"_count\")), ~ ifelse(. == 0, 0.99, .))\n\n\nRun summary() again to check that the replacement has been done correctly.\n\n\nCode\nsummary(flow_data)\n\n\n   ORIGIN_hex      DESTIN_hex     TOTAL_TRIPS       FlowNoIntra     \n 2634   :  285   2010   :  364   Min.   :    1.0   Min.   :    1.0  \n 1849   :  284   1982   :  355   1st Qu.:    7.0   1st Qu.:    7.0  \n 2010   :  283   2009   :  342   Median :   37.0   Median :   37.0  \n 2038   :  282   1984   :  317   Mean   :  378.3   Mean   :  378.3  \n 1987   :  281   2634   :  299   3rd Qu.:  177.0   3rd Qu.:  177.0  \n 1990   :  280   1849   :  298   Max.   :89347.0   Max.   :89347.0  \n (Other):63356   (Other):63076                                      \n     offset       dist       o_housing_count    o_biz_count     \n Min.   :1   Min.   :  750   Min.   :   0.99   Min.   :  0.990  \n 1st Qu.:1   1st Qu.: 3000   1st Qu.:   0.99   1st Qu.:  0.990  \n Median :1   Median : 5408   Median : 976.00   Median :  1.000  \n Mean   :1   Mean   : 6280   Mean   :1848.20   Mean   :  6.987  \n 3rd Qu.:1   3rd Qu.: 8842   3rd Qu.:3399.00   3rd Qu.:  6.000  \n Max.   :1   Max.   :25200   Max.   :8324.00   Max.   :126.000  \n                                                                \n o_school_count  o_busstop_count  o_mrtlrt_count   d_biz_count     \n Min.   :0.990   Min.   : 1.000   Min.   :0.990   Min.   :  0.990  \n 1st Qu.:0.990   1st Qu.: 5.000   1st Qu.:0.990   1st Qu.:  0.990  \n Median :0.990   Median : 8.000   Median :0.990   Median :  1.000  \n Mean   :1.183   Mean   : 7.825   Mean   :1.103   Mean   :  7.749  \n 3rd Qu.:1.000   3rd Qu.:10.000   3rd Qu.:1.000   3rd Qu.:  7.000  \n Max.   :5.000   Max.   :20.000   Max.   :4.000   Max.   :126.000  \n                                                                   \n d_school_count   d_fin_count      d_busstop_count  d_mrtlrt_count \n Min.   :0.990   Min.   :  0.990   Min.   : 1.000   Min.   :0.990  \n 1st Qu.:0.990   1st Qu.:  0.990   1st Qu.: 5.000   1st Qu.:0.990  \n Median :0.990   Median :  3.000   Median : 8.000   Median :0.990  \n Mean   :1.173   Mean   :  9.268   Mean   : 7.766   Mean   :1.122  \n 3rd Qu.:1.000   3rd Qu.:  9.000   3rd Qu.:10.000   3rd Qu.:1.000  \n Max.   :5.000   Max.   :176.000   Max.   :20.000   Max.   :4.000  \n                                                                   \n\n\n\nAll 0 values in the count columns have now been replaced by 0.99."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#apply-log-transformation-to-explanatory-variables",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#apply-log-transformation-to-explanatory-variables",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Apply log() transformation to explanatory variables",
    "text": "Apply log() transformation to explanatory variables\nAs Poisson Regression is based on log, log() will be applied to all the explanatory variables before calibrating the various SIM.\n\n\nCode\nflow_data_log &lt;- flow_data %&gt;%\n  mutate_at(vars(ends_with(\"_count\")), log) %&gt;%\n  mutate(dist = log(dist))\n\nsummary(flow_data_log)\n\n\n   ORIGIN_hex      DESTIN_hex     TOTAL_TRIPS       FlowNoIntra     \n 2634   :  285   2010   :  364   Min.   :    1.0   Min.   :    1.0  \n 1849   :  284   1982   :  355   1st Qu.:    7.0   1st Qu.:    7.0  \n 2010   :  283   2009   :  342   Median :   37.0   Median :   37.0  \n 2038   :  282   1984   :  317   Mean   :  378.3   Mean   :  378.3  \n 1987   :  281   2634   :  299   3rd Qu.:  177.0   3rd Qu.:  177.0  \n 1990   :  280   1849   :  298   Max.   :89347.0   Max.   :89347.0  \n (Other):63356   (Other):63076                                      \n     offset       dist        o_housing_count     o_biz_count      \n Min.   :1   Min.   : 6.620   Min.   :-0.01005   Min.   :-0.01005  \n 1st Qu.:1   1st Qu.: 8.006   1st Qu.:-0.01005   1st Qu.:-0.01005  \n Median :1   Median : 8.596   Median : 6.88346   Median : 0.00000  \n Mean   :1   Mean   : 8.484   Mean   : 4.87339   Mean   : 0.91389  \n 3rd Qu.:1   3rd Qu.: 9.087   3rd Qu.: 8.13124   3rd Qu.: 1.79176  \n Max.   :1   Max.   :10.135   Max.   : 9.02690   Max.   : 4.83628  \n                                                                   \n o_school_count     o_busstop_count o_mrtlrt_count      d_biz_count      \n Min.   :-0.01005   Min.   :0.000   Min.   :-0.01005   Min.   :-0.01005  \n 1st Qu.:-0.01005   1st Qu.:1.609   1st Qu.:-0.01005   1st Qu.:-0.01005  \n Median :-0.01005   Median :2.079   Median :-0.01005   Median : 0.00000  \n Mean   : 0.11104   Mean   :1.934   Mean   : 0.05941   Mean   : 0.99195  \n 3rd Qu.: 0.00000   3rd Qu.:2.303   3rd Qu.: 0.00000   3rd Qu.: 1.94591  \n Max.   : 1.60944   Max.   :2.996   Max.   : 1.38629   Max.   : 4.83628  \n                                                                         \n d_school_count      d_fin_count       d_busstop_count d_mrtlrt_count    \n Min.   :-0.01005   Min.   :-0.01005   Min.   :0.000   Min.   :-0.01005  \n 1st Qu.:-0.01005   1st Qu.:-0.01005   1st Qu.:1.609   1st Qu.:-0.01005  \n Median :-0.01005   Median : 1.09861   Median :2.079   Median :-0.01005  \n Mean   : 0.10488   Mean   : 1.29848   Mean   :1.920   Mean   : 0.07033  \n 3rd Qu.: 0.00000   3rd Qu.: 2.19722   3rd Qu.:2.303   3rd Qu.: 0.00000  \n Max.   : 1.60944   Max.   : 5.17048   Max.   :2.996   Max.   : 1.38629"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#unconstrained-spatial-interaction-model",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#unconstrained-spatial-interaction-model",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Unconstrained Spatial Interaction Model",
    "text": "Unconstrained Spatial Interaction Model\nNext, calibrate an unconstrained SIM by using glm() of Base Stats. The explanatory variables are all the origin and destination variables created earlier and distance between origin and destination (i.e. dist).\nThe code chunk used to calibrate the model is shown below:\n\n\nCode\n# Generate propulsive variables names\norigin_var &lt;- propulsive %&gt;%\n  select(-(index)) %&gt;%\n  names()\n\n# Generate attractiveness variables names\ndestin_var &lt;- attractiveness %&gt;%\n  select(-(index)) %&gt;%\n  names()\n\n# Generate the formula dynamically\nformula_string &lt;- paste(\"TOTAL_TRIPS ~\", paste(origin_var, collapse = \" + \"), \n                        \"+\", paste(destin_var, collapse = \" + \"), \"+ dist\")\n\n# Convert the string to a formula\nformula &lt;- as.formula(formula_string)\n\nuncSIM &lt;- glm(formula,\n              family = poisson(link = \"log\"),\n              data = flow_data_log,\n              na.action = na.exclude)\n\nuncSIM\n\n\n\nCall:  glm(formula = formula, family = poisson(link = \"log\"), data = flow_data_log, \n    na.action = na.exclude)\n\nCoefficients:\n    (Intercept)  o_housing_count      o_biz_count   o_school_count  \n       14.83292          0.12078         -0.13711          0.18786  \no_busstop_count   o_mrtlrt_count      d_biz_count   d_school_count  \n        0.55197          0.08988          0.04594          0.36963  \n    d_fin_count  d_busstop_count   d_mrtlrt_count             dist  \n        0.31038          0.23907         -0.01979         -1.45763  \n\nDegrees of Freedom: 65050 Total (i.e. Null);  65039 Residual\nNull Deviance:      98250000 \nResidual Deviance: 49120000     AIC: 49470000\n\n\n\nPositive coefficients suggest that as the counts of the explanatory variable increase by one unit, the number of trips is also expected to increase by the value of the coefficient, holding other variables constant. Conversely, negative coefficients suggest that as the counts of the explanatory variable increase by one unit, the number of trips is expected to decrease by the value of the coefficient, holding other variables constant.\n\n\n\n\n\n\n\nInsights\n\n\n\n\nBy absolute value, the most influential variable is the Distance between origin and destination. The negative coefficient means there is an inverse relationship between Distance and Number of Trips: More trips are made when the distance is nearer, while less trips are made when the distance is further.\nThe most propulsive origin variable is Bus Stop counts with a coefficient of 0.551: More trips are made when there is higher bus stop density at the origin site, while less trips are made when there is lower bus stop density at the origin site.\nThere is an inverse relationship between Business counts at the origin and number of trips: More trips are made when there are fewer businesses at the origin site, while less trips are made when there are more businesses at the origin.\nConversely, the most attractive destination variables are School and Financial Services counts with a coefficient of 0.369 and 0.310 respectively: More trips are made when there is higher school / financial services density at the destination site, while less trips are made when there is lower school / financial services density at the destination site.\nNotably, there appears to be an inverse relationship between the number of trips with the Business density at the origin and the MRT / LRT station density at the destination. This means that more trips are made when there are less businesses at the origin, while less trips are made when there are more businesses at the origin. Similarly, more bus trips are made when there are less MRT / LRT stations at the destination – suggesting a complementary role between bus services and MRT / LRT services.\n\n\n\nIn statistical modelling, the goodness-of-fit of a model looks at how well the proportion of variance in the dependent variable (i.e. TOTAL_TRIPS) can be explained by the explanatory variables. This can be answered by comparing the R2 statistics. However, R2 is not an output of glm(). Hence, in the code chunk below, a function called CalcRSquared is written to measure how much variation of the trips can be accounted for by the model.\n\n\nCode\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\n\nNext, compute the R-squared of the unconstrained SIM by using the code chunk below.\n\n\nCode\nCalcRSquared(uncSIM$data$TOTAL_TRIPS, uncSIM$fitted.values)\n\n\n[1] 0.237972\n\n\n\n\n\n\n\n\nInsights\n\n\n\nWith reference to the R2 above, it can be concluded that the model accounts for 23.79% of the variation of flows."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#origin-production-constrained-spatial-interaction-model",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#origin-production-constrained-spatial-interaction-model",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Origin (Production) Constrained Spatial Interaction Model",
    "text": "Origin (Production) Constrained Spatial Interaction Model\nNext, fit an origin constrained SIM by using the code chunk below.\n\nFor origin constrained SIM, only explanatory variables representing the attractiveness at the destinations will be used. This is because such models emphasize the limitations or capacities of the origins rather than the demand or attractiveness of the destinations. The capacity or limitation at the origin sites determines the potential for generating interactions or flows.\nAdditionally, “-1” is added to the formula to remove the intercept that is inserted by glm into the model by default. Since the origin has already been constrained, the concept of an intercept would not be relevant.\n\n\n\nCode\n# Generate the formula dynamically\nformula_string &lt;- paste(\"TOTAL_TRIPS ~ ORIGIN_hex +\", \n                        paste(destin_var, collapse = \" + \"), \"+ dist - 1\")\n\n# Convert the string to a formula\nformula &lt;- as.formula(formula_string)\n\norcSIM &lt;- glm(formula,\n              family = poisson(link = \"log\"),\n              data = flow_data_log,\n              na.action = na.exclude)\n\n\nsummary() is used to print out the results of the model.\n\n\nCode\noptions(max.print=9999, scipen = 999, digits = 10)\n\nsummary(orcSIM)\n\n\n\nCall:\nglm(formula = formula, family = poisson(link = \"log\"), data = flow_data_log, \n    na.action = na.exclude)\n\nDeviance Residuals: \n       Min          1Q      Median          3Q         Max  \n-166.23959   -12.10816    -5.36754     0.60571   618.58598  \n\nCoefficients:\n                     Estimate    Std. Error     z value               Pr(&gt;|z|)\nORIGIN_hex118   13.9366038450  0.1270153766   109.72375 &lt; 0.000000000000000222\nORIGIN_hex146   14.7724327742  0.1414385229   104.44420 &lt; 0.000000000000000222\nORIGIN_hex174   14.1811015041  0.1507727138    94.05615 &lt; 0.000000000000000222\nORIGIN_hex175   12.7981750246  0.1104490056   115.87406 &lt; 0.000000000000000222\nORIGIN_hex200   14.0645945955  0.0803371769   175.06956 &lt; 0.000000000000000222\nORIGIN_hex201   15.0041443507  0.0259650906   577.85835 &lt; 0.000000000000000222\nORIGIN_hex202   16.3629847660  0.0227318405   719.82666 &lt; 0.000000000000000222\nORIGIN_hex203   13.9838534024  0.0496043336   281.90790 &lt; 0.000000000000000222\nORIGIN_hex227   14.5175802768  0.0643115124   225.73844 &lt; 0.000000000000000222\nORIGIN_hex228   14.1747020359  0.0319354049   443.85540 &lt; 0.000000000000000222\nORIGIN_hex229   14.2080246363  0.0762749124   186.27389 &lt; 0.000000000000000222\nORIGIN_hex230   16.5682661182  0.0130600811  1268.61893 &lt; 0.000000000000000222\nORIGIN_hex231   13.4089529693  0.0685507709   195.60616 &lt; 0.000000000000000222\nORIGIN_hex254   16.8102537450  0.0159997761  1050.65556 &lt; 0.000000000000000222\nORIGIN_hex255   13.9459358616  0.0672993562   207.22243 &lt; 0.000000000000000222\nORIGIN_hex256   13.9915576944  0.0500906588   279.32469 &lt; 0.000000000000000222\nORIGIN_hex257   15.7845295619  0.0185539684   850.73604 &lt; 0.000000000000000222\nORIGIN_hex258   13.3447722108  0.0702141352   190.05820 &lt; 0.000000000000000222\nORIGIN_hex259   13.5843468688  0.0493097055   275.49033 &lt; 0.000000000000000222\nORIGIN_hex281   15.6546677854  0.0446788383   350.38216 &lt; 0.000000000000000222\nORIGIN_hex282   14.3220124593  0.0518166927   276.39766 &lt; 0.000000000000000222\nORIGIN_hex284   14.4397501353  0.0375854726   384.18434 &lt; 0.000000000000000222\nORIGIN_hex285   15.0946379471  0.0225632418   668.99243 &lt; 0.000000000000000222\nORIGIN_hex286   17.5298391153  0.0061030080  2872.32772 &lt; 0.000000000000000222\nORIGIN_hex312   13.1751808870  0.0672985707   195.77208 &lt; 0.000000000000000222\nORIGIN_hex313   13.6131827521  0.0496728307   274.05692 &lt; 0.000000000000000222\nORIGIN_hex314   14.4287843204  0.0347131528   415.65756 &lt; 0.000000000000000222\nORIGIN_hex336   13.8038852484  0.1324702304   104.20368 &lt; 0.000000000000000222\nORIGIN_hex338   14.3249593202  0.0404754517   353.91722 &lt; 0.000000000000000222\nORIGIN_hex339   16.7243501681  0.0078763664  2123.35859 &lt; 0.000000000000000222\nORIGIN_hex340   12.4957978248  0.1443512868    86.56520 &lt; 0.000000000000000222\nORIGIN_hex366   17.2541268742  0.0068662177  2512.90124 &lt; 0.000000000000000222\nORIGIN_hex367   14.6178866306  0.0256597487   569.68160 &lt; 0.000000000000000222\nORIGIN_hex391   14.3570155902  0.0864163279   166.13777 &lt; 0.000000000000000222\nORIGIN_hex392   17.0803817912  0.0077756831  2196.64068 &lt; 0.000000000000000222\nORIGIN_hex393   14.6843821525  0.0254803344   576.30257 &lt; 0.000000000000000222\nORIGIN_hex394   12.1220097544  0.2425429317    49.97882 &lt; 0.000000000000000222\nORIGIN_hex419   12.9360137792  0.0860895662   150.26227 &lt; 0.000000000000000222\nORIGIN_hex420   14.7421233994  0.0311575024   473.14843 &lt; 0.000000000000000222\nORIGIN_hex421   13.9219648479  0.1204063391   115.62485 &lt; 0.000000000000000222\nORIGIN_hex445   15.1874988120  0.0324022221   468.71782 &lt; 0.000000000000000222\nORIGIN_hex446   15.9409967658  0.0129167397  1234.13471 &lt; 0.000000000000000222\nORIGIN_hex447   13.7539372110  0.0555966795   247.38775 &lt; 0.000000000000000222\nORIGIN_hex472   13.0895312866  0.1336467077    97.94129 &lt; 0.000000000000000222\nORIGIN_hex473   13.8823193646  0.0488365696   284.26074 &lt; 0.000000000000000222\nORIGIN_hex474   13.6713025472  0.0497331481   274.89317 &lt; 0.000000000000000222\nORIGIN_hex499   14.0271765285  0.0422268382   332.18629 &lt; 0.000000000000000222\nORIGIN_hex500   16.0901119155  0.0108577453  1481.90176 &lt; 0.000000000000000222\nORIGIN_hex526   14.7821542251  0.0296256364   498.96495 &lt; 0.000000000000000222\nORIGIN_hex527   14.5320400510  0.0504200501   288.21947 &lt; 0.000000000000000222\nORIGIN_hex528   14.6552449305  0.0336942210   434.94832 &lt; 0.000000000000000222\nORIGIN_hex552   14.1076316515  0.0547551111   257.64959 &lt; 0.000000000000000222\nORIGIN_hex553   11.8380040852  0.1291152595    91.68555 &lt; 0.000000000000000222\nORIGIN_hex554   14.5030024103  0.0365685920   396.59723 &lt; 0.000000000000000222\nORIGIN_hex555   14.1516010769  0.0406715593   347.94833 &lt; 0.000000000000000222\nORIGIN_hex581   14.4698579965  0.0303441269   476.85860 &lt; 0.000000000000000222\nORIGIN_hex582   14.0263363936  0.0310332399   451.97783 &lt; 0.000000000000000222\nORIGIN_hex607   14.3969622526  0.0426472801   337.58219 &lt; 0.000000000000000222\nORIGIN_hex608   13.8914937966  0.0411139037   337.87825 &lt; 0.000000000000000222\nORIGIN_hex609   18.6593137625  0.0032343889  5769.03838 &lt; 0.000000000000000222\nORIGIN_hex610   14.3431170006  0.0534901000   268.14526 &lt; 0.000000000000000222\nORIGIN_hex611   13.2113692050  0.2672716131    49.43050 &lt; 0.000000000000000222\nORIGIN_hex634   15.1746946281  0.0343392210   441.90562 &lt; 0.000000000000000222\nORIGIN_hex635   13.0063760475  0.0619292756   210.01983 &lt; 0.000000000000000222\nORIGIN_hex636   15.1722421188  0.0138614762  1094.56178 &lt; 0.000000000000000222\nORIGIN_hex638   15.2277011780  0.0223668947   680.81427 &lt; 0.000000000000000222\nORIGIN_hex661   14.2974102581  0.0578703891   247.05917 &lt; 0.000000000000000222\nORIGIN_hex662   14.2980793531  0.0363742022   393.08297 &lt; 0.000000000000000222\nORIGIN_hex663   14.2019040267  0.0240744165   589.91685 &lt; 0.000000000000000222\nORIGIN_hex664   14.4493189375  0.0457374314   315.91890 &lt; 0.000000000000000222\nORIGIN_hex665   16.0763453980  0.0128956841  1246.64541 &lt; 0.000000000000000222\nORIGIN_hex689   13.6115409380  0.0402421232   338.24112 &lt; 0.000000000000000222\nORIGIN_hex690   14.0765386666  0.0316916175   444.17230 &lt; 0.000000000000000222\nORIGIN_hex692   16.3439901989  0.0125038303  1307.11869 &lt; 0.000000000000000222\nORIGIN_hex693   15.4124118062  0.0249905803   616.72885 &lt; 0.000000000000000222\nORIGIN_hex715   13.9297297024  0.0553212217   251.79722 &lt; 0.000000000000000222\nORIGIN_hex716   14.4524792597  0.0362127470   399.09923 &lt; 0.000000000000000222\nORIGIN_hex717   15.1216437349  0.0171843287   879.96709 &lt; 0.000000000000000222\nORIGIN_hex718   18.4758103791  0.0040185204  4597.66494 &lt; 0.000000000000000222\nORIGIN_hex719   15.9780639760  0.0179327501   890.99909 &lt; 0.000000000000000222\nORIGIN_hex720   11.7524781736  0.2582068688    45.51575 &lt; 0.000000000000000222\nORIGIN_hex743   15.0737405181  0.0239868106   628.41787 &lt; 0.000000000000000222\nORIGIN_hex744   14.7538191780  0.0252595868   584.08791 &lt; 0.000000000000000222\nORIGIN_hex745   16.7702224080  0.0061774940  2714.72905 &lt; 0.000000000000000222\nORIGIN_hex746   17.9904158440  0.0040863943  4402.51584 &lt; 0.000000000000000222\nORIGIN_hex747   14.9589736422  0.0242710418   616.33010 &lt; 0.000000000000000222\nORIGIN_hex748   13.7228298831  0.0597952196   229.49711 &lt; 0.000000000000000222\nORIGIN_hex769   13.6609312603  0.0664019117   205.73099 &lt; 0.000000000000000222\nORIGIN_hex770   14.7189717423  0.0245448867   599.67568 &lt; 0.000000000000000222\nORIGIN_hex771   15.6544773835  0.0112489650  1391.63713 &lt; 0.000000000000000222\nORIGIN_hex772   17.7232960619  0.0039684593  4466.03948 &lt; 0.000000000000000222\nORIGIN_hex773   16.7518142194  0.0095406990  1755.82672 &lt; 0.000000000000000222\nORIGIN_hex774   14.4629329738  0.0393713837   367.34632 &lt; 0.000000000000000222\nORIGIN_hex775   15.1762305040  0.0254527823   596.25036 &lt; 0.000000000000000222\nORIGIN_hex776   12.7295260947  0.2041355695    62.35820 &lt; 0.000000000000000222\nORIGIN_hex777   12.9567368541  0.2085275273    62.13442 &lt; 0.000000000000000222\nORIGIN_hex797   14.1246149718  0.0353986721   399.01539 &lt; 0.000000000000000222\nORIGIN_hex798   13.5625514381  0.1078508311   125.75287 &lt; 0.000000000000000222\nORIGIN_hex799   17.6802199736  0.0042956563  4115.83670 &lt; 0.000000000000000222\nORIGIN_hex800   18.3746434120  0.0035175631  5223.68550 &lt; 0.000000000000000222\nORIGIN_hex802   12.7918863617  0.0857738282   149.13508 &lt; 0.000000000000000222\nORIGIN_hex803   12.2856360847  0.1313218010    93.55367 &lt; 0.000000000000000222\nORIGIN_hex805   13.1094664846  0.0976107535   134.30351 &lt; 0.000000000000000222\nORIGIN_hex806   15.3756989012  0.0436191335   352.49895 &lt; 0.000000000000000222\nORIGIN_hex823   13.8123658636  0.0558679551   247.23235 &lt; 0.000000000000000222\nORIGIN_hex824   13.6395184928  0.0523594178   260.49790 &lt; 0.000000000000000222\nORIGIN_hex825   15.5323502359  0.0210751493   736.99835 &lt; 0.000000000000000222\nORIGIN_hex826   18.7202357726  0.0026927158  6952.17654 &lt; 0.000000000000000222\nORIGIN_hex827   17.9820864572  0.0041712390  4310.97011 &lt; 0.000000000000000222\nORIGIN_hex832   12.3904342198  1.0000023263    12.39041 &lt; 0.000000000000000222\nORIGIN_hex833   12.6977880164  0.1280528801    99.16050 &lt; 0.000000000000000222\nORIGIN_hex851   12.3311089432  0.0980767963   125.72912 &lt; 0.000000000000000222\nORIGIN_hex852   15.1920348314  0.0216729532   700.96746 &lt; 0.000000000000000222\nORIGIN_hex853   15.7731292432  0.0090816336  1736.81631 &lt; 0.000000000000000222\nORIGIN_hex854   17.0996487663  0.0049065281  3485.08116 &lt; 0.000000000000000222\nORIGIN_hex856   11.7187939348  0.2041342199    57.40730 &lt; 0.000000000000000222\nORIGIN_hex861   13.1092242594  0.1091280534   120.12699 &lt; 0.000000000000000222\nORIGIN_hex862   15.0352693364  0.1010467995   148.79511 &lt; 0.000000000000000222\nORIGIN_hex878   14.1868546739  0.0382308458   371.08399 &lt; 0.000000000000000222\nORIGIN_hex879   14.2859123018  0.0251636143   567.72100 &lt; 0.000000000000000222\nORIGIN_hex880   16.3075478175  0.0065182812  2501.81716 &lt; 0.000000000000000222\nORIGIN_hex881   15.9868102466  0.0112198283  1424.87120 &lt; 0.000000000000000222\nORIGIN_hex888   13.7972218246  0.1857111846    74.29397 &lt; 0.000000000000000222\nORIGIN_hex889   15.5127869366  0.0591791702   262.13255 &lt; 0.000000000000000222\nORIGIN_hex905   13.9474062868  0.0451314294   309.03976 &lt; 0.000000000000000222\nORIGIN_hex906   11.6887837221  0.1270173726    92.02508 &lt; 0.000000000000000222\nORIGIN_hex907   14.1038012619  0.0251065238   561.75842 &lt; 0.000000000000000222\nORIGIN_hex908   17.9412459325  0.0035499503  5053.94281 &lt; 0.000000000000000222\nORIGIN_hex910   13.8093769117  0.0658333289   209.76270 &lt; 0.000000000000000222\nORIGIN_hex932   15.2289968379  0.0173364634   878.43734 &lt; 0.000000000000000222\nORIGIN_hex933   15.1713886772  0.0148312274  1022.93548 &lt; 0.000000000000000222\nORIGIN_hex934   16.4995524378  0.0061093352  2700.71160 &lt; 0.000000000000000222\nORIGIN_hex935   17.5487381623  0.0042634970  4116.04324 &lt; 0.000000000000000222\nORIGIN_hex937   17.7054062984  0.0069394186  2551.42503 &lt; 0.000000000000000222\nORIGIN_hex959   15.7591370993  0.0149801551  1052.00093 &lt; 0.000000000000000222\nORIGIN_hex960   16.4028299786  0.0068670638  2388.62349 &lt; 0.000000000000000222\nORIGIN_hex961   17.4393923777  0.0043070758  4049.00988 &lt; 0.000000000000000222\nORIGIN_hex962   17.8625860023  0.0037148873  4808.37898 &lt; 0.000000000000000222\nORIGIN_hex986   12.5561997709  0.0894653714   140.34704 &lt; 0.000000000000000222\nORIGIN_hex987   17.4955979303  0.0042207052  4145.18357 &lt; 0.000000000000000222\nORIGIN_hex988   16.5519406633  0.0067086353  2467.25898 &lt; 0.000000000000000222\nORIGIN_hex989   17.8392654041  0.0037309583  4781.41643 &lt; 0.000000000000000222\nORIGIN_hex991   14.6013058815  0.0318207140   458.86167 &lt; 0.000000000000000222\nORIGIN_hex1013  12.7087136520  0.1042778563   121.87356 &lt; 0.000000000000000222\nORIGIN_hex1014  15.7600094234  0.0107666518  1463.77998 &lt; 0.000000000000000222\nORIGIN_hex1015  16.5511285854  0.0075811796  2183.18646 &lt; 0.000000000000000222\nORIGIN_hex1016  16.7102776429  0.0053370532  3130.99328 &lt; 0.000000000000000222\nORIGIN_hex1042  16.4276382867  0.0083711705  1962.40637 &lt; 0.000000000000000222\nORIGIN_hex1043  17.0761129714  0.0051067527  3343.83000 &lt; 0.000000000000000222\nORIGIN_hex1045  13.9565540972  0.0403796199   345.63362 &lt; 0.000000000000000222\nORIGIN_hex1067  15.6213615904  0.0145736519  1071.89068 &lt; 0.000000000000000222\nORIGIN_hex1068  14.4737000654  0.0264508616   547.19201 &lt; 0.000000000000000222\nORIGIN_hex1069  14.2408811183  0.0195412622   728.75953 &lt; 0.000000000000000222\nORIGIN_hex1070  17.3978231965  0.0040596424  4285.55563 &lt; 0.000000000000000222\nORIGIN_hex1078  13.7293427113  0.0743608075   184.63144 &lt; 0.000000000000000222\nORIGIN_hex1093  13.8441783117  0.0436506288   317.15874 &lt; 0.000000000000000222\nORIGIN_hex1094  16.7475625353  0.0067092830  2496.17767 &lt; 0.000000000000000222\nORIGIN_hex1095  13.5351063129  0.0275579154   491.15131 &lt; 0.000000000000000222\nORIGIN_hex1096  17.0518727782  0.0045156099  3776.20590 &lt; 0.000000000000000222\nORIGIN_hex1097  17.2221290648  0.0054694112  3148.80858 &lt; 0.000000000000000222\nORIGIN_hex1099  18.6889218251  0.0035435166  5274.11725 &lt; 0.000000000000000222\nORIGIN_hex1100  14.8101239584  0.0411842176   359.60678 &lt; 0.000000000000000222\nORIGIN_hex1122  17.4568308528  0.0045591249  3828.98718 &lt; 0.000000000000000222\nORIGIN_hex1123  17.8005623208  0.0033681608  5284.95028 &lt; 0.000000000000000222\nORIGIN_hex1124  16.9813784576  0.0050209435  3382.10902 &lt; 0.000000000000000222\nORIGIN_hex1125  17.6668283583  0.0046999467  3758.94231 &lt; 0.000000000000000222\nORIGIN_hex1126  16.6180755166  0.0131663280  1262.16479 &lt; 0.000000000000000222\nORIGIN_hex1127  17.7268404539  0.0041656113  4255.51959 &lt; 0.000000000000000222\nORIGIN_hex1128  18.0335989775  0.0056032822  3218.39923 &lt; 0.000000000000000222\nORIGIN_hex1132  11.4232884898  0.2425430237    47.09799 &lt; 0.000000000000000222\nORIGIN_hex1147  12.5004210863  0.0795812283   157.07751 &lt; 0.000000000000000222\nORIGIN_hex1148  15.9804775135  0.0089535880  1784.81269 &lt; 0.000000000000000222\nORIGIN_hex1149  15.0754853153  0.0124414707  1211.71248 &lt; 0.000000000000000222\nORIGIN_hex1150  17.7941517324  0.0035393753  5027.48378 &lt; 0.000000000000000222\nORIGIN_hex1151  17.3660964382  0.0041406733  4194.02720 &lt; 0.000000000000000222\nORIGIN_hex1152  17.4193748977  0.0048521202  3590.05428 &lt; 0.000000000000000222\nORIGIN_hex1153  18.6492206770  0.0040959852  4553.04888 &lt; 0.000000000000000222\nORIGIN_hex1154  18.1954658106  0.0034572052  5263.05634 &lt; 0.000000000000000222\nORIGIN_hex1155  14.7551830120  0.0290125784   508.57882 &lt; 0.000000000000000222\nORIGIN_hex1158  15.9595920370  0.0150812862  1058.23812 &lt; 0.000000000000000222\nORIGIN_hex1174  14.0786137794  0.0372712170   377.73421 &lt; 0.000000000000000222\nORIGIN_hex1175  14.7340018190  0.0315786240   466.58150 &lt; 0.000000000000000222\nORIGIN_hex1176  16.4524149333  0.0060579292  2715.84802 &lt; 0.000000000000000222\nORIGIN_hex1177  15.5236896026  0.0095558684  1624.51898 &lt; 0.000000000000000222\nORIGIN_hex1178  17.2326794151  0.0044431003  3878.52582 &lt; 0.000000000000000222\nORIGIN_hex1179  16.8160966477  0.0056942456  2953.17375 &lt; 0.000000000000000222\nORIGIN_hex1180  16.2894149304  0.0077211085  2109.72490 &lt; 0.000000000000000222\nORIGIN_hex1181  17.4400182496  0.0042739945  4080.49615 &lt; 0.000000000000000222\nORIGIN_hex1182  17.7066513734  0.0049005709  3613.18134 &lt; 0.000000000000000222\nORIGIN_hex1183  18.5005906255  0.0054865162  3372.01056 &lt; 0.000000000000000222\nORIGIN_hex1185  14.7384613712  0.0258847934   569.38686 &lt; 0.000000000000000222\nORIGIN_hex1201  14.3078638255  0.0328376002   435.71588 &lt; 0.000000000000000222\nORIGIN_hex1202  16.3806644430  0.0073986413  2214.00981 &lt; 0.000000000000000222\nORIGIN_hex1203  15.1959262954  0.0145194411  1046.59168 &lt; 0.000000000000000222\nORIGIN_hex1205  17.8234898532  0.0034240873  5205.32580 &lt; 0.000000000000000222\nORIGIN_hex1206  17.1665436720  0.0053773752  3192.36488 &lt; 0.000000000000000222\nORIGIN_hex1207  16.7711692995  0.0056730388  2956.29378 &lt; 0.000000000000000222\nORIGIN_hex1209  17.5405451025  0.0059681057  2939.04730 &lt; 0.000000000000000222\nORIGIN_hex1210  14.9844626452  0.0275508289   543.88428 &lt; 0.000000000000000222\nORIGIN_hex1211  14.4268984625  0.0293024566   492.34433 &lt; 0.000000000000000222\nORIGIN_hex1212  13.9264917854  0.0376317675   370.07275 &lt; 0.000000000000000222\nORIGIN_hex1228  13.7387158930  0.0449482067   305.65660 &lt; 0.000000000000000222\nORIGIN_hex1229  14.8237684433  0.0166159164   892.14270 &lt; 0.000000000000000222\nORIGIN_hex1230  16.3441705717  0.0068691827  2379.34718 &lt; 0.000000000000000222\nORIGIN_hex1231  17.4611745240  0.0060835707  2870.21806 &lt; 0.000000000000000222\nORIGIN_hex1232  17.6447338300  0.0037143834  4750.38039 &lt; 0.000000000000000222\nORIGIN_hex1233  17.4403292344  0.0059852342  2913.89253 &lt; 0.000000000000000222\nORIGIN_hex1235  17.6220129715  0.0048434157  3638.34414 &lt; 0.000000000000000222\nORIGIN_hex1236  16.1396868943  0.0085041596  1897.85796 &lt; 0.000000000000000222\nORIGIN_hex1237  16.8653375151  0.0073711863  2288.00858 &lt; 0.000000000000000222\nORIGIN_hex1238  14.2495563893  0.0314401962   453.22734 &lt; 0.000000000000000222\nORIGIN_hex1239  12.5156773440  0.0783505554   159.73948 &lt; 0.000000000000000222\nORIGIN_hex1240  13.3295926508  0.1270185938   104.94206 &lt; 0.000000000000000222\nORIGIN_hex1255  16.3541264203  0.0128766708  1270.05860 &lt; 0.000000000000000222\nORIGIN_hex1256  15.6214117748  0.0097416240  1603.57367 &lt; 0.000000000000000222\nORIGIN_hex1257  14.8923246021  0.0162319584   917.46937 &lt; 0.000000000000000222\nORIGIN_hex1258  16.5287193130  0.0072894231  2267.49346 &lt; 0.000000000000000222\nORIGIN_hex1259  17.3233302271  0.0044330542  3907.76414 &lt; 0.000000000000000222\nORIGIN_hex1261  17.1703423828  0.0045907947  3740.16776 &lt; 0.000000000000000222\nORIGIN_hex1262  17.4055668286  0.0046422028  3749.41973 &lt; 0.000000000000000222\nORIGIN_hex1263  14.9881876719  0.0191700973   781.85246 &lt; 0.000000000000000222\nORIGIN_hex1264  15.8945853055  0.0131052520  1212.84087 &lt; 0.000000000000000222\nORIGIN_hex1265  13.7512794778  0.0342390010   401.62619 &lt; 0.000000000000000222\nORIGIN_hex1266  15.1250324821  0.0227109235   665.98051 &lt; 0.000000000000000222\nORIGIN_hex1282  16.4711124878  0.0114062791  1444.03906 &lt; 0.000000000000000222\nORIGIN_hex1283  16.9533429954  0.0048057022  3527.75564 &lt; 0.000000000000000222\nORIGIN_hex1284  16.6331443490  0.0061073611  2723.45848 &lt; 0.000000000000000222\nORIGIN_hex1285  15.2775322174  0.0127897385  1194.51482 &lt; 0.000000000000000222\nORIGIN_hex1286  16.7296690911  0.0053999414  3098.12048 &lt; 0.000000000000000222\nORIGIN_hex1287  16.7843410293  0.0065251888  2572.23836 &lt; 0.000000000000000222\nORIGIN_hex1288  14.1780482622  0.0212160289   668.27059 &lt; 0.000000000000000222\nORIGIN_hex1289  17.3767488479  0.0040826647  4256.22725 &lt; 0.000000000000000222\nORIGIN_hex1293  13.3914339598  0.0695324952   192.59246 &lt; 0.000000000000000222\nORIGIN_hex1308  15.3391344461  0.0140635573  1090.70089 &lt; 0.000000000000000222\nORIGIN_hex1309  17.5601581381  0.0041820445  4198.94096 &lt; 0.000000000000000222\nORIGIN_hex1310  18.4828808785  0.0028140539  6568.06212 &lt; 0.000000000000000222\nORIGIN_hex1311  15.2549586475  0.0200053761   762.54296 &lt; 0.000000000000000222\nORIGIN_hex1312  15.3755282139  0.0134063090  1146.88750 &lt; 0.000000000000000222\nORIGIN_hex1314  16.0876029152  0.0085097791  1890.48421 &lt; 0.000000000000000222\nORIGIN_hex1315  17.6998219539  0.0036844712  4803.89743 &lt; 0.000000000000000222\nORIGIN_hex1316  16.6062814089  0.0085150267  1950.23245 &lt; 0.000000000000000222\nORIGIN_hex1318  14.5038194752  0.0467721070   310.09549 &lt; 0.000000000000000222\nORIGIN_hex1319  18.3572064732  0.0039166067  4687.01807 &lt; 0.000000000000000222\nORIGIN_hex1320  17.0805100179  0.0094021157  1816.66664 &lt; 0.000000000000000222\nORIGIN_hex1335  12.1114237939  0.1581285423    76.59227 &lt; 0.000000000000000222\nORIGIN_hex1336  16.1901084763  0.0073336596  2207.64384 &lt; 0.000000000000000222\nORIGIN_hex1337  17.4591045144  0.0036321365  4806.84146 &lt; 0.000000000000000222\nORIGIN_hex1338  16.8544551947  0.0066116002  2549.22480 &lt; 0.000000000000000222\nORIGIN_hex1339  14.8392332918  0.0225341992   658.52055 &lt; 0.000000000000000222\nORIGIN_hex1340  15.0416087498  0.0134782638  1115.99009 &lt; 0.000000000000000222\nORIGIN_hex1341  16.6545312949  0.0062404458  2668.80472 &lt; 0.000000000000000222\nORIGIN_hex1342  15.3268478570  0.0116082752  1320.33809 &lt; 0.000000000000000222\nORIGIN_hex1343  17.3931112003  0.0045499696  3822.68736 &lt; 0.000000000000000222\nORIGIN_hex1347  14.1748632592  0.0300822515   471.20353 &lt; 0.000000000000000222\nORIGIN_hex1348  18.4365896619  0.0037270159  4946.74297 &lt; 0.000000000000000222\nORIGIN_hex1362  15.8446138728  0.0086913200  1823.03884 &lt; 0.000000000000000222\nORIGIN_hex1363  16.5008272729  0.0062012202  2660.90007 &lt; 0.000000000000000222\nORIGIN_hex1364  16.7405282115  0.0053611522  3122.56166 &lt; 0.000000000000000222\nORIGIN_hex1366  16.8033841897  0.0054685764  3072.71639 &lt; 0.000000000000000222\nORIGIN_hex1367  14.7751485383  0.0161759622   913.40152 &lt; 0.000000000000000222\nORIGIN_hex1368  15.6402726681  0.0117916167  1326.38917 &lt; 0.000000000000000222\nORIGIN_hex1369  17.8421346013  0.0037740593  4727.57140 &lt; 0.000000000000000222\nORIGIN_hex1370  18.2835719275  0.0042321711  4320.14003 &lt; 0.000000000000000222\nORIGIN_hex1372  13.0095389457  0.1666778585    78.05199 &lt; 0.000000000000000222\nORIGIN_hex1374  16.4196123410  0.0071945206  2282.23855 &lt; 0.000000000000000222\nORIGIN_hex1375  18.7780096032  0.0035083201  5352.42202 &lt; 0.000000000000000222\nORIGIN_hex1389  15.9504683115  0.0088163982  1809.18193 &lt; 0.000000000000000222\nORIGIN_hex1390  14.4625429041  0.0245673288   588.69009 &lt; 0.000000000000000222\nORIGIN_hex1391  15.1472821078  0.0112099600  1351.23427 &lt; 0.000000000000000222\nORIGIN_hex1392  16.1188505364  0.0073399436  2196.04555 &lt; 0.000000000000000222\nORIGIN_hex1394  16.2224085063  0.0080448210  2016.50336 &lt; 0.000000000000000222\nORIGIN_hex1396  16.9887850188  0.0072943740  2329.02578 &lt; 0.000000000000000222\nORIGIN_hex1397  16.9478704067  0.0074225700  2283.28872 &lt; 0.000000000000000222\nORIGIN_hex1401  17.7865180019  0.0042279011  4206.93803 &lt; 0.000000000000000222\nORIGIN_hex1402  17.8238903433  0.0041191530  4327.07653 &lt; 0.000000000000000222\nORIGIN_hex1416  11.7915192777  0.1825850855    64.58096 &lt; 0.000000000000000222\nORIGIN_hex1417  14.5277099943  0.0221742382   655.16163 &lt; 0.000000000000000222\nORIGIN_hex1418  15.7473168520  0.0117700303  1337.91643 &lt; 0.000000000000000222\nORIGIN_hex1419  15.4710679449  0.0107826729  1434.80824 &lt; 0.000000000000000222\nORIGIN_hex1420  17.1440392351  0.0047186207  3633.27345 &lt; 0.000000000000000222\nORIGIN_hex1422  14.3744960249  0.0315240194   455.98551 &lt; 0.000000000000000222\nORIGIN_hex1423  19.3503873439  0.0053425978  3621.90604 &lt; 0.000000000000000222\nORIGIN_hex1426  15.9884511839  0.0180319872   886.67161 &lt; 0.000000000000000222\nORIGIN_hex1428  17.0944742372  0.0051337654  3329.81213 &lt; 0.000000000000000222\nORIGIN_hex1429  17.2512603575  0.0060651188  2844.34006 &lt; 0.000000000000000222\nORIGIN_hex1443  14.9080528633  0.0144024247  1035.10716 &lt; 0.000000000000000222\nORIGIN_hex1444  13.7678019585  0.0263644788   522.21028 &lt; 0.000000000000000222\nORIGIN_hex1445  16.7487658946  0.0057540760  2910.76552 &lt; 0.000000000000000222\nORIGIN_hex1446  15.2449225335  0.0119276689  1278.11416 &lt; 0.000000000000000222\nORIGIN_hex1447  16.8279853930  0.0052376415  3212.89370 &lt; 0.000000000000000222\nORIGIN_hex1455  16.6726265399  0.0078049812  2136.15204 &lt; 0.000000000000000222\nORIGIN_hex1456  17.4315338071  0.0048138276  3621.13796 &lt; 0.000000000000000222\nORIGIN_hex1457  13.4924819744  0.0498542715   270.63843 &lt; 0.000000000000000222\nORIGIN_hex1469  17.1702438768  0.0050019014  3432.74338 &lt; 0.000000000000000222\nORIGIN_hex1470  16.5001256609  0.0060797755  2713.93666 &lt; 0.000000000000000222\nORIGIN_hex1471  17.1833610001  0.0043046096  3991.85119 &lt; 0.000000000000000222\nORIGIN_hex1472  15.2948555834  0.0112084394  1364.58386 &lt; 0.000000000000000222\nORIGIN_hex1480  12.2864939240  0.1386895114    88.58993 &lt; 0.000000000000000222\nORIGIN_hex1482  17.2373586975  0.0047566289  3623.86029 &lt; 0.000000000000000222\nORIGIN_hex1483  17.3197990115  0.0065497625  2644.34002 &lt; 0.000000000000000222\nORIGIN_hex1496  15.2124189619  0.0142703988  1066.01218 &lt; 0.000000000000000222\nORIGIN_hex1497  13.4734956626  0.0490125586   274.89884 &lt; 0.000000000000000222\nORIGIN_hex1498  15.6093030420  0.0082654113  1888.50894 &lt; 0.000000000000000222\nORIGIN_hex1499  16.5916680197  0.0056693303  2926.56578 &lt; 0.000000000000000222\nORIGIN_hex1500  14.0000928441  0.0248115474   564.25714 &lt; 0.000000000000000222\nORIGIN_hex1501  16.2616873826  0.0071138575  2285.91694 &lt; 0.000000000000000222\nORIGIN_hex1507  14.0309903438  0.0629029794   223.05764 &lt; 0.000000000000000222\nORIGIN_hex1509  16.6832359305  0.0074841459  2229.14359 &lt; 0.000000000000000222\nORIGIN_hex1510  18.7271728324  0.0028685038  6528.55083 &lt; 0.000000000000000222\nORIGIN_hex1511  16.6026586471  0.0102607854  1618.06900 &lt; 0.000000000000000222\nORIGIN_hex1523  13.7738237153  0.0459326492   299.87000 &lt; 0.000000000000000222\nORIGIN_hex1524  13.8263418573  0.0364480560   379.34374 &lt; 0.000000000000000222\nORIGIN_hex1525  17.2020723872  0.0038932865  4418.39367 &lt; 0.000000000000000222\nORIGIN_hex1526  14.5786277667  0.0153017518   952.74240 &lt; 0.000000000000000222\nORIGIN_hex1527  13.2289004509  0.0508045250   260.38823 &lt; 0.000000000000000222\nORIGIN_hex1534  12.8421236474  0.0976092220   131.56670 &lt; 0.000000000000000222\nORIGIN_hex1536  17.6502405473  0.0043319781  4074.40665 &lt; 0.000000000000000222\nORIGIN_hex1537  17.0823287163  0.0063963491  2670.63732 &lt; 0.000000000000000222\nORIGIN_hex1550  15.8716940680  0.0092334049  1718.94272 &lt; 0.000000000000000222\nORIGIN_hex1551  14.2026280183  0.0204818097   693.42642 &lt; 0.000000000000000222\nORIGIN_hex1552  14.0844128593  0.0223669835   629.69657 &lt; 0.000000000000000222\nORIGIN_hex1553  16.2799807486  0.0058547949  2780.62357 &lt; 0.000000000000000222\nORIGIN_hex1554  14.9810347760  0.0140560740  1065.80506 &lt; 0.000000000000000222\nORIGIN_hex1555  15.0560447856  0.0132079483  1139.92306 &lt; 0.000000000000000222\nORIGIN_hex1562  14.6667781469  0.0599109375   244.80969 &lt; 0.000000000000000222\nORIGIN_hex1563  17.2061172882  0.0076437817  2250.99538 &lt; 0.000000000000000222\nORIGIN_hex1564  18.1772385778  0.0034637708  5247.81795 &lt; 0.000000000000000222\nORIGIN_hex1565  16.8269475498  0.0096834636  1737.69926 &lt; 0.000000000000000222\nORIGIN_hex1576  15.2616146150  0.0270663967   563.85838 &lt; 0.000000000000000222\nORIGIN_hex1578  14.9295656221  0.0108680202  1373.71530 &lt; 0.000000000000000222\nORIGIN_hex1579  17.1761427057  0.0039772198  4318.63044 &lt; 0.000000000000000222\nORIGIN_hex1581  16.3649896567  0.0065289593  2506.52347 &lt; 0.000000000000000222\nORIGIN_hex1588  14.1493230364  0.1031648483   137.15256 &lt; 0.000000000000000222\nORIGIN_hex1590  18.2834053788  0.0037283257  4903.91850 &lt; 0.000000000000000222\nORIGIN_hex1591  18.0724750833  0.0039881720  4531.51844 &lt; 0.000000000000000222\nORIGIN_hex1592  14.5499173471  0.0286453864   507.93231 &lt; 0.000000000000000222\nORIGIN_hex1604  15.2424686575  0.0103172884  1477.37158 &lt; 0.000000000000000222\nORIGIN_hex1605  16.5316221225  0.0050422607  3278.61310 &lt; 0.000000000000000222\nORIGIN_hex1606  16.1611268731  0.0060264377  2681.70481 &lt; 0.000000000000000222\nORIGIN_hex1607  15.2515030203  0.0093854967  1625.00755 &lt; 0.000000000000000222\nORIGIN_hex1616  14.2353226094  0.0474473015   300.02386 &lt; 0.000000000000000222\nORIGIN_hex1617  16.6832546145  0.0097297683  1714.66103 &lt; 0.000000000000000222\nORIGIN_hex1618  18.1635747335  0.0036226051  5013.95377 &lt; 0.000000000000000222\nORIGIN_hex1619  17.0039375955  0.0066866888  2542.95333 &lt; 0.000000000000000222\nORIGIN_hex1620  14.6315922137  0.0276381797   529.39782 &lt; 0.000000000000000222\nORIGIN_hex1630  14.6750197434  0.0145405377  1009.24877 &lt; 0.000000000000000222\nORIGIN_hex1631  15.4758440324  0.0082060470  1885.90730 &lt; 0.000000000000000222\nORIGIN_hex1632  16.7122018726  0.0049847821  3352.64440 &lt; 0.000000000000000222\nORIGIN_hex1633  15.4473159873  0.0094145838  1640.78585 &lt; 0.000000000000000222\nORIGIN_hex1634  16.6188078895  0.0056382430  2947.51535 &lt; 0.000000000000000222\nORIGIN_hex1635  14.7552139865  0.0144567347  1020.64638 &lt; 0.000000000000000222\nORIGIN_hex1642  13.5178502689  0.1037147991   130.33675 &lt; 0.000000000000000222\nORIGIN_hex1644  17.1821395168  0.0064895891  2647.64675 &lt; 0.000000000000000222\nORIGIN_hex1645  17.8525332680  0.0041698088  4281.37936 &lt; 0.000000000000000222\nORIGIN_hex1646  15.9484301643  0.0119234460  1337.56887 &lt; 0.000000000000000222\nORIGIN_hex1647  10.8150051184  0.4472182333    24.18284 &lt; 0.000000000000000222\nORIGIN_hex1658  17.0071459064  0.0056405538  3015.15533 &lt; 0.000000000000000222\nORIGIN_hex1659  16.6150763607  0.0048287653  3440.85400 &lt; 0.000000000000000222\nORIGIN_hex1660  15.6075608814  0.0126901726  1229.89351 &lt; 0.000000000000000222\nORIGIN_hex1661  15.0954453924  0.0117225587  1287.72615 &lt; 0.000000000000000222\nORIGIN_hex1662  16.4474011230  0.0061698732  2665.75999 &lt; 0.000000000000000222\nORIGIN_hex1669  12.1169208756  0.1889928452    64.11312 &lt; 0.000000000000000222\nORIGIN_hex1670  13.7150977439  0.0916974424   149.56903 &lt; 0.000000000000000222\nORIGIN_hex1672  17.3307891953  0.0089956202  1926.58081 &lt; 0.000000000000000222\nORIGIN_hex1673  16.7704659228  0.0139029076  1206.25602 &lt; 0.000000000000000222\nORIGIN_hex1674  16.0284126497  0.0125268627  1279.52330 &lt; 0.000000000000000222\nORIGIN_hex1684  17.0458143504  0.0045066166  3782.39726 &lt; 0.000000000000000222\nORIGIN_hex1685  15.9198161587  0.0069009929  2306.88776 &lt; 0.000000000000000222\nORIGIN_hex1686  16.4917967075  0.0050925088  3238.44244 &lt; 0.000000000000000222\nORIGIN_hex1687  13.9505627837  0.0208545588   668.94548 &lt; 0.000000000000000222\nORIGIN_hex1688  14.0785956959  0.0187449006   751.06270 &lt; 0.000000000000000222\nORIGIN_hex1689  14.1052053239  0.0476203691   296.20109 &lt; 0.000000000000000222\nORIGIN_hex1695  11.6528071689  0.2236157953    52.11084 &lt; 0.000000000000000222\nORIGIN_hex1699  16.8772982027  0.0061785145  2731.61101 &lt; 0.000000000000000222\nORIGIN_hex1700  13.1512478850  0.0588608641   223.42941 &lt; 0.000000000000000222\nORIGIN_hex1701  14.8159615480  0.0335055110   442.19476 &lt; 0.000000000000000222\nORIGIN_hex1712  15.8651340099  0.0074783725  2121.46880 &lt; 0.000000000000000222\nORIGIN_hex1713  17.0195003834  0.0039819895  4274.11989 &lt; 0.000000000000000222\nORIGIN_hex1714  14.3865545603  0.0185302253   776.38314 &lt; 0.000000000000000222\nORIGIN_hex1716  16.0421925145  0.0068345574  2347.21745 &lt; 0.000000000000000222\nORIGIN_hex1723  14.5142133369  0.0464176320   312.68750 &lt; 0.000000000000000222\nORIGIN_hex1726  14.6186954034  0.0299605739   487.93109 &lt; 0.000000000000000222\nORIGIN_hex1727  18.0013390321  0.0043462545  4141.80513 &lt; 0.000000000000000222\nORIGIN_hex1728  15.5692393645  0.0134816648  1154.84545 &lt; 0.000000000000000222\nORIGIN_hex1738  15.3577839707  0.0087656713  1752.03739 &lt; 0.000000000000000222\nORIGIN_hex1739  16.4047734284  0.0049604137  3307.13814 &lt; 0.000000000000000222\nORIGIN_hex1740  15.1376759983  0.0097315398  1555.52731 &lt; 0.000000000000000222\nORIGIN_hex1741  15.4533842835  0.0091801626  1683.34539 &lt; 0.000000000000000222\nORIGIN_hex1743  14.1148841078  0.0338554516   416.91614 &lt; 0.000000000000000222\nORIGIN_hex1744  12.3246575402  0.1361006131    90.55549 &lt; 0.000000000000000222\nORIGIN_hex1748  11.5047682970  0.1767886828    65.07638 &lt; 0.000000000000000222\nORIGIN_hex1749  17.3367573251  0.0060323170  2873.97984 &lt; 0.000000000000000222\nORIGIN_hex1753  17.9709880299  0.0039854111  4509.19304 &lt; 0.000000000000000222\nORIGIN_hex1754  16.8445618909  0.0064916460  2594.80598 &lt; 0.000000000000000222\nORIGIN_hex1765  17.2921164682  0.0043801248  3947.85934 &lt; 0.000000000000000222\nORIGIN_hex1766  17.0783823172  0.0042904978  3980.51304 &lt; 0.000000000000000222\nORIGIN_hex1767  16.6808517641  0.0044547501  3744.50898 &lt; 0.000000000000000222\nORIGIN_hex1768  13.1908893449  0.0314102502   419.95493 &lt; 0.000000000000000222\nORIGIN_hex1770  14.7563170643  0.0156686517   941.77325 &lt; 0.000000000000000222\nORIGIN_hex1771  13.4300348642  0.0478864024   280.45612 &lt; 0.000000000000000222\nORIGIN_hex1776  12.0984811335  0.1240514271    97.52795 &lt; 0.000000000000000222\nORIGIN_hex1777  16.0982092644  0.0110586816  1455.70782 &lt; 0.000000000000000222\nORIGIN_hex1778  13.8908261487  0.0341694587   406.52754 &lt; 0.000000000000000222\nORIGIN_hex1780  15.6109278117  0.0151218435  1032.34291 &lt; 0.000000000000000222\nORIGIN_hex1781  17.7440718216  0.0044330192  4002.70580 &lt; 0.000000000000000222\nORIGIN_hex1792  16.4070806381  0.0054482887  3011.41911 &lt; 0.000000000000000222\nORIGIN_hex1793  17.0804168165  0.0037206976  4590.64898 &lt; 0.000000000000000222\nORIGIN_hex1794  15.9341821825  0.0062861725  2534.79876 &lt; 0.000000000000000222\nORIGIN_hex1795  15.0319021064  0.0100134209  1501.17550 &lt; 0.000000000000000222\nORIGIN_hex1796  15.7880255407  0.0091174142  1731.63412 &lt; 0.000000000000000222\nORIGIN_hex1798  11.3380481150  0.1561881727    72.59223 &lt; 0.000000000000000222\nORIGIN_hex1800  14.1103351779  0.0352868648   399.87500 &lt; 0.000000000000000222\nORIGIN_hex1802  12.9594646301  0.0615823728   210.44114 &lt; 0.000000000000000222\nORIGIN_hex1804  11.9793903849  0.1170601421   102.33535 &lt; 0.000000000000000222\nORIGIN_hex1805  15.6476714094  0.0112543571  1390.36565 &lt; 0.000000000000000222\nORIGIN_hex1806  16.7632433585  0.0062621092  2676.93245 &lt; 0.000000000000000222\nORIGIN_hex1807  16.9722307288  0.0055615367  3051.71601 &lt; 0.000000000000000222\nORIGIN_hex1808  14.5166394898  0.0317229481   457.60689 &lt; 0.000000000000000222\nORIGIN_hex1820  16.5457801215  0.0048830964  3388.37878 &lt; 0.000000000000000222\nORIGIN_hex1821  17.2199638748  0.0035547762  4844.17664 &lt; 0.000000000000000222\nORIGIN_hex1822  14.9958178973  0.0094006298  1595.19289 &lt; 0.000000000000000222\nORIGIN_hex1823  15.0539966587  0.0118119844  1274.46805 &lt; 0.000000000000000222\nORIGIN_hex1824  16.3616792980  0.0058876121  2779.00092 &lt; 0.000000000000000222\nORIGIN_hex1827  16.3450659301  0.0070054984  2333.17675 &lt; 0.000000000000000222\nORIGIN_hex1828  16.0985630895  0.0092467453  1740.99779 &lt; 0.000000000000000222\nORIGIN_hex1829  15.8157707214  0.0109451188  1445.00676 &lt; 0.000000000000000222\nORIGIN_hex1831  15.1737319660  0.0177825576   853.29300 &lt; 0.000000000000000222\nORIGIN_hex1833  17.8135632958  0.0038688247  4604.38628 &lt; 0.000000000000000222\nORIGIN_hex1834  16.6107044034  0.0068767790  2415.47742 &lt; 0.000000000000000222\nORIGIN_hex1835  17.1842223951  0.0058120416  2956.65852 &lt; 0.000000000000000222\nORIGIN_hex1846  12.5589201646  0.0504225995   249.07324 &lt; 0.000000000000000222\nORIGIN_hex1847  16.1949668067  0.0091336222  1773.11546 &lt; 0.000000000000000222\nORIGIN_hex1848  15.8408814406  0.0060047146  2638.07399 &lt; 0.000000000000000222\nORIGIN_hex1849  16.5541099265  0.0043821407  3777.63090 &lt; 0.000000000000000222\nORIGIN_hex1850  15.6536608209  0.0095454475  1639.90854 &lt; 0.000000000000000222\nORIGIN_hex1852  12.9255974438  0.0471904332   273.90292 &lt; 0.000000000000000222\nORIGIN_hex1853  16.0288193792  0.0079103493  2026.30994 &lt; 0.000000000000000222\nORIGIN_hex1854  15.6398018483  0.0097072982  1611.13850 &lt; 0.000000000000000222\nORIGIN_hex1855  15.4651707439  0.0112268045  1377.52205 &lt; 0.000000000000000222\nORIGIN_hex1856  13.9452202415  0.0605590572   230.27473 &lt; 0.000000000000000222\nORIGIN_hex1857  12.5803336145  0.1154932609   108.92699 &lt; 0.000000000000000222\nORIGIN_hex1858  16.1749345488  0.0082547893  1959.46061 &lt; 0.000000000000000222\nORIGIN_hex1859  16.7481229939  0.0060419748  2771.96175 &lt; 0.000000000000000222\nORIGIN_hex1860  17.2373321562  0.0047314155  3643.16598 &lt; 0.000000000000000222\nORIGIN_hex1861  18.2325536020  0.0044856930  4064.60131 &lt; 0.000000000000000222\nORIGIN_hex1862  14.1901478359  0.0408127723   347.68890 &lt; 0.000000000000000222\nORIGIN_hex1874  15.9948452992  0.0057406634  2786.23639 &lt; 0.000000000000000222\nORIGIN_hex1875  16.0338273484  0.0051812208  3094.60416 &lt; 0.000000000000000222\nORIGIN_hex1876  13.7010603768  0.0192093935   713.24794 &lt; 0.000000000000000222\nORIGIN_hex1877  15.8083548245  0.0067797548  2331.70008 &lt; 0.000000000000000222\nORIGIN_hex1878  14.9680768515  0.0128123434  1168.25443 &lt; 0.000000000000000222\nORIGIN_hex1879  14.4123918802  0.0153784835   937.17900 &lt; 0.000000000000000222\nORIGIN_hex1882  16.8572182932  0.0052662304  3201.00283 &lt; 0.000000000000000222\nORIGIN_hex1883  16.4708619366  0.0068249876  2413.31750 &lt; 0.000000000000000222\nORIGIN_hex1884  15.5436386621  0.0142402877  1091.52560 &lt; 0.000000000000000222\nORIGIN_hex1886  18.1866464249  0.0034136816  5327.57542 &lt; 0.000000000000000222\nORIGIN_hex1887  18.0424690739  0.0033022973  5463.61142 &lt; 0.000000000000000222\nORIGIN_hex1888  16.5869571649  0.0071102697  2332.81688 &lt; 0.000000000000000222\nORIGIN_hex1889  14.0263361312  0.0559398090   250.73979 &lt; 0.000000000000000222\nORIGIN_hex1890  14.9597165106  0.0407417996   367.18350 &lt; 0.000000000000000222\nORIGIN_hex1900  14.6117475250  0.0143486165  1018.33843 &lt; 0.000000000000000222\nORIGIN_hex1901  16.1227550346  0.0049043798  3287.41975 &lt; 0.000000000000000222\nORIGIN_hex1902  15.4603634332  0.0076479585  2021.50199 &lt; 0.000000000000000222\nORIGIN_hex1903  14.8662429358  0.0146679859  1013.51631 &lt; 0.000000000000000222\nORIGIN_hex1904  15.1572222016  0.0097862306  1548.83150 &lt; 0.000000000000000222\nORIGIN_hex1905  15.2938139207  0.0084736559  1804.86606 &lt; 0.000000000000000222\nORIGIN_hex1906  15.5816786459  0.0076024767  2049.55296 &lt; 0.000000000000000222\nORIGIN_hex1907  16.3446193909  0.0058622333  2788.12160 &lt; 0.000000000000000222\nORIGIN_hex1908  16.1744567277  0.0081022106  1996.30170 &lt; 0.000000000000000222\nORIGIN_hex1909  17.3633053119  0.0046807137  3709.54227 &lt; 0.000000000000000222\nORIGIN_hex1910  15.9830260389  0.0090671171  1762.74619 &lt; 0.000000000000000222\nORIGIN_hex1912  15.4154241198  0.0154883065   995.29436 &lt; 0.000000000000000222\nORIGIN_hex1913  16.4453477382  0.0069885078  2353.19874 &lt; 0.000000000000000222\nORIGIN_hex1914  17.8692936329  0.0040239121  4440.77635 &lt; 0.000000000000000222\nORIGIN_hex1916  16.9995691176  0.0156517829  1086.11072 &lt; 0.000000000000000222\nORIGIN_hex1928  15.8676629478  0.0058754730  2700.66138 &lt; 0.000000000000000222\nORIGIN_hex1929  15.4530668329  0.0066136143  2336.55398 &lt; 0.000000000000000222\nORIGIN_hex1930  15.3132148599  0.0068643290  2230.83931 &lt; 0.000000000000000222\nORIGIN_hex1931  15.3012078874  0.0078619215  1946.24277 &lt; 0.000000000000000222\nORIGIN_hex1932  15.8949428602  0.0065078577  2442.42323 &lt; 0.000000000000000222\nORIGIN_hex1933  16.1178766045  0.0084242247  1913.27715 &lt; 0.000000000000000222\nORIGIN_hex1934  14.5713522146  0.0128681887  1132.35457 &lt; 0.000000000000000222\nORIGIN_hex1935  16.7558316444  0.0050791182  3298.96471 &lt; 0.000000000000000222\nORIGIN_hex1936  17.2081764433  0.0048363782  3558.07089 &lt; 0.000000000000000222\nORIGIN_hex1937  16.7153097443  0.0059871623  2791.85845 &lt; 0.000000000000000222\nORIGIN_hex1938  13.5988317950  0.0407140172   334.00860 &lt; 0.000000000000000222\nORIGIN_hex1940  18.0886279502  0.0037755513  4790.98990 &lt; 0.000000000000000222\nORIGIN_hex1941  17.1312680063  0.0052968138  3234.25907 &lt; 0.000000000000000222\nORIGIN_hex1942  16.5154572241  0.0095797133  1724.00328 &lt; 0.000000000000000222\nORIGIN_hex1954  14.8322633713  0.0141177328  1050.61228 &lt; 0.000000000000000222\nORIGIN_hex1955  15.9690590789  0.0051921269  3075.62961 &lt; 0.000000000000000222\nORIGIN_hex1956  14.7273426385  0.0093817912  1569.77940 &lt; 0.000000000000000222\nORIGIN_hex1958  16.2840343151  0.0052267476  3115.51953 &lt; 0.000000000000000222\nORIGIN_hex1959  16.8748027510  0.0039893347  4229.97920 &lt; 0.000000000000000222\nORIGIN_hex1960  16.9424412652  0.0052193177  3246.10272 &lt; 0.000000000000000222\nORIGIN_hex1961  16.5416808626  0.0052219634  3167.71291 &lt; 0.000000000000000222\nORIGIN_hex1962  17.1556182360  0.0041954916  4089.06029 &lt; 0.000000000000000222\nORIGIN_hex1963  16.2336832364  0.0061342645  2646.39439 &lt; 0.000000000000000222\nORIGIN_hex1964  15.5220847529  0.0103085368  1505.75052 &lt; 0.000000000000000222\nORIGIN_hex1967  18.3336266087  0.0036191702  5065.69892 &lt; 0.000000000000000222\nORIGIN_hex1968  17.9080793907  0.0044805584  3996.84099 &lt; 0.000000000000000222\nORIGIN_hex1982  15.0686562576  0.0084746317  1778.08981 &lt; 0.000000000000000222\nORIGIN_hex1983  15.1964985178  0.0068732348  2210.96748 &lt; 0.000000000000000222\nORIGIN_hex1984  16.2297218825  0.0043600053  3722.40879 &lt; 0.000000000000000222\nORIGIN_hex1985  15.1623286552  0.0086113140  1760.74507 &lt; 0.000000000000000222\nORIGIN_hex1986  16.3198590842  0.0059213954  2756.08331 &lt; 0.000000000000000222\nORIGIN_hex1987  17.6441611244  0.0031253437  5645.51061 &lt; 0.000000000000000222\nORIGIN_hex1988  16.0712306216  0.0059569515  2697.89515 &lt; 0.000000000000000222\nORIGIN_hex1989  17.0394367710  0.0041762822  4080.04921 &lt; 0.000000000000000222\nORIGIN_hex1990  18.2073537656  0.0029202240  6234.91675 &lt; 0.000000000000000222\nORIGIN_hex1991  17.9677197689  0.0035176801  5107.83219 &lt; 0.000000000000000222\nORIGIN_hex1992  15.3186258641  0.0146603658  1044.90066 &lt; 0.000000000000000222\nORIGIN_hex1994  16.6380987488  0.0083496679  1992.66592 &lt; 0.000000000000000222\nORIGIN_hex1995  18.3844760181  0.0038264139  4804.62290 &lt; 0.000000000000000222\nORIGIN_hex2009  14.9742610630  0.0088691994  1688.34416 &lt; 0.000000000000000222\nORIGIN_hex2010  15.6330356564  0.0054990258  2842.87368 &lt; 0.000000000000000222\nORIGIN_hex2011  16.4606767373  0.0041395234  3976.46664 &lt; 0.000000000000000222\nORIGIN_hex2012  15.6825705581  0.0066622770  2353.93552 &lt; 0.000000000000000222\nORIGIN_hex2013  16.2505378830  0.0052851707  3074.74227 &lt; 0.000000000000000222\nORIGIN_hex2014  16.6626850896  0.0045490541  3662.89011 &lt; 0.000000000000000222\nORIGIN_hex2015  16.5054915804  0.0054086330  3051.69374 &lt; 0.000000000000000222\nORIGIN_hex2016  17.0467244358  0.0044973117  3790.42537 &lt; 0.000000000000000222\nORIGIN_hex2017  16.8775602973  0.0052835470  3194.36174 &lt; 0.000000000000000222\nORIGIN_hex2021  16.8132235281  0.0073286638  2294.17314 &lt; 0.000000000000000222\nORIGIN_hex2036  11.0464600232  0.1015533198   108.77498 &lt; 0.000000000000000222\nORIGIN_hex2037  13.6439417597  0.0152754964   893.19138 &lt; 0.000000000000000222\nORIGIN_hex2038  15.9955777206  0.0047939778  3336.59821 &lt; 0.000000000000000222\nORIGIN_hex2039  17.0522432393  0.0051525601  3309.47001 &lt; 0.000000000000000222\nORIGIN_hex2040  17.0692218187  0.0039254511  4348.34660 &lt; 0.000000000000000222\nORIGIN_hex2041  17.9108175651  0.0037328492  4798.16264 &lt; 0.000000000000000222\nORIGIN_hex2042  16.8513166366  0.0045975242  3665.30242 &lt; 0.000000000000000222\nORIGIN_hex2043  15.3691293147  0.0091909682  1672.19916 &lt; 0.000000000000000222\nORIGIN_hex2044  17.5857207036  0.0037913623  4638.36466 &lt; 0.000000000000000222\nORIGIN_hex2046  16.1870476142  0.0096613341  1675.44642 &lt; 0.000000000000000222\nORIGIN_hex2049  17.0546393841  0.0076396452  2232.38630 &lt; 0.000000000000000222\nORIGIN_hex2063  13.5517679643  0.0218418235   620.45039 &lt; 0.000000000000000222\nORIGIN_hex2064  14.4364684445  0.0115083910  1254.42979 &lt; 0.000000000000000222\nORIGIN_hex2065  15.7131005080  0.0055663285  2822.88417 &lt; 0.000000000000000222\nORIGIN_hex2066  15.9025085794  0.0056884413  2795.58278 &lt; 0.000000000000000222\nORIGIN_hex2067  16.8680436242  0.0039938874  4223.46502 &lt; 0.000000000000000222\nORIGIN_hex2068  15.8479247054  0.0073158533  2166.24420 &lt; 0.000000000000000222\nORIGIN_hex2069  15.0243895634  0.0109867540  1367.50032 &lt; 0.000000000000000222\nORIGIN_hex2070  17.6458246394  0.0041935214  4207.87762 &lt; 0.000000000000000222\nORIGIN_hex2071  16.4851994578  0.0070641522  2333.64161 &lt; 0.000000000000000222\nORIGIN_hex2072  15.2704325891  0.0220868680   691.38062 &lt; 0.000000000000000222\nORIGIN_hex2074  11.5927576765  0.1644130077    70.50998 &lt; 0.000000000000000222\nORIGIN_hex2089  13.2010968701  0.0864090928   152.77439 &lt; 0.000000000000000222\nORIGIN_hex2090   9.7783950972  1.0000015672     9.77838 &lt; 0.000000000000000222\nORIGIN_hex2091  13.1918694788  0.0245944946   536.37490 &lt; 0.000000000000000222\nORIGIN_hex2092  14.8791472623  0.0092621132  1606.45276 &lt; 0.000000000000000222\nORIGIN_hex2093  16.1176791859  0.0050735955  3176.77653 &lt; 0.000000000000000222\nORIGIN_hex2094  16.7892794699  0.0043840193  3829.65456 &lt; 0.000000000000000222\nORIGIN_hex2095  17.6010936724  0.0051671881  3406.31953 &lt; 0.000000000000000222\nORIGIN_hex2096  14.6001752650  0.0147934847   986.93280 &lt; 0.000000000000000222\nORIGIN_hex2097  14.7205587478  0.0249034418   591.10539 &lt; 0.000000000000000222\nORIGIN_hex2098  15.8574304225  0.0082754210  1916.20831 &lt; 0.000000000000000222\nORIGIN_hex2100  14.3088127754  0.0310571325   460.72550 &lt; 0.000000000000000222\nORIGIN_hex2101  13.3450979686  0.0624166350   213.80675 &lt; 0.000000000000000222\nORIGIN_hex2102  13.4765428026  0.0502964177   267.94240 &lt; 0.000000000000000222\nORIGIN_hex2116  14.0745296656  0.0593710373   237.06053 &lt; 0.000000000000000222\nORIGIN_hex2117  10.5992841309  1.0000018264    10.59926 &lt; 0.000000000000000222\nORIGIN_hex2119  16.2262121680  0.0049998736  3245.32447 &lt; 0.000000000000000222\nORIGIN_hex2120  15.7491084991  0.0064321841  2448.48535 &lt; 0.000000000000000222\nORIGIN_hex2121  16.2377621206  0.0059370627  2734.98241 &lt; 0.000000000000000222\nORIGIN_hex2122  13.5057228347  0.0457881321   294.96121 &lt; 0.000000000000000222\nORIGIN_hex2123  16.3235187437  0.0057162064  2855.65593 &lt; 0.000000000000000222\nORIGIN_hex2124  16.0062956837  0.0091656946  1746.32654 &lt; 0.000000000000000222\nORIGIN_hex2125  15.9467046959  0.0093405492  1707.25558 &lt; 0.000000000000000222\nORIGIN_hex2126  15.3419242847  0.0137526518  1115.56117 &lt; 0.000000000000000222\nORIGIN_hex2129  12.7010866053  0.0958069075   132.56963 &lt; 0.000000000000000222\nORIGIN_hex2146  16.0583723817  0.0146733518  1094.39020 &lt; 0.000000000000000222\nORIGIN_hex2147  16.2976585675  0.0047416059  3437.16010 &lt; 0.000000000000000222\nORIGIN_hex2148  17.1372517791  0.0037153341  4612.57359 &lt; 0.000000000000000222\nORIGIN_hex2149  16.6913937395  0.0054544014  3060.16965 &lt; 0.000000000000000222\nORIGIN_hex2150  15.3287829617  0.0095001549  1613.52980 &lt; 0.000000000000000222\nORIGIN_hex2151  15.8304145772  0.0075961585  2084.00266 &lt; 0.000000000000000222\nORIGIN_hex2152  17.0895825014  0.0048468750  3525.89709 &lt; 0.000000000000000222\nORIGIN_hex2153  14.0942913470  0.0291927446   482.80117 &lt; 0.000000000000000222\nORIGIN_hex2154  16.8254823860  0.0064414371  2612.06965 &lt; 0.000000000000000222\nORIGIN_hex2155  13.8249418577  0.0402824787   343.19988 &lt; 0.000000000000000222\nORIGIN_hex2171  11.7962805498  0.2582075834    45.68526 &lt; 0.000000000000000222\nORIGIN_hex2172  16.8615698054  0.0108198023  1558.39907 &lt; 0.000000000000000222\nORIGIN_hex2174  15.4078863834  0.0100906493  1526.94697 &lt; 0.000000000000000222\nORIGIN_hex2175  17.0942177698  0.0041672230  4102.06460 &lt; 0.000000000000000222\nORIGIN_hex2176  16.7400973741  0.0048286506  3466.82721 &lt; 0.000000000000000222\nORIGIN_hex2177  17.4675665382  0.0035046164  4984.15935 &lt; 0.000000000000000222\nORIGIN_hex2178  16.2392250455  0.0060657533  2677.19842 &lt; 0.000000000000000222\nORIGIN_hex2179  16.7332480434  0.0057723914  2898.84157 &lt; 0.000000000000000222\nORIGIN_hex2180  17.1702946644  0.0049591699  3462.33240 &lt; 0.000000000000000222\nORIGIN_hex2181  17.3742573531  0.0050260217  3456.86077 &lt; 0.000000000000000222\nORIGIN_hex2182  14.4018227883  0.0502404961   286.65765 &lt; 0.000000000000000222\nORIGIN_hex2200  15.5261506137  0.0180262820   861.30632 &lt; 0.000000000000000222\nORIGIN_hex2201  16.8878003575  0.0040251901  4195.52861 &lt; 0.000000000000000222\nORIGIN_hex2202  14.8194903073  0.0164488399   900.94441 &lt; 0.000000000000000222\nORIGIN_hex2203  16.8006825451  0.0054461247  3084.88760 &lt; 0.000000000000000222\nORIGIN_hex2204  16.0807621816  0.0059929667  2683.27240 &lt; 0.000000000000000222\nORIGIN_hex2205  16.1145250046  0.0063797808  2525.87438 &lt; 0.000000000000000222\nORIGIN_hex2206  17.6095653619  0.0036174782  4867.91190 &lt; 0.000000000000000222\nORIGIN_hex2207  16.4673970702  0.0062498396  2634.85113 &lt; 0.000000000000000222\nORIGIN_hex2208  17.7926968850  0.0042338429  4202.49346 &lt; 0.000000000000000222\nORIGIN_hex2209  12.8273984068  0.0718272037   178.58691 &lt; 0.000000000000000222\nORIGIN_hex2227  15.2668987532  0.0093285123  1636.58451 &lt; 0.000000000000000222\nORIGIN_hex2228  16.8314004945  0.0047206351  3565.49489 &lt; 0.000000000000000222\nORIGIN_hex2229  16.0053686469  0.0061425147  2605.67037 &lt; 0.000000000000000222\nORIGIN_hex2230  16.1687553295  0.0088681901  1823.23058 &lt; 0.000000000000000222\nORIGIN_hex2231  16.6457829415  0.0048544097  3429.00248 &lt; 0.000000000000000222\nORIGIN_hex2233  17.7678468443  0.0034841458  5099.62782 &lt; 0.000000000000000222\nORIGIN_hex2234  13.6683199052  0.0422044353   323.85980 &lt; 0.000000000000000222\nORIGIN_hex2235  14.6186814679  0.0324419202   450.61086 &lt; 0.000000000000000222\nORIGIN_hex2254  15.2820005932  0.0162719630   939.16147 &lt; 0.000000000000000222\nORIGIN_hex2255  16.7013477539  0.0046399779  3599.44554 &lt; 0.000000000000000222\nORIGIN_hex2256  16.0169900926  0.0058989732  2715.21663 &lt; 0.000000000000000222\nORIGIN_hex2257  15.3299757945  0.0110971602  1381.43232 &lt; 0.000000000000000222\nORIGIN_hex2258  16.0188805378  0.0069801202  2294.92903 &lt; 0.000000000000000222\nORIGIN_hex2259  15.1392988429  0.0118583742  1276.67576 &lt; 0.000000000000000222\nORIGIN_hex2260  17.5032225674  0.0041091940  4259.52693 &lt; 0.000000000000000222\nORIGIN_hex2261  17.5961127432  0.0042190480  4170.63579 &lt; 0.000000000000000222\nORIGIN_hex2262  17.0186986400  0.0057153906  2977.69648 &lt; 0.000000000000000222\nORIGIN_hex2281  16.7214082594  0.0051088296  3273.04093 &lt; 0.000000000000000222\nORIGIN_hex2282  16.5728498246  0.0048488106  3417.92065 &lt; 0.000000000000000222\nORIGIN_hex2283  16.6459570592  0.0046392283  3588.08753 &lt; 0.000000000000000222\nORIGIN_hex2284  15.5001903169  0.0083173744  1863.59174 &lt; 0.000000000000000222\nORIGIN_hex2285  17.4143761343  0.0042225283  4124.15851 &lt; 0.000000000000000222\nORIGIN_hex2286  15.8176260621  0.0077260000  2047.32412 &lt; 0.000000000000000222\nORIGIN_hex2287  17.8501614139  0.0035583336  5016.43844 &lt; 0.000000000000000222\nORIGIN_hex2288  16.4630351632  0.0080112794  2054.98203 &lt; 0.000000000000000222\nORIGIN_hex2308  16.0671296253  0.0084384545  1904.03701 &lt; 0.000000000000000222\nORIGIN_hex2309  16.8145229807  0.0042512768  3955.17015 &lt; 0.000000000000000222\nORIGIN_hex2310  16.2708324125  0.0050575411  3217.14289 &lt; 0.000000000000000222\nORIGIN_hex2311  16.4975303470  0.0049783176  3313.87666 &lt; 0.000000000000000222\nORIGIN_hex2312  14.1060449865  0.0206180190   684.16102 &lt; 0.000000000000000222\nORIGIN_hex2313  16.6627125607  0.0053147366  3135.19066 &lt; 0.000000000000000222\nORIGIN_hex2314  17.5009895887  0.0034927474  5010.66571 &lt; 0.000000000000000222\nORIGIN_hex2315  16.6841346992  0.0059818923  2789.10650 &lt; 0.000000000000000222\nORIGIN_hex2316  17.9416893736  0.0039477476  4544.79145 &lt; 0.000000000000000222\nORIGIN_hex2317  17.6541737539  0.0092598506  1906.52901 &lt; 0.000000000000000222\nORIGIN_hex2335  15.2228344939  0.0099573711  1528.80055 &lt; 0.000000000000000222\nORIGIN_hex2336  16.7908554394  0.0041355136  4060.16204 &lt; 0.000000000000000222\nORIGIN_hex2337  15.5771538256  0.0069960921  2226.55070 &lt; 0.000000000000000222\nORIGIN_hex2338  13.6124797807  0.0269357056   505.36934 &lt; 0.000000000000000222\nORIGIN_hex2339  16.9769074118  0.0047626844  3564.56698 &lt; 0.000000000000000222\nORIGIN_hex2340  17.5523434726  0.0035379925  4961.10247 &lt; 0.000000000000000222\nORIGIN_hex2341  17.2323388083  0.0041421307  4160.25960 &lt; 0.000000000000000222\nORIGIN_hex2342  17.0850120907  0.0045722191  3736.70018 &lt; 0.000000000000000222\nORIGIN_hex2343  17.2619996021  0.0050336445  3429.32431 &lt; 0.000000000000000222\nORIGIN_hex2362  15.6368333189  0.0103573301  1509.73592 &lt; 0.000000000000000222\nORIGIN_hex2363  16.1115383867  0.0062231513  2588.96783 &lt; 0.000000000000000222\nORIGIN_hex2364  12.8162934270  0.0343986208   372.58161 &lt; 0.000000000000000222\nORIGIN_hex2365  15.0614880859  0.0100811786  1494.02055 &lt; 0.000000000000000222\nORIGIN_hex2366  11.1549525918  0.1825856796    61.09435 &lt; 0.000000000000000222\nORIGIN_hex2367  16.6043857749  0.0058271371  2849.49290 &lt; 0.000000000000000222\nORIGIN_hex2368  17.1551919716  0.0042662490  4021.14174 &lt; 0.000000000000000222\nORIGIN_hex2369  17.1333010424  0.0044426225  3856.57371 &lt; 0.000000000000000222\nORIGIN_hex2370  17.7000221855  0.0036523354  4846.22042 &lt; 0.000000000000000222\nORIGIN_hex2371  17.7839671861  0.0041537471  4281.42754 &lt; 0.000000000000000222\nORIGIN_hex2389  15.9544653080  0.0069424641  2298.09836 &lt; 0.000000000000000222\nORIGIN_hex2390  16.7073707049  0.0045296667  3688.43271 &lt; 0.000000000000000222\nORIGIN_hex2391  16.3594618689  0.0058876517  2778.60559 &lt; 0.000000000000000222\nORIGIN_hex2392  15.3710018756  0.0160416125   958.19556 &lt; 0.000000000000000222\nORIGIN_hex2393  15.2499393937  0.0264947885   575.58261 &lt; 0.000000000000000222\nORIGIN_hex2394  15.7371569571  0.0093081216  1690.69094 &lt; 0.000000000000000222\nORIGIN_hex2395  17.2855785780  0.0042456718  4071.34122 &lt; 0.000000000000000222\nORIGIN_hex2396  17.5907322885  0.0037658595  4671.10692 &lt; 0.000000000000000222\nORIGIN_hex2397  16.5225725449  0.0067022609  2465.22373 &lt; 0.000000000000000222\nORIGIN_hex2398  17.1360349326  0.0073941112  2317.52465 &lt; 0.000000000000000222\nORIGIN_hex2416  16.0646384264  0.0074173322  2165.82431 &lt; 0.000000000000000222\nORIGIN_hex2417  16.4372441493  0.0071006895  2314.88001 &lt; 0.000000000000000222\nORIGIN_hex2418  16.2201159593  0.0057022601  2844.50650 &lt; 0.000000000000000222\nORIGIN_hex2419  15.9791052514  0.0066176386  2414.62344 &lt; 0.000000000000000222\nORIGIN_hex2420  15.3319274843  0.0242885651   631.24056 &lt; 0.000000000000000222\nORIGIN_hex2422  16.0001977983  0.0125933051  1270.53205 &lt; 0.000000000000000222\nORIGIN_hex2423  16.8925844880  0.0054110709  3121.85604 &lt; 0.000000000000000222\nORIGIN_hex2424  18.2479676929  0.0031789339  5740.27905 &lt; 0.000000000000000222\nORIGIN_hex2425  17.7567513950  0.0038825613  4573.46326 &lt; 0.000000000000000222\nORIGIN_hex2426  17.1580763862  0.0090972759  1886.06749 &lt; 0.000000000000000222\nORIGIN_hex2443  17.0205559927  0.0043945189  3873.13300 &lt; 0.000000000000000222\nORIGIN_hex2444  17.1338375036  0.0038518663  4448.19110 &lt; 0.000000000000000222\nORIGIN_hex2445  17.2704535828  0.0036795764  4693.59830 &lt; 0.000000000000000222\nORIGIN_hex2448  14.3106592717  0.0312013057   458.65578 &lt; 0.000000000000000222\nORIGIN_hex2449  17.2909034002  0.0056883533  3039.70276 &lt; 0.000000000000000222\nORIGIN_hex2450  17.2898537241  0.0046893474  3687.04900 &lt; 0.000000000000000222\nORIGIN_hex2451  18.4004367171  0.0030970043  5941.36628 &lt; 0.000000000000000222\nORIGIN_hex2452  13.8559503550  0.0350627036   395.17633 &lt; 0.000000000000000222\nORIGIN_hex2471  16.3491031740  0.0056468185  2895.27688 &lt; 0.000000000000000222\nORIGIN_hex2472  15.6866895534  0.0151758956  1033.65824 &lt; 0.000000000000000222\nORIGIN_hex2473  17.0205296649  0.0049154848  3462.63496 &lt; 0.000000000000000222\nORIGIN_hex2476  14.9280920966  0.0249038668   599.42868 &lt; 0.000000000000000222\nORIGIN_hex2478  16.9524548047  0.0056726407  2988.45913 &lt; 0.000000000000000222\nORIGIN_hex2479  15.6374714616  0.0114871440  1361.30195 &lt; 0.000000000000000222\nORIGIN_hex2480  14.6009489096  0.0358857610   406.87305 &lt; 0.000000000000000222\nORIGIN_hex2497  17.2475029464  0.0041023106  4204.33868 &lt; 0.000000000000000222\nORIGIN_hex2498  15.4996608430  0.0090754686  1707.86341 &lt; 0.000000000000000222\nORIGIN_hex2499  17.3202011631  0.0046274433  3742.93106 &lt; 0.000000000000000222\nORIGIN_hex2500  13.2108453141  0.0430836773   306.63226 &lt; 0.000000000000000222\nORIGIN_hex2503  11.8434267553  0.1525124995    77.65545 &lt; 0.000000000000000222\nORIGIN_hex2504  15.8771741110  0.0136713611  1161.34553 &lt; 0.000000000000000222\nORIGIN_hex2505  17.1056942501  0.0056347079  3035.77301 &lt; 0.000000000000000222\nORIGIN_hex2525  15.9121030422  0.0077150619  2062.47250 &lt; 0.000000000000000222\nORIGIN_hex2526  16.8530902174  0.0049346014  3415.28910 &lt; 0.000000000000000222\nORIGIN_hex2527  17.1899687015  0.0043310900  3968.97059 &lt; 0.000000000000000222\nORIGIN_hex2531  11.2484178635  0.4472188434    25.15193 &lt; 0.000000000000000222\nORIGIN_hex2532  17.1734508373  0.0058979408  2911.77063 &lt; 0.000000000000000222\nORIGIN_hex2533  17.6522720128  0.0066489371  2654.90133 &lt; 0.000000000000000222\nORIGIN_hex2551  16.2059525734  0.0072130021  2246.76943 &lt; 0.000000000000000222\nORIGIN_hex2552  15.3813930894  0.0122670732  1253.87636 &lt; 0.000000000000000222\nORIGIN_hex2553  16.6994498055  0.0077821203  2145.87403 &lt; 0.000000000000000222\nORIGIN_hex2554  15.5871402334  0.0104013505  1498.56889 &lt; 0.000000000000000222\nORIGIN_hex2557  15.0365464083  0.0255846997   587.71635 &lt; 0.000000000000000222\nORIGIN_hex2559  16.9434660775  0.0076236606  2222.48432 &lt; 0.000000000000000222\nORIGIN_hex2579  16.2121783792  0.0069186399  2343.26090 &lt; 0.000000000000000222\nORIGIN_hex2580  17.0779548188  0.0043857764  3893.94111 &lt; 0.000000000000000222\nORIGIN_hex2581  16.7671725536  0.0059726654  2807.31826 &lt; 0.000000000000000222\nORIGIN_hex2584  13.4894108372  0.0622923682   216.54998 &lt; 0.000000000000000222\nORIGIN_hex2605  16.2874561167  0.0093552524  1740.99591 &lt; 0.000000000000000222\nORIGIN_hex2606  15.8243353178  0.0145586533  1086.93675 &lt; 0.000000000000000222\nORIGIN_hex2607  17.6886169612  0.0036561097  4838.09801 &lt; 0.000000000000000222\nORIGIN_hex2608  16.2425616619  0.0079058924  2054.48807 &lt; 0.000000000000000222\nORIGIN_hex2609  15.6032070216  0.0142714008  1093.31993 &lt; 0.000000000000000222\nORIGIN_hex2610  14.9348288298  0.0238811954   625.38029 &lt; 0.000000000000000222\nORIGIN_hex2611  13.2459825346  0.0825043271   160.54894 &lt; 0.000000000000000222\nORIGIN_hex2633  16.2667238857  0.0068099321  2388.67635 &lt; 0.000000000000000222\nORIGIN_hex2634  17.8564475041  0.0032086243  5565.14127 &lt; 0.000000000000000222\nORIGIN_hex2635  17.1729740700  0.0050536519  3398.13157 &lt; 0.000000000000000222\nORIGIN_hex2636  17.3539115150  0.0045625599  3803.54710 &lt; 0.000000000000000222\nORIGIN_hex2637  15.9735653470  0.0097736717  1634.34643 &lt; 0.000000000000000222\nORIGIN_hex2638  15.8623298594  0.0103508540  1532.46580 &lt; 0.000000000000000222\nORIGIN_hex2660  15.7322691797  0.0081811960  1922.97913 &lt; 0.000000000000000222\nORIGIN_hex2661  17.1459183703  0.0041521345  4129.42270 &lt; 0.000000000000000222\nORIGIN_hex2662  16.2526716693  0.0063709592  2551.05569 &lt; 0.000000000000000222\nORIGIN_hex2663  17.8792847258  0.0037691651  4743.56631 &lt; 0.000000000000000222\nORIGIN_hex2664  16.4909270659  0.0066690783  2472.74457 &lt; 0.000000000000000222\nORIGIN_hex2665  17.2499732949  0.0050480264  3417.17179 &lt; 0.000000000000000222\nORIGIN_hex2687  16.2857549433  0.0071065218  2291.66326 &lt; 0.000000000000000222\nORIGIN_hex2688  17.1314855241  0.0041614477  4116.71296 &lt; 0.000000000000000222\nORIGIN_hex2689  17.2042078323  0.0043515028  3953.62443 &lt; 0.000000000000000222\nORIGIN_hex2690  16.5481077419  0.0056416238  2933.21716 &lt; 0.000000000000000222\nORIGIN_hex2691  17.9236206878  0.0035396498  5063.67067 &lt; 0.000000000000000222\nORIGIN_hex2693  17.6222241704  0.0046109143  3821.85031 &lt; 0.000000000000000222\nORIGIN_hex2714  16.6948865125  0.0054627973  3056.10583 &lt; 0.000000000000000222\nORIGIN_hex2715  17.4942744090  0.0043912339  3983.90858 &lt; 0.000000000000000222\nORIGIN_hex2716  13.4240585092  0.0258614638   519.07574 &lt; 0.000000000000000222\nORIGIN_hex2717  16.7356469362  0.0047075466  3555.06772 &lt; 0.000000000000000222\nORIGIN_hex2718  17.0403137496  0.0056103140  3037.31906 &lt; 0.000000000000000222\nORIGIN_hex2719  17.7470326441  0.0043093044  4118.30567 &lt; 0.000000000000000222\nORIGIN_hex2742  17.3744207353  0.0041675865  4168.94059 &lt; 0.000000000000000222\nORIGIN_hex2743  16.1230301639  0.0106745414  1510.41900 &lt; 0.000000000000000222\nORIGIN_hex2744  17.2425195750  0.0037837110  4557.03923 &lt; 0.000000000000000222\nORIGIN_hex2745  17.2725363958  0.0039722265  4348.32621 &lt; 0.000000000000000222\nORIGIN_hex2746  16.1606560527  0.0101694797  1589.13303 &lt; 0.000000000000000222\nORIGIN_hex2747  16.9859025078  0.0063559257  2672.45141 &lt; 0.000000000000000222\nORIGIN_hex2768  17.0697518131  0.0052338807  3261.39490 &lt; 0.000000000000000222\nORIGIN_hex2769  17.5557690900  0.0039884418  4401.66107 &lt; 0.000000000000000222\nORIGIN_hex2770  15.6246563414  0.0082958405  1883.43260 &lt; 0.000000000000000222\nORIGIN_hex2771  17.9771628872  0.0031073948  5785.28440 &lt; 0.000000000000000222\nORIGIN_hex2772  16.4208304044  0.0085502874  1920.50041 &lt; 0.000000000000000222\nORIGIN_hex2773  17.1044941396  0.0050453342  3390.16081 &lt; 0.000000000000000222\nORIGIN_hex2795  13.5090544628  0.0985601494   137.06406 &lt; 0.000000000000000222\nORIGIN_hex2796  14.7468421273  0.0212268206   694.72685 &lt; 0.000000000000000222\nORIGIN_hex2797  15.8568425542  0.0078093432  2030.49631 &lt; 0.000000000000000222\nORIGIN_hex2798  16.3672904552  0.0056532072  2895.22213 &lt; 0.000000000000000222\nORIGIN_hex2799  17.0089310330  0.0044905326  3787.73131 &lt; 0.000000000000000222\nORIGIN_hex2800  17.0427544706  0.0051841637  3287.46460 &lt; 0.000000000000000222\nORIGIN_hex2801  14.9765461024  0.0269667488   555.37085 &lt; 0.000000000000000222\nORIGIN_hex2822  14.7158635607  0.0177932983   827.04529 &lt; 0.000000000000000222\nORIGIN_hex2823  15.1335300561  0.0121030819  1250.38649 &lt; 0.000000000000000222\nORIGIN_hex2824  16.8635918156  0.0056046565  3008.85379 &lt; 0.000000000000000222\nORIGIN_hex2825  17.4450595854  0.0037252956  4682.86581 &lt; 0.000000000000000222\nORIGIN_hex2826  17.3823299925  0.0051742740  3359.37566 &lt; 0.000000000000000222\nORIGIN_hex2827  17.4818189274  0.0041911253  4171.15159 &lt; 0.000000000000000222\nORIGIN_hex2850  16.0822304293  0.0107468821  1496.45547 &lt; 0.000000000000000222\nORIGIN_hex2851  14.5781690079  0.0159200533   915.71107 &lt; 0.000000000000000222\nORIGIN_hex2852  17.0880700847  0.0047222466  3618.63146 &lt; 0.000000000000000222\nORIGIN_hex2853  17.8032769294  0.0034042358  5229.74255 &lt; 0.000000000000000222\nORIGIN_hex2854  17.7035393463  0.0040416911  4380.23063 &lt; 0.000000000000000222\nORIGIN_hex2877  15.1296973669  0.0171480366   882.29910 &lt; 0.000000000000000222\nORIGIN_hex2878  16.5257430178  0.0060125002  2748.56425 &lt; 0.000000000000000222\nORIGIN_hex2879  17.2881670937  0.0057116727  3026.81334 &lt; 0.000000000000000222\nORIGIN_hex2880  16.9707275911  0.0049876065  3402.57947 &lt; 0.000000000000000222\nORIGIN_hex2881  17.5867596855  0.0045340413  3878.82655 &lt; 0.000000000000000222\nORIGIN_hex2905  16.6352374382  0.0073934341  2250.00146 &lt; 0.000000000000000222\nORIGIN_hex2906  16.2287268983  0.0095937500  1691.59367 &lt; 0.000000000000000222\nORIGIN_hex2907  17.0231874462  0.0047597130  3576.51550 &lt; 0.000000000000000222\nORIGIN_hex2908  17.3036661334  0.0049111967  3523.30953 &lt; 0.000000000000000222\nORIGIN_hex2909  16.8143153474  0.0199914578   841.07500 &lt; 0.000000000000000222\nORIGIN_hex2931  13.3611215059  0.0434828727   307.27320 &lt; 0.000000000000000222\nORIGIN_hex2932  12.2307805882  0.0695341837   175.89594 &lt; 0.000000000000000222\nORIGIN_hex2933  15.5426108415  0.0124840373  1244.99875 &lt; 0.000000000000000222\nORIGIN_hex2934  16.6308266570  0.0059920957  2775.46080 &lt; 0.000000000000000222\nORIGIN_hex2959  14.0438879995  0.0287974686   487.67786 &lt; 0.000000000000000222\nORIGIN_hex2960  16.4357804140  0.0180023718   912.97861 &lt; 0.000000000000000222\nORIGIN_hex2961  16.5958259456  0.0076583860  2167.01352 &lt; 0.000000000000000222\nORIGIN_hex2962  16.4051436234  0.0082917078  1978.49996 &lt; 0.000000000000000222\nORIGIN_hex2963  13.4556037311  0.0735514505   182.94138 &lt; 0.000000000000000222\nORIGIN_hex2987  14.6391247318  0.0396746468   368.97933 &lt; 0.000000000000000222\nORIGIN_hex2988  14.7384879346  0.0216931673   679.40692 &lt; 0.000000000000000222\nORIGIN_hex2989  14.7770617241  0.0192213169   768.78508 &lt; 0.000000000000000222\nORIGIN_hex2990  14.6473494786  0.0377949384   387.54791 &lt; 0.000000000000000222\nORIGIN_hex3015  16.5120597528  0.0186554735   885.10537 &lt; 0.000000000000000222\nORIGIN_hex3016  15.7041113153  0.0156977734  1000.40374 &lt; 0.000000000000000222\nORIGIN_hex3017  13.7922573932  0.0353699366   389.94295 &lt; 0.000000000000000222\nORIGIN_hex3040  16.9099890407  0.0088311129  1914.81971 &lt; 0.000000000000000222\nORIGIN_hex3043  14.9850598276  0.0171914889   871.65573 &lt; 0.000000000000000222\nORIGIN_hex3044  15.0999098386  0.0185086265   815.83092 &lt; 0.000000000000000222\nORIGIN_hex3068  15.4360851928  0.0188737725   817.85903 &lt; 0.000000000000000222\nORIGIN_hex3070  13.1769719820  0.0674529719   195.35050 &lt; 0.000000000000000222\nORIGIN_hex3072  14.0507787450  0.0487235943   288.37730 &lt; 0.000000000000000222\nORIGIN_hex3092  17.6419491058  0.0146893659  1201.00141 &lt; 0.000000000000000222\nORIGIN_hex3098  16.5528705960  0.0087734250  1886.70567 &lt; 0.000000000000000222\nORIGIN_hex3123  18.0039695526  0.0062314686  2889.20167 &lt; 0.000000000000000222\nORIGIN_hex3126  12.1644456219  0.2672689452    45.51388 &lt; 0.000000000000000222\nORIGIN_hex3151  16.1076190097  0.0144454402  1115.06598 &lt; 0.000000000000000222\nORIGIN_hex3152  12.1560309103  0.1147262281   105.95686 &lt; 0.000000000000000222\nORIGIN_hex3173  17.6211916693  0.0163062590  1080.63975 &lt; 0.000000000000000222\nORIGIN_hex3178  15.6906462701  0.0198832462   789.13906 &lt; 0.000000000000000222\nORIGIN_hex3179  15.2496939945  0.0218284434   698.61573 &lt; 0.000000000000000222\nORIGIN_hex3205  15.5563549298  0.0297270447   523.30647 &lt; 0.000000000000000222\nORIGIN_hex3206  17.0473063799  0.0100181368  1701.64440 &lt; 0.000000000000000222\nORIGIN_hex3232  15.2033118056  0.0426084229   356.81470 &lt; 0.000000000000000222\nORIGIN_hex3233  14.6718734593  0.0574819470   255.24315 &lt; 0.000000000000000222\nORIGIN_hex3308  16.5205235738  0.0384733559   429.40168 &lt; 0.000000000000000222\nd_biz_count      0.0909976747  0.0001815626   501.19170 &lt; 0.000000000000000222\nd_school_count   0.3345523258  0.0006533345   512.06899 &lt; 0.000000000000000222\nd_fin_count      0.3967295545  0.0002024874  1959.28028 &lt; 0.000000000000000222\nd_busstop_count  0.1774197134  0.0004526890   391.92405 &lt; 0.000000000000000222\nd_mrtlrt_count   0.0133830959  0.0008712696    15.36045 &lt; 0.000000000000000222\ndist            -1.4944107983  0.0002602126 -5743.03770 &lt; 0.000000000000000222\n                   \nORIGIN_hex118   ***\nORIGIN_hex146   ***\nORIGIN_hex174   ***\nORIGIN_hex175   ***\nORIGIN_hex200   ***\nORIGIN_hex201   ***\nORIGIN_hex202   ***\nORIGIN_hex203   ***\nORIGIN_hex227   ***\nORIGIN_hex228   ***\nORIGIN_hex229   ***\nORIGIN_hex230   ***\nORIGIN_hex231   ***\nORIGIN_hex254   ***\nORIGIN_hex255   ***\nORIGIN_hex256   ***\nORIGIN_hex257   ***\nORIGIN_hex258   ***\nORIGIN_hex259   ***\nORIGIN_hex281   ***\nORIGIN_hex282   ***\nORIGIN_hex284   ***\nORIGIN_hex285   ***\nORIGIN_hex286   ***\nORIGIN_hex312   ***\nORIGIN_hex313   ***\nORIGIN_hex314   ***\nORIGIN_hex336   ***\nORIGIN_hex338   ***\nORIGIN_hex339   ***\nORIGIN_hex340   ***\nORIGIN_hex366   ***\nORIGIN_hex367   ***\nORIGIN_hex391   ***\nORIGIN_hex392   ***\nORIGIN_hex393   ***\nORIGIN_hex394   ***\nORIGIN_hex419   ***\nORIGIN_hex420   ***\nORIGIN_hex421   ***\nORIGIN_hex445   ***\nORIGIN_hex446   ***\nORIGIN_hex447   ***\nORIGIN_hex472   ***\nORIGIN_hex473   ***\nORIGIN_hex474   ***\nORIGIN_hex499   ***\nORIGIN_hex500   ***\nORIGIN_hex526   ***\nORIGIN_hex527   ***\nORIGIN_hex528   ***\nORIGIN_hex552   ***\nORIGIN_hex553   ***\nORIGIN_hex554   ***\nORIGIN_hex555   ***\nORIGIN_hex581   ***\nORIGIN_hex582   ***\nORIGIN_hex607   ***\nORIGIN_hex608   ***\nORIGIN_hex609   ***\nORIGIN_hex610   ***\nORIGIN_hex611   ***\nORIGIN_hex634   ***\nORIGIN_hex635   ***\nORIGIN_hex636   ***\nORIGIN_hex638   ***\nORIGIN_hex661   ***\nORIGIN_hex662   ***\nORIGIN_hex663   ***\nORIGIN_hex664   ***\nORIGIN_hex665   ***\nORIGIN_hex689   ***\nORIGIN_hex690   ***\nORIGIN_hex692   ***\nORIGIN_hex693   ***\nORIGIN_hex715   ***\nORIGIN_hex716   ***\nORIGIN_hex717   ***\nORIGIN_hex718   ***\nORIGIN_hex719   ***\nORIGIN_hex720   ***\nORIGIN_hex743   ***\nORIGIN_hex744   ***\nORIGIN_hex745   ***\nORIGIN_hex746   ***\nORIGIN_hex747   ***\nORIGIN_hex748   ***\nORIGIN_hex769   ***\nORIGIN_hex770   ***\nORIGIN_hex771   ***\nORIGIN_hex772   ***\nORIGIN_hex773   ***\nORIGIN_hex774   ***\nORIGIN_hex775   ***\nORIGIN_hex776   ***\nORIGIN_hex777   ***\nORIGIN_hex797   ***\nORIGIN_hex798   ***\nORIGIN_hex799   ***\nORIGIN_hex800   ***\nORIGIN_hex802   ***\nORIGIN_hex803   ***\nORIGIN_hex805   ***\nORIGIN_hex806   ***\nORIGIN_hex823   ***\nORIGIN_hex824   ***\nORIGIN_hex825   ***\nORIGIN_hex826   ***\nORIGIN_hex827   ***\nORIGIN_hex832   ***\nORIGIN_hex833   ***\nORIGIN_hex851   ***\nORIGIN_hex852   ***\nORIGIN_hex853   ***\nORIGIN_hex854   ***\nORIGIN_hex856   ***\nORIGIN_hex861   ***\nORIGIN_hex862   ***\nORIGIN_hex878   ***\nORIGIN_hex879   ***\nORIGIN_hex880   ***\nORIGIN_hex881   ***\nORIGIN_hex888   ***\nORIGIN_hex889   ***\nORIGIN_hex905   ***\nORIGIN_hex906   ***\nORIGIN_hex907   ***\nORIGIN_hex908   ***\nORIGIN_hex910   ***\nORIGIN_hex932   ***\nORIGIN_hex933   ***\nORIGIN_hex934   ***\nORIGIN_hex935   ***\nORIGIN_hex937   ***\nORIGIN_hex959   ***\nORIGIN_hex960   ***\nORIGIN_hex961   ***\nORIGIN_hex962   ***\nORIGIN_hex986   ***\nORIGIN_hex987   ***\nORIGIN_hex988   ***\nORIGIN_hex989   ***\nORIGIN_hex991   ***\nORIGIN_hex1013  ***\nORIGIN_hex1014  ***\nORIGIN_hex1015  ***\nORIGIN_hex1016  ***\nORIGIN_hex1042  ***\nORIGIN_hex1043  ***\nORIGIN_hex1045  ***\nORIGIN_hex1067  ***\nORIGIN_hex1068  ***\nORIGIN_hex1069  ***\nORIGIN_hex1070  ***\nORIGIN_hex1078  ***\nORIGIN_hex1093  ***\nORIGIN_hex1094  ***\nORIGIN_hex1095  ***\nORIGIN_hex1096  ***\nORIGIN_hex1097  ***\nORIGIN_hex1099  ***\nORIGIN_hex1100  ***\nORIGIN_hex1122  ***\nORIGIN_hex1123  ***\nORIGIN_hex1124  ***\nORIGIN_hex1125  ***\nORIGIN_hex1126  ***\nORIGIN_hex1127  ***\nORIGIN_hex1128  ***\nORIGIN_hex1132  ***\nORIGIN_hex1147  ***\nORIGIN_hex1148  ***\nORIGIN_hex1149  ***\nORIGIN_hex1150  ***\nORIGIN_hex1151  ***\nORIGIN_hex1152  ***\nORIGIN_hex1153  ***\nORIGIN_hex1154  ***\nORIGIN_hex1155  ***\nORIGIN_hex1158  ***\nORIGIN_hex1174  ***\nORIGIN_hex1175  ***\nORIGIN_hex1176  ***\nORIGIN_hex1177  ***\nORIGIN_hex1178  ***\nORIGIN_hex1179  ***\nORIGIN_hex1180  ***\nORIGIN_hex1181  ***\nORIGIN_hex1182  ***\nORIGIN_hex1183  ***\nORIGIN_hex1185  ***\nORIGIN_hex1201  ***\nORIGIN_hex1202  ***\nORIGIN_hex1203  ***\nORIGIN_hex1205  ***\nORIGIN_hex1206  ***\nORIGIN_hex1207  ***\nORIGIN_hex1209  ***\nORIGIN_hex1210  ***\nORIGIN_hex1211  ***\nORIGIN_hex1212  ***\nORIGIN_hex1228  ***\nORIGIN_hex1229  ***\nORIGIN_hex1230  ***\nORIGIN_hex1231  ***\nORIGIN_hex1232  ***\nORIGIN_hex1233  ***\nORIGIN_hex1235  ***\nORIGIN_hex1236  ***\nORIGIN_hex1237  ***\nORIGIN_hex1238  ***\nORIGIN_hex1239  ***\nORIGIN_hex1240  ***\nORIGIN_hex1255  ***\nORIGIN_hex1256  ***\nORIGIN_hex1257  ***\nORIGIN_hex1258  ***\nORIGIN_hex1259  ***\nORIGIN_hex1261  ***\nORIGIN_hex1262  ***\nORIGIN_hex1263  ***\nORIGIN_hex1264  ***\nORIGIN_hex1265  ***\nORIGIN_hex1266  ***\nORIGIN_hex1282  ***\nORIGIN_hex1283  ***\nORIGIN_hex1284  ***\nORIGIN_hex1285  ***\nORIGIN_hex1286  ***\nORIGIN_hex1287  ***\nORIGIN_hex1288  ***\nORIGIN_hex1289  ***\nORIGIN_hex1293  ***\nORIGIN_hex1308  ***\nORIGIN_hex1309  ***\nORIGIN_hex1310  ***\nORIGIN_hex1311  ***\nORIGIN_hex1312  ***\nORIGIN_hex1314  ***\nORIGIN_hex1315  ***\nORIGIN_hex1316  ***\nORIGIN_hex1318  ***\nORIGIN_hex1319  ***\nORIGIN_hex1320  ***\nORIGIN_hex1335  ***\nORIGIN_hex1336  ***\nORIGIN_hex1337  ***\nORIGIN_hex1338  ***\nORIGIN_hex1339  ***\nORIGIN_hex1340  ***\nORIGIN_hex1341  ***\nORIGIN_hex1342  ***\nORIGIN_hex1343  ***\nORIGIN_hex1347  ***\nORIGIN_hex1348  ***\nORIGIN_hex1362  ***\nORIGIN_hex1363  ***\nORIGIN_hex1364  ***\nORIGIN_hex1366  ***\nORIGIN_hex1367  ***\nORIGIN_hex1368  ***\nORIGIN_hex1369  ***\nORIGIN_hex1370  ***\nORIGIN_hex1372  ***\nORIGIN_hex1374  ***\nORIGIN_hex1375  ***\nORIGIN_hex1389  ***\nORIGIN_hex1390  ***\nORIGIN_hex1391  ***\nORIGIN_hex1392  ***\nORIGIN_hex1394  ***\nORIGIN_hex1396  ***\nORIGIN_hex1397  ***\nORIGIN_hex1401  ***\nORIGIN_hex1402  ***\nORIGIN_hex1416  ***\nORIGIN_hex1417  ***\nORIGIN_hex1418  ***\nORIGIN_hex1419  ***\nORIGIN_hex1420  ***\nORIGIN_hex1422  ***\nORIGIN_hex1423  ***\nORIGIN_hex1426  ***\nORIGIN_hex1428  ***\nORIGIN_hex1429  ***\nORIGIN_hex1443  ***\nORIGIN_hex1444  ***\nORIGIN_hex1445  ***\nORIGIN_hex1446  ***\nORIGIN_hex1447  ***\nORIGIN_hex1455  ***\nORIGIN_hex1456  ***\nORIGIN_hex1457  ***\nORIGIN_hex1469  ***\nORIGIN_hex1470  ***\nORIGIN_hex1471  ***\nORIGIN_hex1472  ***\nORIGIN_hex1480  ***\nORIGIN_hex1482  ***\nORIGIN_hex1483  ***\nORIGIN_hex1496  ***\nORIGIN_hex1497  ***\nORIGIN_hex1498  ***\nORIGIN_hex1499  ***\nORIGIN_hex1500  ***\nORIGIN_hex1501  ***\nORIGIN_hex1507  ***\nORIGIN_hex1509  ***\nORIGIN_hex1510  ***\nORIGIN_hex1511  ***\nORIGIN_hex1523  ***\nORIGIN_hex1524  ***\nORIGIN_hex1525  ***\nORIGIN_hex1526  ***\nORIGIN_hex1527  ***\nORIGIN_hex1534  ***\nORIGIN_hex1536  ***\nORIGIN_hex1537  ***\nORIGIN_hex1550  ***\nORIGIN_hex1551  ***\nORIGIN_hex1552  ***\nORIGIN_hex1553  ***\nORIGIN_hex1554  ***\nORIGIN_hex1555  ***\nORIGIN_hex1562  ***\nORIGIN_hex1563  ***\nORIGIN_hex1564  ***\nORIGIN_hex1565  ***\nORIGIN_hex1576  ***\nORIGIN_hex1578  ***\nORIGIN_hex1579  ***\nORIGIN_hex1581  ***\nORIGIN_hex1588  ***\nORIGIN_hex1590  ***\nORIGIN_hex1591  ***\nORIGIN_hex1592  ***\nORIGIN_hex1604  ***\nORIGIN_hex1605  ***\nORIGIN_hex1606  ***\nORIGIN_hex1607  ***\nORIGIN_hex1616  ***\nORIGIN_hex1617  ***\nORIGIN_hex1618  ***\nORIGIN_hex1619  ***\nORIGIN_hex1620  ***\nORIGIN_hex1630  ***\nORIGIN_hex1631  ***\nORIGIN_hex1632  ***\nORIGIN_hex1633  ***\nORIGIN_hex1634  ***\nORIGIN_hex1635  ***\nORIGIN_hex1642  ***\nORIGIN_hex1644  ***\nORIGIN_hex1645  ***\nORIGIN_hex1646  ***\nORIGIN_hex1647  ***\nORIGIN_hex1658  ***\nORIGIN_hex1659  ***\nORIGIN_hex1660  ***\nORIGIN_hex1661  ***\nORIGIN_hex1662  ***\nORIGIN_hex1669  ***\nORIGIN_hex1670  ***\nORIGIN_hex1672  ***\nORIGIN_hex1673  ***\nORIGIN_hex1674  ***\nORIGIN_hex1684  ***\nORIGIN_hex1685  ***\nORIGIN_hex1686  ***\nORIGIN_hex1687  ***\nORIGIN_hex1688  ***\nORIGIN_hex1689  ***\nORIGIN_hex1695  ***\nORIGIN_hex1699  ***\nORIGIN_hex1700  ***\nORIGIN_hex1701  ***\nORIGIN_hex1712  ***\nORIGIN_hex1713  ***\nORIGIN_hex1714  ***\nORIGIN_hex1716  ***\nORIGIN_hex1723  ***\nORIGIN_hex1726  ***\nORIGIN_hex1727  ***\nORIGIN_hex1728  ***\nORIGIN_hex1738  ***\nORIGIN_hex1739  ***\nORIGIN_hex1740  ***\nORIGIN_hex1741  ***\nORIGIN_hex1743  ***\nORIGIN_hex1744  ***\nORIGIN_hex1748  ***\nORIGIN_hex1749  ***\nORIGIN_hex1753  ***\nORIGIN_hex1754  ***\nORIGIN_hex1765  ***\nORIGIN_hex1766  ***\nORIGIN_hex1767  ***\nORIGIN_hex1768  ***\nORIGIN_hex1770  ***\nORIGIN_hex1771  ***\nORIGIN_hex1776  ***\nORIGIN_hex1777  ***\nORIGIN_hex1778  ***\nORIGIN_hex1780  ***\nORIGIN_hex1781  ***\nORIGIN_hex1792  ***\nORIGIN_hex1793  ***\nORIGIN_hex1794  ***\nORIGIN_hex1795  ***\nORIGIN_hex1796  ***\nORIGIN_hex1798  ***\nORIGIN_hex1800  ***\nORIGIN_hex1802  ***\nORIGIN_hex1804  ***\nORIGIN_hex1805  ***\nORIGIN_hex1806  ***\nORIGIN_hex1807  ***\nORIGIN_hex1808  ***\nORIGIN_hex1820  ***\nORIGIN_hex1821  ***\nORIGIN_hex1822  ***\nORIGIN_hex1823  ***\nORIGIN_hex1824  ***\nORIGIN_hex1827  ***\nORIGIN_hex1828  ***\nORIGIN_hex1829  ***\nORIGIN_hex1831  ***\nORIGIN_hex1833  ***\nORIGIN_hex1834  ***\nORIGIN_hex1835  ***\nORIGIN_hex1846  ***\nORIGIN_hex1847  ***\nORIGIN_hex1848  ***\nORIGIN_hex1849  ***\nORIGIN_hex1850  ***\nORIGIN_hex1852  ***\nORIGIN_hex1853  ***\nORIGIN_hex1854  ***\nORIGIN_hex1855  ***\nORIGIN_hex1856  ***\nORIGIN_hex1857  ***\nORIGIN_hex1858  ***\nORIGIN_hex1859  ***\nORIGIN_hex1860  ***\nORIGIN_hex1861  ***\nORIGIN_hex1862  ***\nORIGIN_hex1874  ***\nORIGIN_hex1875  ***\nORIGIN_hex1876  ***\nORIGIN_hex1877  ***\nORIGIN_hex1878  ***\nORIGIN_hex1879  ***\nORIGIN_hex1882  ***\nORIGIN_hex1883  ***\nORIGIN_hex1884  ***\nORIGIN_hex1886  ***\nORIGIN_hex1887  ***\nORIGIN_hex1888  ***\nORIGIN_hex1889  ***\nORIGIN_hex1890  ***\nORIGIN_hex1900  ***\nORIGIN_hex1901  ***\nORIGIN_hex1902  ***\nORIGIN_hex1903  ***\nORIGIN_hex1904  ***\nORIGIN_hex1905  ***\nORIGIN_hex1906  ***\nORIGIN_hex1907  ***\nORIGIN_hex1908  ***\nORIGIN_hex1909  ***\nORIGIN_hex1910  ***\nORIGIN_hex1912  ***\nORIGIN_hex1913  ***\nORIGIN_hex1914  ***\nORIGIN_hex1916  ***\nORIGIN_hex1928  ***\nORIGIN_hex1929  ***\nORIGIN_hex1930  ***\nORIGIN_hex1931  ***\nORIGIN_hex1932  ***\nORIGIN_hex1933  ***\nORIGIN_hex1934  ***\nORIGIN_hex1935  ***\nORIGIN_hex1936  ***\nORIGIN_hex1937  ***\nORIGIN_hex1938  ***\nORIGIN_hex1940  ***\nORIGIN_hex1941  ***\nORIGIN_hex1942  ***\nORIGIN_hex1954  ***\nORIGIN_hex1955  ***\nORIGIN_hex1956  ***\nORIGIN_hex1958  ***\nORIGIN_hex1959  ***\nORIGIN_hex1960  ***\nORIGIN_hex1961  ***\nORIGIN_hex1962  ***\nORIGIN_hex1963  ***\nORIGIN_hex1964  ***\nORIGIN_hex1967  ***\nORIGIN_hex1968  ***\nORIGIN_hex1982  ***\nORIGIN_hex1983  ***\nORIGIN_hex1984  ***\nORIGIN_hex1985  ***\nORIGIN_hex1986  ***\nORIGIN_hex1987  ***\nORIGIN_hex1988  ***\nORIGIN_hex1989  ***\nORIGIN_hex1990  ***\nORIGIN_hex1991  ***\nORIGIN_hex1992  ***\nORIGIN_hex1994  ***\nORIGIN_hex1995  ***\nORIGIN_hex2009  ***\nORIGIN_hex2010  ***\nORIGIN_hex2011  ***\nORIGIN_hex2012  ***\nORIGIN_hex2013  ***\nORIGIN_hex2014  ***\nORIGIN_hex2015  ***\nORIGIN_hex2016  ***\nORIGIN_hex2017  ***\nORIGIN_hex2021  ***\nORIGIN_hex2036  ***\nORIGIN_hex2037  ***\nORIGIN_hex2038  ***\nORIGIN_hex2039  ***\nORIGIN_hex2040  ***\nORIGIN_hex2041  ***\nORIGIN_hex2042  ***\nORIGIN_hex2043  ***\nORIGIN_hex2044  ***\nORIGIN_hex2046  ***\nORIGIN_hex2049  ***\nORIGIN_hex2063  ***\nORIGIN_hex2064  ***\nORIGIN_hex2065  ***\nORIGIN_hex2066  ***\nORIGIN_hex2067  ***\nORIGIN_hex2068  ***\nORIGIN_hex2069  ***\nORIGIN_hex2070  ***\nORIGIN_hex2071  ***\nORIGIN_hex2072  ***\nORIGIN_hex2074  ***\nORIGIN_hex2089  ***\nORIGIN_hex2090  ***\nORIGIN_hex2091  ***\nORIGIN_hex2092  ***\nORIGIN_hex2093  ***\nORIGIN_hex2094  ***\nORIGIN_hex2095  ***\nORIGIN_hex2096  ***\nORIGIN_hex2097  ***\nORIGIN_hex2098  ***\nORIGIN_hex2100  ***\nORIGIN_hex2101  ***\nORIGIN_hex2102  ***\nORIGIN_hex2116  ***\nORIGIN_hex2117  ***\nORIGIN_hex2119  ***\nORIGIN_hex2120  ***\nORIGIN_hex2121  ***\nORIGIN_hex2122  ***\nORIGIN_hex2123  ***\nORIGIN_hex2124  ***\nORIGIN_hex2125  ***\nORIGIN_hex2126  ***\nORIGIN_hex2129  ***\nORIGIN_hex2146  ***\nORIGIN_hex2147  ***\nORIGIN_hex2148  ***\nORIGIN_hex2149  ***\nORIGIN_hex2150  ***\nORIGIN_hex2151  ***\nORIGIN_hex2152  ***\nORIGIN_hex2153  ***\nORIGIN_hex2154  ***\nORIGIN_hex2155  ***\nORIGIN_hex2171  ***\nORIGIN_hex2172  ***\nORIGIN_hex2174  ***\nORIGIN_hex2175  ***\nORIGIN_hex2176  ***\nORIGIN_hex2177  ***\nORIGIN_hex2178  ***\nORIGIN_hex2179  ***\nORIGIN_hex2180  ***\nORIGIN_hex2181  ***\nORIGIN_hex2182  ***\nORIGIN_hex2200  ***\nORIGIN_hex2201  ***\nORIGIN_hex2202  ***\nORIGIN_hex2203  ***\nORIGIN_hex2204  ***\nORIGIN_hex2205  ***\nORIGIN_hex2206  ***\nORIGIN_hex2207  ***\nORIGIN_hex2208  ***\nORIGIN_hex2209  ***\nORIGIN_hex2227  ***\nORIGIN_hex2228  ***\nORIGIN_hex2229  ***\nORIGIN_hex2230  ***\nORIGIN_hex2231  ***\nORIGIN_hex2233  ***\nORIGIN_hex2234  ***\nORIGIN_hex2235  ***\nORIGIN_hex2254  ***\nORIGIN_hex2255  ***\nORIGIN_hex2256  ***\nORIGIN_hex2257  ***\nORIGIN_hex2258  ***\nORIGIN_hex2259  ***\nORIGIN_hex2260  ***\nORIGIN_hex2261  ***\nORIGIN_hex2262  ***\nORIGIN_hex2281  ***\nORIGIN_hex2282  ***\nORIGIN_hex2283  ***\nORIGIN_hex2284  ***\nORIGIN_hex2285  ***\nORIGIN_hex2286  ***\nORIGIN_hex2287  ***\nORIGIN_hex2288  ***\nORIGIN_hex2308  ***\nORIGIN_hex2309  ***\nORIGIN_hex2310  ***\nORIGIN_hex2311  ***\nORIGIN_hex2312  ***\nORIGIN_hex2313  ***\nORIGIN_hex2314  ***\nORIGIN_hex2315  ***\nORIGIN_hex2316  ***\nORIGIN_hex2317  ***\nORIGIN_hex2335  ***\nORIGIN_hex2336  ***\nORIGIN_hex2337  ***\nORIGIN_hex2338  ***\nORIGIN_hex2339  ***\nORIGIN_hex2340  ***\nORIGIN_hex2341  ***\nORIGIN_hex2342  ***\nORIGIN_hex2343  ***\nORIGIN_hex2362  ***\nORIGIN_hex2363  ***\nORIGIN_hex2364  ***\nORIGIN_hex2365  ***\nORIGIN_hex2366  ***\nORIGIN_hex2367  ***\nORIGIN_hex2368  ***\nORIGIN_hex2369  ***\nORIGIN_hex2370  ***\nORIGIN_hex2371  ***\nORIGIN_hex2389  ***\nORIGIN_hex2390  ***\nORIGIN_hex2391  ***\nORIGIN_hex2392  ***\nORIGIN_hex2393  ***\nORIGIN_hex2394  ***\nORIGIN_hex2395  ***\nORIGIN_hex2396  ***\nORIGIN_hex2397  ***\nORIGIN_hex2398  ***\nORIGIN_hex2416  ***\nORIGIN_hex2417  ***\nORIGIN_hex2418  ***\nORIGIN_hex2419  ***\nORIGIN_hex2420  ***\nORIGIN_hex2422  ***\nORIGIN_hex2423  ***\nORIGIN_hex2424  ***\nORIGIN_hex2425  ***\nORIGIN_hex2426  ***\nORIGIN_hex2443  ***\nORIGIN_hex2444  ***\nORIGIN_hex2445  ***\nORIGIN_hex2448  ***\nORIGIN_hex2449  ***\nORIGIN_hex2450  ***\nORIGIN_hex2451  ***\nORIGIN_hex2452  ***\nORIGIN_hex2471  ***\nORIGIN_hex2472  ***\nORIGIN_hex2473  ***\nORIGIN_hex2476  ***\nORIGIN_hex2478  ***\nORIGIN_hex2479  ***\nORIGIN_hex2480  ***\nORIGIN_hex2497  ***\nORIGIN_hex2498  ***\nORIGIN_hex2499  ***\nORIGIN_hex2500  ***\nORIGIN_hex2503  ***\nORIGIN_hex2504  ***\nORIGIN_hex2505  ***\nORIGIN_hex2525  ***\nORIGIN_hex2526  ***\nORIGIN_hex2527  ***\nORIGIN_hex2531  ***\nORIGIN_hex2532  ***\nORIGIN_hex2533  ***\nORIGIN_hex2551  ***\nORIGIN_hex2552  ***\nORIGIN_hex2553  ***\nORIGIN_hex2554  ***\nORIGIN_hex2557  ***\nORIGIN_hex2559  ***\nORIGIN_hex2579  ***\nORIGIN_hex2580  ***\nORIGIN_hex2581  ***\nORIGIN_hex2584  ***\nORIGIN_hex2605  ***\nORIGIN_hex2606  ***\nORIGIN_hex2607  ***\nORIGIN_hex2608  ***\nORIGIN_hex2609  ***\nORIGIN_hex2610  ***\nORIGIN_hex2611  ***\nORIGIN_hex2633  ***\nORIGIN_hex2634  ***\nORIGIN_hex2635  ***\nORIGIN_hex2636  ***\nORIGIN_hex2637  ***\nORIGIN_hex2638  ***\nORIGIN_hex2660  ***\nORIGIN_hex2661  ***\nORIGIN_hex2662  ***\nORIGIN_hex2663  ***\nORIGIN_hex2664  ***\nORIGIN_hex2665  ***\nORIGIN_hex2687  ***\nORIGIN_hex2688  ***\nORIGIN_hex2689  ***\nORIGIN_hex2690  ***\nORIGIN_hex2691  ***\nORIGIN_hex2693  ***\nORIGIN_hex2714  ***\nORIGIN_hex2715  ***\nORIGIN_hex2716  ***\nORIGIN_hex2717  ***\nORIGIN_hex2718  ***\nORIGIN_hex2719  ***\nORIGIN_hex2742  ***\nORIGIN_hex2743  ***\nORIGIN_hex2744  ***\nORIGIN_hex2745  ***\nORIGIN_hex2746  ***\nORIGIN_hex2747  ***\nORIGIN_hex2768  ***\nORIGIN_hex2769  ***\nORIGIN_hex2770  ***\nORIGIN_hex2771  ***\nORIGIN_hex2772  ***\nORIGIN_hex2773  ***\nORIGIN_hex2795  ***\nORIGIN_hex2796  ***\nORIGIN_hex2797  ***\nORIGIN_hex2798  ***\nORIGIN_hex2799  ***\nORIGIN_hex2800  ***\nORIGIN_hex2801  ***\nORIGIN_hex2822  ***\nORIGIN_hex2823  ***\nORIGIN_hex2824  ***\nORIGIN_hex2825  ***\nORIGIN_hex2826  ***\nORIGIN_hex2827  ***\nORIGIN_hex2850  ***\nORIGIN_hex2851  ***\nORIGIN_hex2852  ***\nORIGIN_hex2853  ***\nORIGIN_hex2854  ***\nORIGIN_hex2877  ***\nORIGIN_hex2878  ***\nORIGIN_hex2879  ***\nORIGIN_hex2880  ***\nORIGIN_hex2881  ***\nORIGIN_hex2905  ***\nORIGIN_hex2906  ***\nORIGIN_hex2907  ***\nORIGIN_hex2908  ***\nORIGIN_hex2909  ***\nORIGIN_hex2931  ***\nORIGIN_hex2932  ***\nORIGIN_hex2933  ***\nORIGIN_hex2934  ***\nORIGIN_hex2959  ***\nORIGIN_hex2960  ***\nORIGIN_hex2961  ***\nORIGIN_hex2962  ***\nORIGIN_hex2963  ***\nORIGIN_hex2987  ***\nORIGIN_hex2988  ***\nORIGIN_hex2989  ***\nORIGIN_hex2990  ***\nORIGIN_hex3015  ***\nORIGIN_hex3016  ***\nORIGIN_hex3017  ***\nORIGIN_hex3040  ***\nORIGIN_hex3043  ***\nORIGIN_hex3044  ***\nORIGIN_hex3068  ***\nORIGIN_hex3070  ***\nORIGIN_hex3072  ***\nORIGIN_hex3092  ***\nORIGIN_hex3098  ***\nORIGIN_hex3123  ***\nORIGIN_hex3126  ***\nORIGIN_hex3151  ***\nORIGIN_hex3152  ***\nORIGIN_hex3173  ***\nORIGIN_hex3178  ***\nORIGIN_hex3179  ***\nORIGIN_hex3205  ***\nORIGIN_hex3206  ***\nORIGIN_hex3232  ***\nORIGIN_hex3233  ***\nORIGIN_hex3308  ***\nd_biz_count     ***\nd_school_count  ***\nd_fin_count     ***\nd_busstop_count ***\nd_mrtlrt_count  ***\ndist            ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 341321396  on 65051  degrees of freedom\nResidual deviance:  37509430  on 64225  degrees of freedom\nAIC: 37868106\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nBy absolute value, the most influential variable is the Distance between origin and destination. The negative coefficient means there is an inverse relationship between Distance and Number of Trips: More trips are made when the distance is nearer, while less trips are made when the distance is further.\nThe most attractive variables appear to be Financial Services and School counts with a coefficient of 0.396 and 0.334 respectively: More trips are made when there is higher financial services / school density at the destination site, while less trips are made when there is lower financial services / school density at the destination site.\n\n\n\n\n\nCode\nCalcRSquared(orcSIM$data$TOTAL_TRIPS, orcSIM$fitted.values)\n\n\n[1] 0.3269854683\n\n\n\n\n\n\n\n\nInsights\n\n\n\nWith reference to the R2 above, it can be concluded that the model accounts for about 32.69% of the variation of flows."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#destination-constrained-spatial-interaction-model",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#destination-constrained-spatial-interaction-model",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Destination Constrained Spatial Interaction Model",
    "text": "Destination Constrained Spatial Interaction Model\nNext, fit a destination constrained SIM by using the code chunk below.\n\nFor destination constrained SIM, only explanatory variables which represent how propulsive the origins are will be used. This is because such models emphasize the demand or attractiveness of the destinations rather than the limitations or capacities of the origins. The demand or attractiveness of the destination sites determines the potential for generating interactions or flows.\nAdditionally, “-1” is added to the formula to remove the intercept that is inserted by glm into the model by default. Since the destination has already been constrained, the concept of an intercept would not be relevant.\n\n\n\nCode\n# Generate the formula dynamically\nformula_string &lt;- paste(\"TOTAL_TRIPS ~ DESTIN_hex +\", \n                        paste(origin_var, collapse = \" + \"), \"+ dist - 1\")\n\n# Convert the string to a formula\nformula &lt;- as.formula(formula_string)\n\ndecSIM &lt;- glm(formula,\n              family = poisson(link = \"log\"),\n              data = flow_data_log,\n              na.action = na.exclude)\n\n\nsummary() is used to print out the results of the model.\n\n\nCode\nsummary(decSIM)\n\n\n\nCall:\nglm(formula = formula, family = poisson(link = \"log\"), data = flow_data_log, \n    na.action = na.exclude)\n\nDeviance Residuals: \n       Min          1Q      Median          3Q         Max  \n-219.74686   -12.20759    -5.68564     0.48324   626.37247  \n\nCoefficients:\n                     Estimate    Std. Error     z value               Pr(&gt;|z|)\nDESTIN_hex118   15.7875802451  0.0504969831   312.64403 &lt; 0.000000000000000222\nDESTIN_hex146   16.8330086924  0.0226830957   742.09486 &lt; 0.000000000000000222\nDESTIN_hex174   16.4524339851  0.0283408596   580.51994 &lt; 0.000000000000000222\nDESTIN_hex175   16.5289299839  0.0193330155   854.95871 &lt; 0.000000000000000222\nDESTIN_hex200   15.9654171155  0.0344714917   463.14843 &lt; 0.000000000000000222\nDESTIN_hex201   16.5453668063  0.0137470867  1203.55441 &lt; 0.000000000000000222\nDESTIN_hex202   15.4972965279  0.0237653288   652.09687 &lt; 0.000000000000000222\nDESTIN_hex203   16.3180049162  0.0200188828   815.13065 &lt; 0.000000000000000222\nDESTIN_hex227   14.7128755555  0.0404384688   363.83365 &lt; 0.000000000000000222\nDESTIN_hex228   15.8176219351  0.0169450151   933.46756 &lt; 0.000000000000000222\nDESTIN_hex229   12.8346838421  0.1005256798   127.67567 &lt; 0.000000000000000222\nDESTIN_hex230   16.9513311517  0.0111565958  1519.39995 &lt; 0.000000000000000222\nDESTIN_hex231   14.3505285039  0.0324154012   442.70711 &lt; 0.000000000000000222\nDESTIN_hex254   16.6633813658  0.0184568291   902.83013 &lt; 0.000000000000000222\nDESTIN_hex255   15.6888781519  0.0195312878   803.26901 &lt; 0.000000000000000222\nDESTIN_hex256   16.7141394313  0.0124910296  1338.09141 &lt; 0.000000000000000222\nDESTIN_hex257   15.0893631494  0.0209887771   718.92531 &lt; 0.000000000000000222\nDESTIN_hex258   15.6453136303  0.0213193723   733.85433 &lt; 0.000000000000000222\nDESTIN_hex259   15.5798036489  0.0151417717  1028.92871 &lt; 0.000000000000000222\nDESTIN_hex281   14.4873855065  0.0433583864   334.13110 &lt; 0.000000000000000222\nDESTIN_hex282   14.8049118760  0.0284373566   520.61491 &lt; 0.000000000000000222\nDESTIN_hex284   16.6487815564  0.0095343271  1746.19366 &lt; 0.000000000000000222\nDESTIN_hex285   15.7606431712  0.0119050254  1323.86472 &lt; 0.000000000000000222\nDESTIN_hex286   16.0802142973  0.0100875116  1594.07145 &lt; 0.000000000000000222\nDESTIN_hex312   16.2837191369  0.0120037112  1356.55706 &lt; 0.000000000000000222\nDESTIN_hex313   15.1203991634  0.0242482863   623.56568 &lt; 0.000000000000000222\nDESTIN_hex314   15.8032211277  0.0166619690   948.46060 &lt; 0.000000000000000222\nDESTIN_hex336   14.4556717763  0.0416147571   347.36889 &lt; 0.000000000000000222\nDESTIN_hex338   15.0038331236  0.0233940195   641.35337 &lt; 0.000000000000000222\nDESTIN_hex339   14.0894908005  0.0250953830   561.43757 &lt; 0.000000000000000222\nDESTIN_hex340   12.9987498401  0.2582091920    50.34193 &lt; 0.000000000000000222\nDESTIN_hex366   15.0478450764  0.0155410981   968.26138 &lt; 0.000000000000000222\nDESTIN_hex367   16.0233734108  0.0112919545  1419.00797 &lt; 0.000000000000000222\nDESTIN_hex391   15.5780397168  0.0290424392   536.38882 &lt; 0.000000000000000222\nDESTIN_hex392   15.2472723665  0.0177594137   858.54593 &lt; 0.000000000000000222\nDESTIN_hex393   16.4979427100  0.0087405849  1887.51016 &lt; 0.000000000000000222\nDESTIN_hex394   13.6720360748  0.0785955434   173.95434 &lt; 0.000000000000000222\nDESTIN_hex419   16.6173789989  0.0176651682   940.68615 &lt; 0.000000000000000222\nDESTIN_hex420   15.8574556919  0.0153421529  1033.58738 &lt; 0.000000000000000222\nDESTIN_hex421   16.0987615305  0.0234180562   687.45080 &lt; 0.000000000000000222\nDESTIN_hex445   16.9092537549  0.0123031993  1374.37859 &lt; 0.000000000000000222\nDESTIN_hex446   14.7410773034  0.0199467947   739.01985 &lt; 0.000000000000000222\nDESTIN_hex447   15.3349457998  0.0173829471   882.18331 &lt; 0.000000000000000222\nDESTIN_hex472   14.5045715836  0.0321581062   451.03936 &lt; 0.000000000000000222\nDESTIN_hex473   16.4015776419  0.0123860716  1324.19529 &lt; 0.000000000000000222\nDESTIN_hex474   15.4668241484  0.0161447261   958.01094 &lt; 0.000000000000000222\nDESTIN_hex499   16.3729764669  0.0125387136  1305.79395 &lt; 0.000000000000000222\nDESTIN_hex500   15.2435540250  0.0149356487  1020.61546 &lt; 0.000000000000000222\nDESTIN_hex526   17.0305828675  0.0101218757  1682.55207 &lt; 0.000000000000000222\nDESTIN_hex527   16.5275504496  0.0157777507  1047.52260 &lt; 0.000000000000000222\nDESTIN_hex528   17.2912231415  0.0081600176  2119.01787 &lt; 0.000000000000000222\nDESTIN_hex552   16.1481224170  0.0193949216   832.59540 &lt; 0.000000000000000222\nDESTIN_hex553   13.1155134162  0.0591700025   221.65815 &lt; 0.000000000000000222\nDESTIN_hex554   16.6558798231  0.0104848202  1588.57086 &lt; 0.000000000000000222\nDESTIN_hex555   16.9586839668  0.0095303127  1779.44675 &lt; 0.000000000000000222\nDESTIN_hex581   16.8593593216  0.0084309575  1999.69687 &lt; 0.000000000000000222\nDESTIN_hex582   15.5407496544  0.0120839140  1286.06920 &lt; 0.000000000000000222\nDESTIN_hex607   16.0809821600  0.0175538211   916.09582 &lt; 0.000000000000000222\nDESTIN_hex608   16.1356606822  0.0121964031  1322.98519 &lt; 0.000000000000000222\nDESTIN_hex609   16.5550066110  0.0054386383  3043.96167 &lt; 0.000000000000000222\nDESTIN_hex610   16.7543297870  0.0083231044  2012.99046 &lt; 0.000000000000000222\nDESTIN_hex611   14.8230705108  0.0272558313   543.84951 &lt; 0.000000000000000222\nDESTIN_hex634   16.7247627768  0.0141426566  1182.57575 &lt; 0.000000000000000222\nDESTIN_hex635   16.4615003621  0.0102459640  1606.63265 &lt; 0.000000000000000222\nDESTIN_hex636   15.1780384311  0.0114314843  1327.73996 &lt; 0.000000000000000222\nDESTIN_hex638   17.6573135800  0.0045499248  3880.79239 &lt; 0.000000000000000222\nDESTIN_hex661   15.6941049406  0.0213987652   733.41171 &lt; 0.000000000000000222\nDESTIN_hex662   16.8602925805  0.0115714996  1457.05338 &lt; 0.000000000000000222\nDESTIN_hex663   15.2824479107  0.0098304553  1554.60225 &lt; 0.000000000000000222\nDESTIN_hex664   16.0328953083  0.0090457358  1772.42578 &lt; 0.000000000000000222\nDESTIN_hex665   15.4115196882  0.0117201924  1314.95449 &lt; 0.000000000000000222\nDESTIN_hex689   15.3107966826  0.0168543026   908.42066 &lt; 0.000000000000000222\nDESTIN_hex690   15.7289931344  0.0098040792  1604.33150 &lt; 0.000000000000000222\nDESTIN_hex692   14.9413460042  0.0132031196  1131.65270 &lt; 0.000000000000000222\nDESTIN_hex693   14.5035365282  0.0250503715   578.97491 &lt; 0.000000000000000222\nDESTIN_hex715   15.2470186024  0.0217890486   699.75605 &lt; 0.000000000000000222\nDESTIN_hex716   15.1608504845  0.0163297728   928.41772 &lt; 0.000000000000000222\nDESTIN_hex717   14.9371944442  0.0108253269  1379.83773 &lt; 0.000000000000000222\nDESTIN_hex718   16.4939281714  0.0053350919  3091.59214 &lt; 0.000000000000000222\nDESTIN_hex719   14.8379136176  0.0191894910   773.23122 &lt; 0.000000000000000222\nDESTIN_hex720   12.9237971174  0.0518914552   249.05444 &lt; 0.000000000000000222\nDESTIN_hex743   16.3932147306  0.0088335216  1855.79607 &lt; 0.000000000000000222\nDESTIN_hex744   15.7779459910  0.0090856821  1736.57253 &lt; 0.000000000000000222\nDESTIN_hex745   14.8137587204  0.0086160873  1719.31390 &lt; 0.000000000000000222\nDESTIN_hex746   14.9063300245  0.0090653606  1644.31738 &lt; 0.000000000000000222\nDESTIN_hex747   16.5031217042  0.0072738757  2268.82097 &lt; 0.000000000000000222\nDESTIN_hex748   14.7713243641  0.0195764377   754.54608 &lt; 0.000000000000000222\nDESTIN_hex769   15.2329909686  0.0162516953   937.31704 &lt; 0.000000000000000222\nDESTIN_hex770   17.0806186638  0.0066337040  2574.82374 &lt; 0.000000000000000222\nDESTIN_hex771   15.5803146386  0.0072287008  2155.34092 &lt; 0.000000000000000222\nDESTIN_hex772   16.6860339490  0.0037570066  4441.31079 &lt; 0.000000000000000222\nDESTIN_hex773   14.3036628475  0.0136785059  1045.70360 &lt; 0.000000000000000222\nDESTIN_hex774   15.4246522874  0.0120375792  1281.37493 &lt; 0.000000000000000222\nDESTIN_hex775   15.0234943922  0.0154315127   973.55941 &lt; 0.000000000000000222\nDESTIN_hex776   11.2249185885  0.1715118023    65.44692 &lt; 0.000000000000000222\nDESTIN_hex777   13.9069128845  0.0426980358   325.70381 &lt; 0.000000000000000222\nDESTIN_hex797   14.9898016794  0.0171641279   873.32148 &lt; 0.000000000000000222\nDESTIN_hex798   14.3194681041  0.0464708087   308.13899 &lt; 0.000000000000000222\nDESTIN_hex799   16.2808633599  0.0044946504  3622.27577 &lt; 0.000000000000000222\nDESTIN_hex800   15.6151879164  0.0058729432  2658.83516 &lt; 0.000000000000000222\nDESTIN_hex802   12.1071103105  0.0731615177   165.48468 &lt; 0.000000000000000222\nDESTIN_hex803   14.1893919633  0.0328824057   431.51928 &lt; 0.000000000000000222\nDESTIN_hex805   13.9828242405  0.0529791340   263.93078 &lt; 0.000000000000000222\nDESTIN_hex806   15.9198312663  0.0159737123   996.62689 &lt; 0.000000000000000222\nDESTIN_hex823   15.7593775425  0.0178317648   883.78115 &lt; 0.000000000000000222\nDESTIN_hex824   16.3658513715  0.0113474195  1442.25314 &lt; 0.000000000000000222\nDESTIN_hex825   15.5984650582  0.0109109570  1429.61475 &lt; 0.000000000000000222\nDESTIN_hex826   17.5205062676  0.0027216418  6437.47695 &lt; 0.000000000000000222\nDESTIN_hex827   16.1312655016  0.0050738279  3179.30877 &lt; 0.000000000000000222\nDESTIN_hex832   11.4994578118  0.2000110747    57.49411 &lt; 0.000000000000000222\nDESTIN_hex833   13.9777548019  0.0503014064   277.88000 &lt; 0.000000000000000222\nDESTIN_hex851   15.0466182866  0.0206141345   729.91754 &lt; 0.000000000000000222\nDESTIN_hex852   16.5391972635  0.0093320388  1772.30267 &lt; 0.000000000000000222\nDESTIN_hex853   15.0428989487  0.0072891136  2063.74872 &lt; 0.000000000000000222\nDESTIN_hex854   15.2837894053  0.0061190594  2497.73511 &lt; 0.000000000000000222\nDESTIN_hex856   10.3452640750  0.1961290036    52.74724 &lt; 0.000000000000000222\nDESTIN_hex861   13.7175340261  0.0510122026   268.90691 &lt; 0.000000000000000222\nDESTIN_hex862   14.9453734432  0.0355242654   420.70887 &lt; 0.000000000000000222\nDESTIN_hex878   16.0104629061  0.0124197520  1289.11294 &lt; 0.000000000000000222\nDESTIN_hex879   16.0106445558  0.0071352872  2243.86828 &lt; 0.000000000000000222\nDESTIN_hex880   14.7807665792  0.0073914818  1999.70275 &lt; 0.000000000000000222\nDESTIN_hex881   15.1737564376  0.0077179192  1966.04241 &lt; 0.000000000000000222\nDESTIN_hex888   13.2316761638  0.1361074137    97.21496 &lt; 0.000000000000000222\nDESTIN_hex889   14.6109592039  0.0477369792   306.07214 &lt; 0.000000000000000222\nDESTIN_hex905   15.0876949653  0.0174181433   866.20570 &lt; 0.000000000000000222\nDESTIN_hex906   14.5696529606  0.0185853457   783.93231 &lt; 0.000000000000000222\nDESTIN_hex907   15.9644587890  0.0065569094  2434.75360 &lt; 0.000000000000000222\nDESTIN_hex908   15.7213832505  0.0053233225  2953.30281 &lt; 0.000000000000000222\nDESTIN_hex910   15.9417618479  0.0126266925  1262.54456 &lt; 0.000000000000000222\nDESTIN_hex932   15.7787395373  0.0090225250  1748.81638 &lt; 0.000000000000000222\nDESTIN_hex933   14.8534100455  0.0114701439  1294.96284 &lt; 0.000000000000000222\nDESTIN_hex934   15.4521352882  0.0058135915  2657.93275 &lt; 0.000000000000000222\nDESTIN_hex935   15.7790572079  0.0051981078  3035.53868 &lt; 0.000000000000000222\nDESTIN_hex937   15.8148949490  0.0101394520  1559.73863 &lt; 0.000000000000000222\nDESTIN_hex959   16.9352365229  0.0058237660  2907.95278 &lt; 0.000000000000000222\nDESTIN_hex960   15.7084048349  0.0063962320  2455.88417 &lt; 0.000000000000000222\nDESTIN_hex961   15.3148375563  0.0066272049  2310.90449 &lt; 0.000000000000000222\nDESTIN_hex962   17.4802985719  0.0028787425  6072.19949 &lt; 0.000000000000000222\nDESTIN_hex986   14.5544569409  0.0185608432   784.14848 &lt; 0.000000000000000222\nDESTIN_hex987   16.1486996399  0.0050024690  3228.14585 &lt; 0.000000000000000222\nDESTIN_hex988   14.3375544106  0.0114313683  1254.22907 &lt; 0.000000000000000222\nDESTIN_hex989   15.8453922518  0.0048542064  3264.26011 &lt; 0.000000000000000222\nDESTIN_hex991   15.5850491740  0.0106812897  1459.09807 &lt; 0.000000000000000222\nDESTIN_hex1013  15.2136717909  0.0197767908   769.26899 &lt; 0.000000000000000222\nDESTIN_hex1014  13.9777799953  0.0150266039   930.20220 &lt; 0.000000000000000222\nDESTIN_hex1015  13.3367178410  0.0212307862   628.17824 &lt; 0.000000000000000222\nDESTIN_hex1016  15.1660253664  0.0060002078  2527.58335 &lt; 0.000000000000000222\nDESTIN_hex1042  16.0551035905  0.0054453646  2948.39829 &lt; 0.000000000000000222\nDESTIN_hex1043  15.6128945868  0.0055221808  2827.30594 &lt; 0.000000000000000222\nDESTIN_hex1045  13.3746046212  0.0259878733   514.64791 &lt; 0.000000000000000222\nDESTIN_hex1067  16.6912893083  0.0061432200  2717.02614 &lt; 0.000000000000000222\nDESTIN_hex1068  13.3734642996  0.0322913282   414.15033 &lt; 0.000000000000000222\nDESTIN_hex1069  13.3691227755  0.0179814547   743.49506 &lt; 0.000000000000000222\nDESTIN_hex1070  15.7666099582  0.0046108584  3419.45221 &lt; 0.000000000000000222\nDESTIN_hex1078  14.3060853160  0.0378878261   377.59056 &lt; 0.000000000000000222\nDESTIN_hex1093  15.8905290620  0.0107859892  1473.25654 &lt; 0.000000000000000222\nDESTIN_hex1094  14.4612360995  0.0140930893  1026.12250 &lt; 0.000000000000000222\nDESTIN_hex1095  12.9945739805  0.0232437570   559.05652 &lt; 0.000000000000000222\nDESTIN_hex1096  15.3113914219  0.0057466166  2664.41848 &lt; 0.000000000000000222\nDESTIN_hex1097  15.3861433447  0.0063775228  2412.55794 &lt; 0.000000000000000222\nDESTIN_hex1099  15.7427328522  0.0062138246  2533.50131 &lt; 0.000000000000000222\nDESTIN_hex1100  12.7782939370  0.0461208750   277.06096 &lt; 0.000000000000000222\nDESTIN_hex1122  15.2864151082  0.0077980751  1960.28058 &lt; 0.000000000000000222\nDESTIN_hex1123  16.9648809875  0.0031799672  5334.92327 &lt; 0.000000000000000222\nDESTIN_hex1124  15.7087448411  0.0049000163  3205.85563 &lt; 0.000000000000000222\nDESTIN_hex1125  15.1167874099  0.0072396275  2088.06150 &lt; 0.000000000000000222\nDESTIN_hex1126  11.4466483818  0.0601221502   190.38987 &lt; 0.000000000000000222\nDESTIN_hex1127  15.2350981295  0.0065835293  2314.12324 &lt; 0.000000000000000222\nDESTIN_hex1128  15.8283753604  0.0075037416  2109.39772 &lt; 0.000000000000000222\nDESTIN_hex1132  15.4306421172  0.0196438670   785.51958 &lt; 0.000000000000000222\nDESTIN_hex1147  13.4950719471  0.0328792702   410.44317 &lt; 0.000000000000000222\nDESTIN_hex1148  15.3119112805  0.0080922254  1892.17559 &lt; 0.000000000000000222\nDESTIN_hex1149  14.7178438991  0.0087794126  1676.40418 &lt; 0.000000000000000222\nDESTIN_hex1150  15.7059752049  0.0051027569  3077.93915 &lt; 0.000000000000000222\nDESTIN_hex1151  15.1827764964  0.0057308517  2649.30541 &lt; 0.000000000000000222\nDESTIN_hex1152  14.9506043852  0.0072339366  2066.73145 &lt; 0.000000000000000222\nDESTIN_hex1153  15.1129147671  0.0073453708  2057.47472 &lt; 0.000000000000000222\nDESTIN_hex1154  17.1198293876  0.0030866347  5546.43846 &lt; 0.000000000000000222\nDESTIN_hex1155  12.7492810523  0.0359117359   355.01712 &lt; 0.000000000000000222\nDESTIN_hex1158  14.0254731886  0.0295885861   474.01634 &lt; 0.000000000000000222\nDESTIN_hex1174  15.7079565960  0.0114218398  1375.25626 &lt; 0.000000000000000222\nDESTIN_hex1175  16.9749978205  0.0077793652  2182.05438 &lt; 0.000000000000000222\nDESTIN_hex1176  15.8227951312  0.0052732058  3000.60263 &lt; 0.000000000000000222\nDESTIN_hex1177  15.7687029395  0.0053313395  2957.73756 &lt; 0.000000000000000222\nDESTIN_hex1178  15.2015101090  0.0058831654  2583.89983 &lt; 0.000000000000000222\nDESTIN_hex1179  14.3801072071  0.0089860766  1600.26536 &lt; 0.000000000000000222\nDESTIN_hex1180  13.0150834867  0.0178463397   729.28587 &lt; 0.000000000000000222\nDESTIN_hex1181  15.8493837535  0.0045327965  3496.60169 &lt; 0.000000000000000222\nDESTIN_hex1182  15.5181584561  0.0069495551  2232.97151 &lt; 0.000000000000000222\nDESTIN_hex1183  15.5938181659  0.0097643428  1597.01666 &lt; 0.000000000000000222\nDESTIN_hex1185  15.1622432967  0.0154788296   979.54714 &lt; 0.000000000000000222\nDESTIN_hex1201  15.0151968023  0.0136749331  1098.00880 &lt; 0.000000000000000222\nDESTIN_hex1202  15.3841574498  0.0077301871  1990.14037 &lt; 0.000000000000000222\nDESTIN_hex1203  16.4245740709  0.0049732344  3302.59396 &lt; 0.000000000000000222\nDESTIN_hex1205  16.6937626861  0.0032315609  5165.85125 &lt; 0.000000000000000222\nDESTIN_hex1206  15.6750402494  0.0053665717  2920.86665 &lt; 0.000000000000000222\nDESTIN_hex1207  15.5511865143  0.0050127203  3102.34477 &lt; 0.000000000000000222\nDESTIN_hex1209  17.0012171758  0.0041988133  4049.05290 &lt; 0.000000000000000222\nDESTIN_hex1210  15.2130295552  0.0142760067  1065.63620 &lt; 0.000000000000000222\nDESTIN_hex1211  14.9627263586  0.0166910068   896.45439 &lt; 0.000000000000000222\nDESTIN_hex1212  15.0678429430  0.0169159850   890.74582 &lt; 0.000000000000000222\nDESTIN_hex1228  15.2720672244  0.0136104048  1122.08766 &lt; 0.000000000000000222\nDESTIN_hex1229  15.6699341128  0.0067569735  2319.07585 &lt; 0.000000000000000222\nDESTIN_hex1230  14.7446648844  0.0096284196  1531.36917 &lt; 0.000000000000000222\nDESTIN_hex1231  17.0174971282  0.0052868536  3218.83269 &lt; 0.000000000000000222\nDESTIN_hex1232  15.8505609221  0.0046763945  3389.48329 &lt; 0.000000000000000222\nDESTIN_hex1233  16.9318635282  0.0039513458  4285.08779 &lt; 0.000000000000000222\nDESTIN_hex1235  16.0770928448  0.0046606788  3449.51745 &lt; 0.000000000000000222\nDESTIN_hex1236  13.9381483568  0.0126060023  1105.67554 &lt; 0.000000000000000222\nDESTIN_hex1237  16.3380895607  0.0060141062  2716.62802 &lt; 0.000000000000000222\nDESTIN_hex1238  13.7637909497  0.0245311881   561.07315 &lt; 0.000000000000000222\nDESTIN_hex1239  15.0503702321  0.0151865420   991.03339 &lt; 0.000000000000000222\nDESTIN_hex1240  13.4811803543  0.0627823032   214.72899 &lt; 0.000000000000000222\nDESTIN_hex1255  15.9934710430  0.0099180039  1612.56955 &lt; 0.000000000000000222\nDESTIN_hex1256  14.6789876679  0.0097365339  1507.61943 &lt; 0.000000000000000222\nDESTIN_hex1257  15.2765981838  0.0076523780  1996.32039 &lt; 0.000000000000000222\nDESTIN_hex1258  16.3738291994  0.0046192706  3544.67847 &lt; 0.000000000000000222\nDESTIN_hex1259  15.1085321486  0.0068821311  2195.32756 &lt; 0.000000000000000222\nDESTIN_hex1261  15.0823597935  0.0059937334  2516.35480 &lt; 0.000000000000000222\nDESTIN_hex1262  15.2408900971  0.0062813469  2426.37294 &lt; 0.000000000000000222\nDESTIN_hex1263  14.0956791534  0.0172560843   816.85270 &lt; 0.000000000000000222\nDESTIN_hex1264  15.9060233816  0.0076988545  2066.02468 &lt; 0.000000000000000222\nDESTIN_hex1265  13.5332164765  0.0257149138   526.27890 &lt; 0.000000000000000222\nDESTIN_hex1266  15.5290379250  0.0131117571  1184.35979 &lt; 0.000000000000000222\nDESTIN_hex1282  14.8268876405  0.0125192297  1184.32907 &lt; 0.000000000000000222\nDESTIN_hex1283  15.5592056157  0.0058837208  2644.45004 &lt; 0.000000000000000222\nDESTIN_hex1284  15.0125043652  0.0085564103  1754.53303 &lt; 0.000000000000000222\nDESTIN_hex1285  15.9225221859  0.0059468736  2677.46102 &lt; 0.000000000000000222\nDESTIN_hex1286  14.3493052593  0.0102282762  1402.90553 &lt; 0.000000000000000222\nDESTIN_hex1287  15.0706489339  0.0087603273  1720.32943 &lt; 0.000000000000000222\nDESTIN_hex1288  14.7380190036  0.0085966659  1714.38779 &lt; 0.000000000000000222\nDESTIN_hex1289  15.9762676966  0.0040669604  3928.30663 &lt; 0.000000000000000222\nDESTIN_hex1293  14.5764897695  0.0218624621   666.73596 &lt; 0.000000000000000222\nDESTIN_hex1308  14.3160321193  0.0147057198   973.50095 &lt; 0.000000000000000222\nDESTIN_hex1309  16.1996369072  0.0048888270  3313.60404 &lt; 0.000000000000000222\nDESTIN_hex1310  17.2588521697  0.0029443913  5861.60271 &lt; 0.000000000000000222\nDESTIN_hex1311  16.1879762864  0.0076878981  2105.64396 &lt; 0.000000000000000222\nDESTIN_hex1312  13.5697684117  0.0202778026   669.19324 &lt; 0.000000000000000222\nDESTIN_hex1314  15.9659732322  0.0054393022  2935.29805 &lt; 0.000000000000000222\nDESTIN_hex1315  16.8906045455  0.0031376243  5383.24643 &lt; 0.000000000000000222\nDESTIN_hex1316  14.4115601483  0.0106117318  1358.07807 &lt; 0.000000000000000222\nDESTIN_hex1318  15.3403057423  0.0188807909   812.48216 &lt; 0.000000000000000222\nDESTIN_hex1319  17.4933347231  0.0037989852  4604.73878 &lt; 0.000000000000000222\nDESTIN_hex1320  14.7211279219  0.0171100258   860.38023 &lt; 0.000000000000000222\nDESTIN_hex1335  12.3894449199  0.0884156456   140.12729 &lt; 0.000000000000000222\nDESTIN_hex1336  16.0926292594  0.0053299423  3019.28772 &lt; 0.000000000000000222\nDESTIN_hex1337  15.5182192370  0.0051667580  3003.47320 &lt; 0.000000000000000222\nDESTIN_hex1338  14.4617365083  0.0112928747  1280.60718 &lt; 0.000000000000000222\nDESTIN_hex1339  14.5426856174  0.0170779967   851.54517 &lt; 0.000000000000000222\nDESTIN_hex1340  14.0947574873  0.0125993596  1118.68840 &lt; 0.000000000000000222\nDESTIN_hex1341  14.6750834558  0.0097428443  1506.24222 &lt; 0.000000000000000222\nDESTIN_hex1342  15.0693918753  0.0075520400  1995.40679 &lt; 0.000000000000000222\nDESTIN_hex1343  14.6041934773  0.0079838098  1829.22613 &lt; 0.000000000000000222\nDESTIN_hex1347  14.9530495973  0.0118505040  1261.80706 &lt; 0.000000000000000222\nDESTIN_hex1348  16.1556429824  0.0053754526  3005.44794 &lt; 0.000000000000000222\nDESTIN_hex1362  15.7143250943  0.0061963367  2536.06700 &lt; 0.000000000000000222\nDESTIN_hex1363  15.8824513808  0.0054459914  2916.35630 &lt; 0.000000000000000222\nDESTIN_hex1364  14.9973005481  0.0074327497  2017.73250 &lt; 0.000000000000000222\nDESTIN_hex1366  15.5501910025  0.0064336787  2416.99838 &lt; 0.000000000000000222\nDESTIN_hex1367  13.1469677966  0.0222145619   591.81756 &lt; 0.000000000000000222\nDESTIN_hex1368  15.9375610169  0.0067472032  2362.09888 &lt; 0.000000000000000222\nDESTIN_hex1369  15.7792904360  0.0053176745  2967.32915 &lt; 0.000000000000000222\nDESTIN_hex1370  15.3756372680  0.0075248735  2043.30841 &lt; 0.000000000000000222\nDESTIN_hex1372  15.0115941026  0.0298718398   502.53330 &lt; 0.000000000000000222\nDESTIN_hex1374  15.5036946902  0.0063225223  2452.13762 &lt; 0.000000000000000222\nDESTIN_hex1375  16.7861897552  0.0048835625  3437.28367 &lt; 0.000000000000000222\nDESTIN_hex1389  15.8966210571  0.0065999330  2408.60341 &lt; 0.000000000000000222\nDESTIN_hex1390  15.9553506603  0.0075575008  2111.19404 &lt; 0.000000000000000222\nDESTIN_hex1391  15.3153527998  0.0066781176  2293.36373 &lt; 0.000000000000000222\nDESTIN_hex1392  14.1737800831  0.0122058008  1161.23312 &lt; 0.000000000000000222\nDESTIN_hex1394  14.5920841760  0.0109625970  1331.07913 &lt; 0.000000000000000222\nDESTIN_hex1396  14.2707885252  0.0147140936   969.87208 &lt; 0.000000000000000222\nDESTIN_hex1397  15.0239610053  0.0086889823  1729.08179 &lt; 0.000000000000000222\nDESTIN_hex1401  16.9507835479  0.0036397545  4657.12283 &lt; 0.000000000000000222\nDESTIN_hex1402  15.8170543202  0.0056032013  2822.86027 &lt; 0.000000000000000222\nDESTIN_hex1416  14.7684046331  0.0255439123   578.15751 &lt; 0.000000000000000222\nDESTIN_hex1417  14.6317478722  0.0117527488  1244.96389 &lt; 0.000000000000000222\nDESTIN_hex1418  14.4981979265  0.0178227663   813.46508 &lt; 0.000000000000000222\nDESTIN_hex1419  17.0908368728  0.0036514222  4680.59734 &lt; 0.000000000000000222\nDESTIN_hex1420  16.8490920449  0.0037861622  4450.17705 &lt; 0.000000000000000222\nDESTIN_hex1422  14.6194813602  0.0152611790   957.95229 &lt; 0.000000000000000222\nDESTIN_hex1423  15.0841711019  0.0078984723  1909.75805 &lt; 0.000000000000000222\nDESTIN_hex1426  16.2990615505  0.0092986765  1752.83671 &lt; 0.000000000000000222\nDESTIN_hex1428  15.2668932664  0.0067031173  2277.58109 &lt; 0.000000000000000222\nDESTIN_hex1429  15.9748530268  0.0063751316  2505.80757 &lt; 0.000000000000000222\nDESTIN_hex1443  16.4714162489  0.0049734539  3311.86670 &lt; 0.000000000000000222\nDESTIN_hex1444  16.0548085882  0.0063846885  2514.57976 &lt; 0.000000000000000222\nDESTIN_hex1445  16.1040554733  0.0050537056  3186.58364 &lt; 0.000000000000000222\nDESTIN_hex1446  13.8860432281  0.0157694262   880.56744 &lt; 0.000000000000000222\nDESTIN_hex1447  15.7299557057  0.0057499370  2735.67445 &lt; 0.000000000000000222\nDESTIN_hex1455  15.0226545685  0.0089276791  1682.70547 &lt; 0.000000000000000222\nDESTIN_hex1456  15.5429176296  0.0065923890  2357.70637 &lt; 0.000000000000000222\nDESTIN_hex1457  12.0403914959  0.0674519530   178.50323 &lt; 0.000000000000000222\nDESTIN_hex1469  16.1614552768  0.0057077249  2831.50566 &lt; 0.000000000000000222\nDESTIN_hex1470  16.4678694263  0.0046953396  3507.27976 &lt; 0.000000000000000222\nDESTIN_hex1471  15.9521502688  0.0052112204  3061.11600 &lt; 0.000000000000000222\nDESTIN_hex1472  14.8993716488  0.0092282177  1614.54487 &lt; 0.000000000000000222\nDESTIN_hex1480  13.5189266430  0.0426932478   316.65257 &lt; 0.000000000000000222\nDESTIN_hex1482  16.4138000046  0.0040856010  4017.47499 &lt; 0.000000000000000222\nDESTIN_hex1483  16.1704568428  0.0064449147  2509.02571 &lt; 0.000000000000000222\nDESTIN_hex1496  14.1414485417  0.0169990093   831.89839 &lt; 0.000000000000000222\nDESTIN_hex1497  16.4974221384  0.0071471217  2308.26097 &lt; 0.000000000000000222\nDESTIN_hex1498  15.4355005517  0.0064022816  2410.93745 &lt; 0.000000000000000222\nDESTIN_hex1499  15.2090234052  0.0074555819  2039.95123 &lt; 0.000000000000000222\nDESTIN_hex1500  13.0512218303  0.0304212516   429.01660 &lt; 0.000000000000000222\nDESTIN_hex1501  14.9067484031  0.0090989845  1638.28703 &lt; 0.000000000000000222\nDESTIN_hex1507  16.8229046502  0.0085973873  1956.74618 &lt; 0.000000000000000222\nDESTIN_hex1509  14.7367673986  0.0103613205  1422.28661 &lt; 0.000000000000000222\nDESTIN_hex1510  17.7238214524  0.0026596718  6663.91298 &lt; 0.000000000000000222\nDESTIN_hex1511  14.2608645514  0.0207200768   688.26311 &lt; 0.000000000000000222\nDESTIN_hex1523  14.0374267874  0.0351188796   399.71169 &lt; 0.000000000000000222\nDESTIN_hex1524  15.5806808038  0.0116805883  1333.89521 &lt; 0.000000000000000222\nDESTIN_hex1525  16.0849333891  0.0043249330  3719.11738 &lt; 0.000000000000000222\nDESTIN_hex1526  13.8853187912  0.0154149566   900.76925 &lt; 0.000000000000000222\nDESTIN_hex1527  12.9549366646  0.0425022603   304.80583 &lt; 0.000000000000000222\nDESTIN_hex1534  12.4840298475  0.0924791656   134.99289 &lt; 0.000000000000000222\nDESTIN_hex1536  16.0241018487  0.0046702521  3431.09997 &lt; 0.000000000000000222\nDESTIN_hex1537  15.4643517883  0.0079281876  1950.55321 &lt; 0.000000000000000222\nDESTIN_hex1550  16.1460432575  0.0058419937  2763.78989 &lt; 0.000000000000000222\nDESTIN_hex1551  15.2595332597  0.0086727210  1759.48625 &lt; 0.000000000000000222\nDESTIN_hex1552  13.7304363757  0.0208735166   657.79220 &lt; 0.000000000000000222\nDESTIN_hex1553  15.2546332843  0.0063771271  2392.08551 &lt; 0.000000000000000222\nDESTIN_hex1554  13.9224862470  0.0184650432   753.99153 &lt; 0.000000000000000222\nDESTIN_hex1555  14.6415281411  0.0106908973  1369.53220 &lt; 0.000000000000000222\nDESTIN_hex1562  14.5596771405  0.0353537635   411.82821 &lt; 0.000000000000000222\nDESTIN_hex1563  15.7495040436  0.0062534943  2518.51258 &lt; 0.000000000000000222\nDESTIN_hex1564  15.5953274035  0.0053893641  2893.72311 &lt; 0.000000000000000222\nDESTIN_hex1565  17.1822345695  0.0052330710  3283.39412 &lt; 0.000000000000000222\nDESTIN_hex1576  15.6375490324  0.0087283040  1791.59079 &lt; 0.000000000000000222\nDESTIN_hex1578  13.7798290780  0.0126326637  1090.80946 &lt; 0.000000000000000222\nDESTIN_hex1579  16.0332929207  0.0044336191  3616.29916 &lt; 0.000000000000000222\nDESTIN_hex1581  14.9434944336  0.0088484598  1688.82435 &lt; 0.000000000000000222\nDESTIN_hex1588  14.2076567991  0.0490268159   289.79359 &lt; 0.000000000000000222\nDESTIN_hex1590  15.4849507938  0.0060391442  2564.09687 &lt; 0.000000000000000222\nDESTIN_hex1591  15.8385035814  0.0055784614  2839.22440 &lt; 0.000000000000000222\nDESTIN_hex1592  15.9724270296  0.0088236810  1810.17730 &lt; 0.000000000000000222\nDESTIN_hex1604  16.6728324725  0.0038284462  4354.98672 &lt; 0.000000000000000222\nDESTIN_hex1605  15.5855603553  0.0052632614  2961.19823 &lt; 0.000000000000000222\nDESTIN_hex1606  15.3759654462  0.0056169819  2737.40696 &lt; 0.000000000000000222\nDESTIN_hex1607  14.5087062016  0.0092020836  1576.67619 &lt; 0.000000000000000222\nDESTIN_hex1616  14.3480845657  0.0324272227   442.47035 &lt; 0.000000000000000222\nDESTIN_hex1617  14.8239994555  0.0117022512  1266.76477 &lt; 0.000000000000000222\nDESTIN_hex1618  17.3758136397  0.0029532212  5883.68170 &lt; 0.000000000000000222\nDESTIN_hex1619  15.8222528668  0.0063791210  2480.31867 &lt; 0.000000000000000222\nDESTIN_hex1620  16.2645728653  0.0080302717  2025.40753 &lt; 0.000000000000000222\nDESTIN_hex1630  13.5100667845  0.0172420323   783.55420 &lt; 0.000000000000000222\nDESTIN_hex1631  15.1160198341  0.0066837799  2261.59749 &lt; 0.000000000000000222\nDESTIN_hex1632  15.2262375924  0.0066286303  2297.04132 &lt; 0.000000000000000222\nDESTIN_hex1633  13.5302180116  0.0157084552   861.33346 &lt; 0.000000000000000222\nDESTIN_hex1634  15.3632495126  0.0070373493  2183.10174 &lt; 0.000000000000000222\nDESTIN_hex1635  16.4754979956  0.0047284503  3484.33356 &lt; 0.000000000000000222\nDESTIN_hex1642  14.1424763284  0.0396118420   357.02648 &lt; 0.000000000000000222\nDESTIN_hex1644  15.7829332443  0.0061530950  2565.03975 &lt; 0.000000000000000222\nDESTIN_hex1645  15.8634700487  0.0053844439  2946.16681 &lt; 0.000000000000000222\nDESTIN_hex1646  16.2846983066  0.0060910024  2673.56624 &lt; 0.000000000000000222\nDESTIN_hex1647  14.4307395395  0.0281102710   513.36181 &lt; 0.000000000000000222\nDESTIN_hex1658  14.9705810677  0.0096434317  1552.41220 &lt; 0.000000000000000222\nDESTIN_hex1659  15.9223029267  0.0044821618  3552.37129 &lt; 0.000000000000000222\nDESTIN_hex1660  14.7806359624  0.0114674407  1288.92194 &lt; 0.000000000000000222\nDESTIN_hex1661  13.3647240143  0.0195453115   683.78158 &lt; 0.000000000000000222\nDESTIN_hex1662  15.1758256362  0.0076876673  1974.04819 &lt; 0.000000000000000222\nDESTIN_hex1669  12.2199398941  0.1204040029   101.49114 &lt; 0.000000000000000222\nDESTIN_hex1670  15.0587837625  0.0227966450   660.57017 &lt; 0.000000000000000222\nDESTIN_hex1672  15.7205854990  0.0094183423  1669.14570 &lt; 0.000000000000000222\nDESTIN_hex1673  16.7915546126  0.0054326702  3090.84740 &lt; 0.000000000000000222\nDESTIN_hex1674  16.1320526348  0.0070121943  2300.57125 &lt; 0.000000000000000222\nDESTIN_hex1684  15.5365100977  0.0060708367  2559.20408 &lt; 0.000000000000000222\nDESTIN_hex1685  15.5453988452  0.0073396221  2118.01079 &lt; 0.000000000000000222\nDESTIN_hex1686  15.3675313307  0.0058526569  2625.73590 &lt; 0.000000000000000222\nDESTIN_hex1687  14.8704919868  0.0091857321  1618.86846 &lt; 0.000000000000000222\nDESTIN_hex1688  14.6579053807  0.0100422543  1459.62300 &lt; 0.000000000000000222\nDESTIN_hex1689  13.7861491127  0.0227207294   606.76525 &lt; 0.000000000000000222\nDESTIN_hex1695  13.2804114746  0.0635368081   209.01918 &lt; 0.000000000000000222\nDESTIN_hex1699  15.7319739877  0.0058001972  2712.31711 &lt; 0.000000000000000222\nDESTIN_hex1700  14.7130542725  0.0132935943  1106.77774 &lt; 0.000000000000000222\nDESTIN_hex1701  16.7140707300  0.0086186526  1939.29046 &lt; 0.000000000000000222\nDESTIN_hex1712  14.0676146828  0.0120393287  1168.47168 &lt; 0.000000000000000222\nDESTIN_hex1713  16.2340506303  0.0038785323  4185.61696 &lt; 0.000000000000000222\nDESTIN_hex1714  14.5281599018  0.0110569686  1313.93698 &lt; 0.000000000000000222\nDESTIN_hex1716  15.5210354813  0.0062224337  2494.36735 &lt; 0.000000000000000222\nDESTIN_hex1723  13.2653674792  0.0644517827   205.81847 &lt; 0.000000000000000222\nDESTIN_hex1726  14.8230199165  0.0135275377  1095.76630 &lt; 0.000000000000000222\nDESTIN_hex1727  15.6419548331  0.0065418110  2391.07411 &lt; 0.000000000000000222\nDESTIN_hex1728  16.3479650075  0.0052919692  3089.20258 &lt; 0.000000000000000222\nDESTIN_hex1738  15.2423537719  0.0062791692  2427.44755 &lt; 0.000000000000000222\nDESTIN_hex1739  16.5134105073  0.0034518328  4783.95427 &lt; 0.000000000000000222\nDESTIN_hex1740  14.8124695346  0.0079357408  1866.55157 &lt; 0.000000000000000222\nDESTIN_hex1741  15.3996713071  0.0073414243  2097.64083 &lt; 0.000000000000000222\nDESTIN_hex1743  13.9572543685  0.0266781056   523.17262 &lt; 0.000000000000000222\nDESTIN_hex1744  12.7494755423  0.0867399899   146.98498 &lt; 0.000000000000000222\nDESTIN_hex1748  11.4055357065  0.1020875577   111.72307 &lt; 0.000000000000000222\nDESTIN_hex1749  15.7392599816  0.0082647080  1904.39396 &lt; 0.000000000000000222\nDESTIN_hex1753  16.9475402561  0.0034317067  4938.51648 &lt; 0.000000000000000222\nDESTIN_hex1754  15.2267000603  0.0077157228  1973.46385 &lt; 0.000000000000000222\nDESTIN_hex1765  16.5690751589  0.0042089215  3936.65582 &lt; 0.000000000000000222\nDESTIN_hex1766  15.7293051401  0.0054409464  2890.91347 &lt; 0.000000000000000222\nDESTIN_hex1767  15.5601919914  0.0052390839  2970.02155 &lt; 0.000000000000000222\nDESTIN_hex1768  13.2525374504  0.0218450356   606.66129 &lt; 0.000000000000000222\nDESTIN_hex1770  14.3132414691  0.0128585401  1113.13114 &lt; 0.000000000000000222\nDESTIN_hex1771  12.9557121166  0.0335045002   386.68573 &lt; 0.000000000000000222\nDESTIN_hex1776  11.3599405627  0.0985579257   115.26156 &lt; 0.000000000000000222\nDESTIN_hex1777  15.9982653681  0.0071953969  2223.40278 &lt; 0.000000000000000222\nDESTIN_hex1778  14.1545412989  0.0153050967   924.82534 &lt; 0.000000000000000222\nDESTIN_hex1780  14.8660998894  0.0153535426   968.25210 &lt; 0.000000000000000222\nDESTIN_hex1781  15.8725275529  0.0055218456  2874.49682 &lt; 0.000000000000000222\nDESTIN_hex1791  15.1870829166  0.0162886654   932.37122 &lt; 0.000000000000000222\nDESTIN_hex1792  14.9029747460  0.0081266582  1833.83803 &lt; 0.000000000000000222\nDESTIN_hex1793  15.9616784071  0.0043028861  3709.52841 &lt; 0.000000000000000222\nDESTIN_hex1794  15.3589858835  0.0059797757  2568.48862 &lt; 0.000000000000000222\nDESTIN_hex1795  15.4162003641  0.0066196151  2328.86660 &lt; 0.000000000000000222\nDESTIN_hex1796  16.0553864915  0.0062252211  2579.08693 &lt; 0.000000000000000222\nDESTIN_hex1798  10.8938331831  0.1400462995    77.78737 &lt; 0.000000000000000222\nDESTIN_hex1800  14.3791360837  0.0207629854   692.53702 &lt; 0.000000000000000222\nDESTIN_hex1802  13.8508790851  0.0220997615   626.74337 &lt; 0.000000000000000222\nDESTIN_hex1804  12.5556260824  0.0378886041   331.38265 &lt; 0.000000000000000222\nDESTIN_hex1805  14.1669206365  0.0123440711  1147.67004 &lt; 0.000000000000000222\nDESTIN_hex1806  14.9251376194  0.0080820894  1846.69297 &lt; 0.000000000000000222\nDESTIN_hex1807  14.3666192021  0.0096669250  1486.16227 &lt; 0.000000000000000222\nDESTIN_hex1808  14.4152987075  0.0161768939   891.10424 &lt; 0.000000000000000222\nDESTIN_hex1820  15.2813668520  0.0062268231  2454.11934 &lt; 0.000000000000000222\nDESTIN_hex1821  16.3747262495  0.0038320479  4273.10062 &lt; 0.000000000000000222\nDESTIN_hex1822  14.5125794619  0.0099896663  1452.75919 &lt; 0.000000000000000222\nDESTIN_hex1823  15.4575097811  0.0087717554  1762.19116 &lt; 0.000000000000000222\nDESTIN_hex1824  16.1135045817  0.0050481185  3191.98222 &lt; 0.000000000000000222\nDESTIN_hex1827  14.6115525771  0.0103721478  1408.72969 &lt; 0.000000000000000222\nDESTIN_hex1828  14.9787416914  0.0091190555  1642.57600 &lt; 0.000000000000000222\nDESTIN_hex1829  16.2138242958  0.0057527950  2818.42553 &lt; 0.000000000000000222\nDESTIN_hex1831  13.8855659372  0.0181576156   764.72408 &lt; 0.000000000000000222\nDESTIN_hex1833  16.3958961061  0.0039581854  4142.27588 &lt; 0.000000000000000222\nDESTIN_hex1834  16.2409474314  0.0043235507  3756.39115 &lt; 0.000000000000000222\nDESTIN_hex1835  14.3591612433  0.0112952217  1271.25980 &lt; 0.000000000000000222\nDESTIN_hex1846  13.0044848930  0.0267941196   485.34847 &lt; 0.000000000000000222\nDESTIN_hex1847  13.8662912363  0.0179351657   773.13427 &lt; 0.000000000000000222\nDESTIN_hex1848  15.0852270466  0.0066858459  2256.29297 &lt; 0.000000000000000222\nDESTIN_hex1849  16.9424222602  0.0033620480  5039.31601 &lt; 0.000000000000000222\nDESTIN_hex1850  15.8172142966  0.0086130814  1836.41761 &lt; 0.000000000000000222\nDESTIN_hex1852  12.6443991552  0.0329592607   383.63722 &lt; 0.000000000000000222\nDESTIN_hex1853  15.6573147553  0.0060138375  2603.54803 &lt; 0.000000000000000222\nDESTIN_hex1854  15.1310837082  0.0074295681  2036.60342 &lt; 0.000000000000000222\nDESTIN_hex1855  13.5088675619  0.0165722734   815.14873 &lt; 0.000000000000000222\nDESTIN_hex1856  11.0361464801  0.1507685000    73.19929 &lt; 0.000000000000000222\nDESTIN_hex1857  12.9347222506  0.0448710884   288.26406 &lt; 0.000000000000000222\nDESTIN_hex1858  14.1899769532  0.0114598975  1238.22896 &lt; 0.000000000000000222\nDESTIN_hex1859  15.0089393189  0.0072881995  2059.34802 &lt; 0.000000000000000222\nDESTIN_hex1860  15.4112355570  0.0059099191  2607.68978 &lt; 0.000000000000000222\nDESTIN_hex1861  14.8627037980  0.0100766371  1474.96667 &lt; 0.000000000000000222\nDESTIN_hex1862  14.1010144981  0.0204939687   688.05680 &lt; 0.000000000000000222\nDESTIN_hex1874  15.6024397608  0.0054399620  2868.11559 &lt; 0.000000000000000222\nDESTIN_hex1875  15.8016100002  0.0048685686  3245.63776 &lt; 0.000000000000000222\nDESTIN_hex1876  14.8492442589  0.0104166627  1425.52799 &lt; 0.000000000000000222\nDESTIN_hex1877  15.4281898365  0.0072416809  2130.47083 &lt; 0.000000000000000222\nDESTIN_hex1878  15.4324776310  0.0070772584  2180.57286 &lt; 0.000000000000000222\nDESTIN_hex1879  14.3241989568  0.0108267036  1323.04342 &lt; 0.000000000000000222\nDESTIN_hex1882  15.8003997530  0.0051878548  3045.65188 &lt; 0.000000000000000222\nDESTIN_hex1883  14.8908945453  0.0086217047  1727.14041 &lt; 0.000000000000000222\nDESTIN_hex1884  13.9865061540  0.0188341883   742.61263 &lt; 0.000000000000000222\nDESTIN_hex1886  17.4018547976  0.0028979728  6004.83712 &lt; 0.000000000000000222\nDESTIN_hex1887  17.5353222984  0.0027086696  6473.77669 &lt; 0.000000000000000222\nDESTIN_hex1888  14.7625170254  0.0085095474  1734.81813 &lt; 0.000000000000000222\nDESTIN_hex1889  11.5975313213  0.0884121754   131.17573 &lt; 0.000000000000000222\nDESTIN_hex1890  14.1942845897  0.0363907968   390.05149 &lt; 0.000000000000000222\nDESTIN_hex1900  14.8883225699  0.0099203228  1500.79013 &lt; 0.000000000000000222\nDESTIN_hex1901  15.9083567113  0.0045237627  3516.62050 &lt; 0.000000000000000222\nDESTIN_hex1902  15.1886467778  0.0074616965  2035.54872 &lt; 0.000000000000000222\nDESTIN_hex1903  15.7269924163  0.0075818701  2074.28935 &lt; 0.000000000000000222\nDESTIN_hex1904  15.4953397282  0.0082071195  1888.03631 &lt; 0.000000000000000222\nDESTIN_hex1905  14.9409040220  0.0072643103  2056.75466 &lt; 0.000000000000000222\nDESTIN_hex1906  15.1015322559  0.0063474931  2379.13329 &lt; 0.000000000000000222\nDESTIN_hex1907  15.4099845531  0.0061273983  2514.93108 &lt; 0.000000000000000222\nDESTIN_hex1908  14.9965243434  0.0079947671  1875.79253 &lt; 0.000000000000000222\nDESTIN_hex1909  15.1406466092  0.0069938153  2164.86223 &lt; 0.000000000000000222\nDESTIN_hex1910  14.1601766211  0.0123698089  1144.73690 &lt; 0.000000000000000222\nDESTIN_hex1912  12.3397848077  0.0353962680   348.61824 &lt; 0.000000000000000222\nDESTIN_hex1913  15.4882989343  0.0051276787  3020.52835 &lt; 0.000000000000000222\nDESTIN_hex1914  15.9323488935  0.0048345220  3295.53758 &lt; 0.000000000000000222\nDESTIN_hex1916  14.2792270476  0.0274655993   519.89498 &lt; 0.000000000000000222\nDESTIN_hex1928  15.5641807614  0.0061636493  2525.15675 &lt; 0.000000000000000222\nDESTIN_hex1929  15.5627977905  0.0059023388  2636.71711 &lt; 0.000000000000000222\nDESTIN_hex1930  15.7290420153  0.0050963219  3086.35176 &lt; 0.000000000000000222\nDESTIN_hex1931  15.0077332500  0.0079348656  1891.36577 &lt; 0.000000000000000222\nDESTIN_hex1932  15.8234704811  0.0051472641  3074.15165 &lt; 0.000000000000000222\nDESTIN_hex1933  16.0342404303  0.0057770174  2775.52227 &lt; 0.000000000000000222\nDESTIN_hex1934  14.5646572892  0.0081878481  1778.81380 &lt; 0.000000000000000222\nDESTIN_hex1935  15.2247814927  0.0063484316  2398.19573 &lt; 0.000000000000000222\nDESTIN_hex1936  15.4110737898  0.0062205204  2477.45732 &lt; 0.000000000000000222\nDESTIN_hex1937  15.8078456668  0.0051208183  3086.97647 &lt; 0.000000000000000222\nDESTIN_hex1938  13.9448447301  0.0457397677   304.87354 &lt; 0.000000000000000222\nDESTIN_hex1940  15.2369841383  0.0068508830  2224.09054 &lt; 0.000000000000000222\nDESTIN_hex1941  14.5083029918  0.0090951029  1595.17745 &lt; 0.000000000000000222\nDESTIN_hex1942  15.5218874072  0.0081799736  1897.54738 &lt; 0.000000000000000222\nDESTIN_hex1954  14.7955657253  0.0125515599  1178.78302 &lt; 0.000000000000000222\nDESTIN_hex1955  16.2251639857  0.0043567630  3724.13282 &lt; 0.000000000000000222\nDESTIN_hex1956  15.3189271959  0.0066991188  2286.70782 &lt; 0.000000000000000222\nDESTIN_hex1958  15.9911400102  0.0047935176  3335.99274 &lt; 0.000000000000000222\nDESTIN_hex1959  16.0205557758  0.0043123567  3715.03492 &lt; 0.000000000000000222\nDESTIN_hex1960  16.1182439630  0.0050074450  3218.85591 &lt; 0.000000000000000222\nDESTIN_hex1961  16.7071205164  0.0033296730  5017.64600 &lt; 0.000000000000000222\nDESTIN_hex1962  15.2179440104  0.0057963804  2625.42191 &lt; 0.000000000000000222\nDESTIN_hex1963  15.1072339472  0.0059156302  2553.78269 &lt; 0.000000000000000222\nDESTIN_hex1964  15.9071750696  0.0050736953  3135.22472 &lt; 0.000000000000000222\nDESTIN_hex1967  15.6770337636  0.0056014814  2798.72996 &lt; 0.000000000000000222\nDESTIN_hex1968  15.5456927897  0.0066412489  2340.77853 &lt; 0.000000000000000222\nDESTIN_hex1982  16.7004047127  0.0036924981  4522.79304 &lt; 0.000000000000000222\nDESTIN_hex1983  16.0431693728  0.0045364716  3536.48627 &lt; 0.000000000000000222\nDESTIN_hex1984  16.3078567841  0.0039134662  4167.11325 &lt; 0.000000000000000222\nDESTIN_hex1985  15.8665117427  0.0053292530  2977.24873 &lt; 0.000000000000000222\nDESTIN_hex1986  15.1215156615  0.0077604637  1948.53249 &lt; 0.000000000000000222\nDESTIN_hex1987  16.8461449681  0.0030473692  5528.09448 &lt; 0.000000000000000222\nDESTIN_hex1988  15.1091536271  0.0057876381  2610.59058 &lt; 0.000000000000000222\nDESTIN_hex1989  14.9327363418  0.0063247542  2360.99870 &lt; 0.000000000000000222\nDESTIN_hex1990  17.1349188890  0.0028171843  6082.28532 &lt; 0.000000000000000222\nDESTIN_hex1991  16.0076946524  0.0045102097  3549.21293 &lt; 0.000000000000000222\nDESTIN_hex1992  16.5316361253  0.0050756733  3257.03312 &lt; 0.000000000000000222\nDESTIN_hex1994  13.3951479458  0.0192893491   694.43235 &lt; 0.000000000000000222\nDESTIN_hex1995  15.2519688432  0.0081025677  1882.36242 &lt; 0.000000000000000222\nDESTIN_hex2009  16.7805701726  0.0035720735  4697.71133 &lt; 0.000000000000000222\nDESTIN_hex2010  16.1892098208  0.0040495194  3997.81018 &lt; 0.000000000000000222\nDESTIN_hex2011  16.0948425862  0.0043217133  3724.18100 &lt; 0.000000000000000222\nDESTIN_hex2012  15.4101542229  0.0067407075  2286.13306 &lt; 0.000000000000000222\nDESTIN_hex2013  15.4561088315  0.0050956848  3033.17603 &lt; 0.000000000000000222\nDESTIN_hex2014  15.4692901333  0.0047883778  3230.59094 &lt; 0.000000000000000222\nDESTIN_hex2015  15.6892696891  0.0048799561  3215.04324 &lt; 0.000000000000000222\nDESTIN_hex2016  15.2770299765  0.0058442164  2614.04249 &lt; 0.000000000000000222\nDESTIN_hex2017  15.6652272502  0.0051626369  3034.34615 &lt; 0.000000000000000222\nDESTIN_hex2021  14.2291316007  0.0122792654  1158.79339 &lt; 0.000000000000000222\nDESTIN_hex2036  13.4263971288  0.0289444416   463.86789 &lt; 0.000000000000000222\nDESTIN_hex2037  14.7435613722  0.0095848389  1538.21691 &lt; 0.000000000000000222\nDESTIN_hex2038  16.5968789869  0.0035918604  4620.69152 &lt; 0.000000000000000222\nDESTIN_hex2039  15.0527933440  0.0069913393  2153.06291 &lt; 0.000000000000000222\nDESTIN_hex2040  15.3723250216  0.0059958322  2563.83508 &lt; 0.000000000000000222\nDESTIN_hex2041  15.8750283240  0.0058064924  2734.01345 &lt; 0.000000000000000222\nDESTIN_hex2042  15.3120828142  0.0072116111  2123.25410 &lt; 0.000000000000000222\nDESTIN_hex2043  15.4399417252  0.0052132435  2961.67668 &lt; 0.000000000000000222\nDESTIN_hex2044  15.4045810887  0.0054590895  2821.82242 &lt; 0.000000000000000222\nDESTIN_hex2046  14.8070344594  0.0111540900  1327.49821 &lt; 0.000000000000000222\nDESTIN_hex2049  13.1073535647  0.0235648758   556.22417 &lt; 0.000000000000000222\nDESTIN_hex2063  15.2503318241  0.0095454297  1597.65796 &lt; 0.000000000000000222\nDESTIN_hex2064  15.9885195741  0.0047673241  3353.77234 &lt; 0.000000000000000222\nDESTIN_hex2065  15.3522619316  0.0056041656  2739.43757 &lt; 0.000000000000000222\nDESTIN_hex2066  15.2189113677  0.0058570205  2598.40501 &lt; 0.000000000000000222\nDESTIN_hex2067  15.2546319633  0.0055692672  2739.07348 &lt; 0.000000000000000222\nDESTIN_hex2068  14.9783235365  0.0064134393  2335.45884 &lt; 0.000000000000000222\nDESTIN_hex2069  13.4332771157  0.0137755953   975.15039 &lt; 0.000000000000000222\nDESTIN_hex2070  15.7611262431  0.0056922961  2768.85212 &lt; 0.000000000000000222\nDESTIN_hex2071  16.6817243928  0.0036637902  4553.13313 &lt; 0.000000000000000222\nDESTIN_hex2072  12.7786726270  0.0395622898   323.00134 &lt; 0.000000000000000222\nDESTIN_hex2074  13.2271161581  0.0298062993   443.76915 &lt; 0.000000000000000222\nDESTIN_hex2089  14.1672210165  0.0573887761   246.86397 &lt; 0.000000000000000222\nDESTIN_hex2090  12.7131336375  0.0995242552   127.73905 &lt; 0.000000000000000222\nDESTIN_hex2091  14.0309191282  0.0186001103   754.34602 &lt; 0.000000000000000222\nDESTIN_hex2092  15.4864110781  0.0060602354  2555.41410 &lt; 0.000000000000000222\nDESTIN_hex2093  16.0720271963  0.0041375392  3884.44104 &lt; 0.000000000000000222\nDESTIN_hex2094  15.6500093307  0.0054350336  2879.46876 &lt; 0.000000000000000222\nDESTIN_hex2095  15.8833901497  0.0067233538  2362.42068 &lt; 0.000000000000000222\nDESTIN_hex2096  14.3168807305  0.0091191560  1569.97871 &lt; 0.000000000000000222\nDESTIN_hex2097  14.4909958305  0.0215182966   673.42672 &lt; 0.000000000000000222\nDESTIN_hex2098  15.1316621044  0.0067782143  2232.39654 &lt; 0.000000000000000222\nDESTIN_hex2100  13.2986161944  0.0418718699   317.60263 &lt; 0.000000000000000222\nDESTIN_hex2101  14.4321604467  0.0167487881   861.68386 &lt; 0.000000000000000222\nDESTIN_hex2102  15.3693316763  0.0095681438  1606.30233 &lt; 0.000000000000000222\nDESTIN_hex2116  12.6325062191  0.0953655441   132.46405 &lt; 0.000000000000000222\nDESTIN_hex2117  12.7516352948  0.1097832318   116.15285 &lt; 0.000000000000000222\nDESTIN_hex2119  15.6280200780  0.0053750395  2907.51725 &lt; 0.000000000000000222\nDESTIN_hex2120  16.1945665688  0.0039963422  4052.34728 &lt; 0.000000000000000222\nDESTIN_hex2121  15.4615360286  0.0057347645  2696.10653 &lt; 0.000000000000000222\nDESTIN_hex2122  11.8169039056  0.0488397817   241.95243 &lt; 0.000000000000000222\nDESTIN_hex2123  14.5216733370  0.0079423704  1828.38028 &lt; 0.000000000000000222\nDESTIN_hex2124  14.8396710554  0.0080902095  1834.27525 &lt; 0.000000000000000222\nDESTIN_hex2125  16.0905662090  0.0045628370  3526.43901 &lt; 0.000000000000000222\nDESTIN_hex2126  14.0570444744  0.0136611223  1028.98167 &lt; 0.000000000000000222\nDESTIN_hex2129  13.9937083936  0.0218618869   640.09609 &lt; 0.000000000000000222\nDESTIN_hex2146  14.5659568853  0.0189028751   770.56833 &lt; 0.000000000000000222\nDESTIN_hex2147  15.6268102260  0.0048543297  3219.14889 &lt; 0.000000000000000222\nDESTIN_hex2148  15.9080661453  0.0044764499  3553.72369 &lt; 0.000000000000000222\nDESTIN_hex2149  15.4842018686  0.0059529707  2601.08821 &lt; 0.000000000000000222\nDESTIN_hex2150  13.7356166531  0.0122786568  1118.65792 &lt; 0.000000000000000222\nDESTIN_hex2151  13.7307767060  0.0124661787  1101.44231 &lt; 0.000000000000000222\nDESTIN_hex2152  16.2955380568  0.0040490557  4024.52799 &lt; 0.000000000000000222\nDESTIN_hex2153  15.2852078240  0.0124940704  1223.39697 &lt; 0.000000000000000222\nDESTIN_hex2154  14.4261953261  0.0103490010  1393.96985 &lt; 0.000000000000000222\nDESTIN_hex2155  14.6167482390  0.0119510764  1223.04868 &lt; 0.000000000000000222\nDESTIN_hex2171  12.6354399362  0.1715130720    73.67042 &lt; 0.000000000000000222\nDESTIN_hex2172  14.5724808339  0.0200117946   728.19460 &lt; 0.000000000000000222\nDESTIN_hex2174  13.9770518722  0.0147440921   947.97644 &lt; 0.000000000000000222\nDESTIN_hex2175  16.4069979330  0.0037451015  4380.92210 &lt; 0.000000000000000222\nDESTIN_hex2176  15.3850053721  0.0055845521  2754.92196 &lt; 0.000000000000000222\nDESTIN_hex2177  16.9884604854  0.0029528908  5753.16242 &lt; 0.000000000000000222\nDESTIN_hex2178  13.9495222894  0.0099637613  1400.02575 &lt; 0.000000000000000222\nDESTIN_hex2179  15.6588921664  0.0048820777  3207.42383 &lt; 0.000000000000000222\nDESTIN_hex2180  14.9717060730  0.0073027722  2050.14009 &lt; 0.000000000000000222\nDESTIN_hex2181  15.9619496331  0.0051046757  3126.92724 &lt; 0.000000000000000222\nDESTIN_hex2182  14.7458105640  0.0175285114   841.24717 &lt; 0.000000000000000222\nDESTIN_hex2200  15.5144006168  0.0104519297  1484.35753 &lt; 0.000000000000000222\nDESTIN_hex2201  15.5301374849  0.0052125347  2979.38307 &lt; 0.000000000000000222\nDESTIN_hex2202  16.3701996499  0.0055950366  2925.84316 &lt; 0.000000000000000222\nDESTIN_hex2203  15.7708522919  0.0066452511  2373.25154 &lt; 0.000000000000000222\nDESTIN_hex2204  15.8999176330  0.0045019872  3531.75545 &lt; 0.000000000000000222\nDESTIN_hex2205  14.8696876863  0.0066506815  2235.81415 &lt; 0.000000000000000222\nDESTIN_hex2206  15.8282889216  0.0043116595  3671.04331 &lt; 0.000000000000000222\nDESTIN_hex2207  14.7206351513  0.0070609473  2084.79608 &lt; 0.000000000000000222\nDESTIN_hex2208  15.2571398441  0.0065551579  2327.50149 &lt; 0.000000000000000222\nDESTIN_hex2209  13.5002399275  0.0251011834   537.83281 &lt; 0.000000000000000222\nDESTIN_hex2227  14.8333418446  0.0084067209  1764.46228 &lt; 0.000000000000000222\nDESTIN_hex2228  15.3645109506  0.0058184886  2640.63609 &lt; 0.000000000000000222\nDESTIN_hex2229  15.9683538594  0.0044674734  3574.35903 &lt; 0.000000000000000222\nDESTIN_hex2230  15.4573120751  0.0074491333  2075.04839 &lt; 0.000000000000000222\nDESTIN_hex2231  15.0327033021  0.0059189446  2539.76078 &lt; 0.000000000000000222\nDESTIN_hex2233  15.7220230863  0.0043261846  3634.15450 &lt; 0.000000000000000222\nDESTIN_hex2234  10.5631536486  0.0827861442   127.59567 &lt; 0.000000000000000222\nDESTIN_hex2235  12.5190900044  0.0526738633   237.67176 &lt; 0.000000000000000222\nDESTIN_hex2254  15.4869916961  0.0100291647  1544.19557 &lt; 0.000000000000000222\nDESTIN_hex2255  15.1894983035  0.0070908648  2142.12210 &lt; 0.000000000000000222\nDESTIN_hex2256  15.3040173956  0.0061343114  2494.82238 &lt; 0.000000000000000222\nDESTIN_hex2257  15.2833826193  0.0090757548  1683.97923 &lt; 0.000000000000000222\nDESTIN_hex2258  14.4213474587  0.0090837332  1587.60140 &lt; 0.000000000000000222\nDESTIN_hex2259  14.2207614326  0.0098747080  1440.11970 &lt; 0.000000000000000222\nDESTIN_hex2260  15.1023681060  0.0063320409  2385.07116 &lt; 0.000000000000000222\nDESTIN_hex2261  15.2664458004  0.0060305081  2531.53557 &lt; 0.000000000000000222\nDESTIN_hex2262  14.1975918228  0.0102573942  1384.13242 &lt; 0.000000000000000222\nDESTIN_hex2281  15.1260715184  0.0074437900  2032.03900 &lt; 0.000000000000000222\nDESTIN_hex2282  16.2140772757  0.0042613258  3804.93723 &lt; 0.000000000000000222\nDESTIN_hex2283  15.2690388914  0.0065066246  2346.69124 &lt; 0.000000000000000222\nDESTIN_hex2284  15.4398799934  0.0057695859  2676.08115 &lt; 0.000000000000000222\nDESTIN_hex2285  15.6132503707  0.0060951823  2561.57235 &lt; 0.000000000000000222\nDESTIN_hex2286  14.7315149325  0.0070974954  2075.59343 &lt; 0.000000000000000222\nDESTIN_hex2287  15.8238133650  0.0041694677  3795.16389 &lt; 0.000000000000000222\nDESTIN_hex2288  13.6235297378  0.0145116718   938.79809 &lt; 0.000000000000000222\nDESTIN_hex2308  15.1356965503  0.0091483585  1654.47130 &lt; 0.000000000000000222\nDESTIN_hex2309  15.8761114099  0.0051352175  3091.61422 &lt; 0.000000000000000222\nDESTIN_hex2310  15.4185631015  0.0054485800  2829.83148 &lt; 0.000000000000000222\nDESTIN_hex2311  16.2402052356  0.0040253874  4034.44530 &lt; 0.000000000000000222\nDESTIN_hex2312  14.6903402526  0.0096083907  1528.90746 &lt; 0.000000000000000222\nDESTIN_hex2313  16.6519761186  0.0038121648  4368.11550 &lt; 0.000000000000000222\nDESTIN_hex2314  16.5065330532  0.0032309468  5108.88423 &lt; 0.000000000000000222\nDESTIN_hex2315  14.8323482195  0.0068916416  2152.22280 &lt; 0.000000000000000222\nDESTIN_hex2316  15.3193257710  0.0058827907  2604.09160 &lt; 0.000000000000000222\nDESTIN_hex2317  13.4219615681  0.0255485875   525.35044 &lt; 0.000000000000000222\nDESTIN_hex2335  14.1098454949  0.0157769586   894.33241 &lt; 0.000000000000000222\nDESTIN_hex2336  16.4230463790  0.0036089094  4550.69505 &lt; 0.000000000000000222\nDESTIN_hex2337  15.9327210584  0.0044561766  3575.42409 &lt; 0.000000000000000222\nDESTIN_hex2338  15.3121096658  0.0073927460  2071.23437 &lt; 0.000000000000000222\nDESTIN_hex2339  15.9394703583  0.0047725188  3339.84444 &lt; 0.000000000000000222\nDESTIN_hex2340  15.4666854789  0.0048214389  3207.89824 &lt; 0.000000000000000222\nDESTIN_hex2341  15.7152469890  0.0043279794  3631.08171 &lt; 0.000000000000000222\nDESTIN_hex2342  14.6085907066  0.0067266987  2171.73257 &lt; 0.000000000000000222\nDESTIN_hex2343  14.4973310058  0.0085316450  1699.24217 &lt; 0.000000000000000222\nDESTIN_hex2362  14.9393957283  0.0117560422  1270.78446 &lt; 0.000000000000000222\nDESTIN_hex2363  15.4387780641  0.0064113071  2408.05467 &lt; 0.000000000000000222\nDESTIN_hex2364  14.8467384700  0.0094467481  1571.62427 &lt; 0.000000000000000222\nDESTIN_hex2365  16.2896268960  0.0042559501  3827.49484 &lt; 0.000000000000000222\nDESTIN_hex2366  16.0332768472  0.0119308821  1343.84672 &lt; 0.000000000000000222\nDESTIN_hex2367  15.4611609481  0.0061094473  2530.69718 &lt; 0.000000000000000222\nDESTIN_hex2368  15.1812138248  0.0054430320  2789.10979 &lt; 0.000000000000000222\nDESTIN_hex2369  16.2446584168  0.0035327578  4598.29391 &lt; 0.000000000000000222\nDESTIN_hex2370  16.8493236768  0.0029597548  5692.81056 &lt; 0.000000000000000222\nDESTIN_hex2371  14.9685753054  0.0069674850  2148.34697 &lt; 0.000000000000000222\nDESTIN_hex2389  15.3356694879  0.0068935302  2224.64673 &lt; 0.000000000000000222\nDESTIN_hex2390  16.2244534634  0.0041165390  3941.28501 &lt; 0.000000000000000222\nDESTIN_hex2391  16.0724277378  0.0050131179  3206.07413 &lt; 0.000000000000000222\nDESTIN_hex2392  16.3047288066  0.0089618098  1819.35672 &lt; 0.000000000000000222\nDESTIN_hex2393  17.2742293664  0.0075018596  2302.65965 &lt; 0.000000000000000222\nDESTIN_hex2394  13.7439660070  0.0136818184  1004.54235 &lt; 0.000000000000000222\nDESTIN_hex2395  15.2325428527  0.0053868521  2827.72619 &lt; 0.000000000000000222\nDESTIN_hex2396  15.1809353299  0.0051359407  2955.82373 &lt; 0.000000000000000222\nDESTIN_hex2397  13.9937543895  0.0099114473  1411.87801 &lt; 0.000000000000000222\nDESTIN_hex2398  14.8627513708  0.0109092720  1362.39626 &lt; 0.000000000000000222\nDESTIN_hex2416  15.0202549926  0.0089589783  1676.55892 &lt; 0.000000000000000222\nDESTIN_hex2417  15.1416246981  0.0096734503  1565.27653 &lt; 0.000000000000000222\nDESTIN_hex2418  15.5189747242  0.0057918386  2679.45568 &lt; 0.000000000000000222\nDESTIN_hex2419  16.2212708284  0.0042811597  3788.98989 &lt; 0.000000000000000222\nDESTIN_hex2420  13.6678081840  0.0358926007   380.79738 &lt; 0.000000000000000222\nDESTIN_hex2422  13.8593371782  0.0211448984   655.44591 &lt; 0.000000000000000222\nDESTIN_hex2423  14.3485384532  0.0083689081  1714.50543 &lt; 0.000000000000000222\nDESTIN_hex2424  16.0423554501  0.0037676938  4257.87137 &lt; 0.000000000000000222\nDESTIN_hex2425  16.9043918975  0.0030581942  5527.57315 &lt; 0.000000000000000222\nDESTIN_hex2426  14.7419897746  0.0155110410   950.41911 &lt; 0.000000000000000222\nDESTIN_hex2443  16.6736057297  0.0038444044  4337.11028 &lt; 0.000000000000000222\nDESTIN_hex2444  16.0298709797  0.0043527449  3682.70402 &lt; 0.000000000000000222\nDESTIN_hex2445  16.1198537049  0.0042909254  3756.73130 &lt; 0.000000000000000222\nDESTIN_hex2448  15.0978715291  0.0110345928  1368.23096 &lt; 0.000000000000000222\nDESTIN_hex2449  14.1958070205  0.0115776754  1226.13621 &lt; 0.000000000000000222\nDESTIN_hex2450  14.6417570783  0.0074888618  1955.13785 &lt; 0.000000000000000222\nDESTIN_hex2451  16.2883365511  0.0035962820  4529.21563 &lt; 0.000000000000000222\nDESTIN_hex2452  13.1480306862  0.0233164633   563.89473 &lt; 0.000000000000000222\nDESTIN_hex2471  15.1043845057  0.0070069217  2155.63768 &lt; 0.000000000000000222\nDESTIN_hex2472  13.3946701198  0.0192904666   694.36735 &lt; 0.000000000000000222\nDESTIN_hex2473  16.2299501351  0.0045187651  3591.67819 &lt; 0.000000000000000222\nDESTIN_hex2476  16.1314696894  0.0078267577  2061.06671 &lt; 0.000000000000000222\nDESTIN_hex2478  14.8966045652  0.0070328599  2118.14324 &lt; 0.000000000000000222\nDESTIN_hex2479  13.6254309779  0.0153107237   889.92730 &lt; 0.000000000000000222\nDESTIN_hex2480  14.0924481693  0.0219728793   641.35647 &lt; 0.000000000000000222\nDESTIN_hex2497  15.7897596649  0.0055752994  2832.09180 &lt; 0.000000000000000222\nDESTIN_hex2498  14.0621814308  0.0143634632   979.02444 &lt; 0.000000000000000222\nDESTIN_hex2499  14.9654967865  0.0082542702  1813.06117 &lt; 0.000000000000000222\nDESTIN_hex2500  14.4681734891  0.0152150734   950.91053 &lt; 0.000000000000000222\nDESTIN_hex2503  12.9741813024  0.0580699420   223.42336 &lt; 0.000000000000000222\nDESTIN_hex2504  13.0621938424  0.0311512509   419.31523 &lt; 0.000000000000000222\nDESTIN_hex2505  14.9303476287  0.0073077197  2043.09254 &lt; 0.000000000000000222\nDESTIN_hex2525  14.7873193389  0.0093482716  1581.82390 &lt; 0.000000000000000222\nDESTIN_hex2526  15.9649456239  0.0048070130  3321.17796 &lt; 0.000000000000000222\nDESTIN_hex2527  16.3563459035  0.0041043161  3985.15750 &lt; 0.000000000000000222\nDESTIN_hex2531  11.6535690304  0.1204061056    96.78553 &lt; 0.000000000000000222\nDESTIN_hex2532  14.4434388894  0.0099520060  1451.30930 &lt; 0.000000000000000222\nDESTIN_hex2533  14.4270342887  0.0150046418   961.50475 &lt; 0.000000000000000222\nDESTIN_hex2551  15.9358662535  0.0058734748  2713.19223 &lt; 0.000000000000000222\nDESTIN_hex2552  14.7115762478  0.0117976159  1246.99569 &lt; 0.000000000000000222\nDESTIN_hex2553  15.4651496929  0.0085766083  1803.17780 &lt; 0.000000000000000222\nDESTIN_hex2554  13.9328623607  0.0137047982  1016.64119 &lt; 0.000000000000000222\nDESTIN_hex2557  15.9297432045  0.0094768275  1680.91517 &lt; 0.000000000000000222\nDESTIN_hex2559  14.0599468379  0.0152157713   924.03773 &lt; 0.000000000000000222\nDESTIN_hex2579  15.1381521145  0.0071845948  2107.02935 &lt; 0.000000000000000222\nDESTIN_hex2580  16.2332389601  0.0043598170  3723.37622 &lt; 0.000000000000000222\nDESTIN_hex2581  14.8944402363  0.0080270882  1855.52220 &lt; 0.000000000000000222\nDESTIN_hex2584  13.9607467974  0.0233126337   598.84897 &lt; 0.000000000000000222\nDESTIN_hex2605  14.2396352580  0.0166988801   852.72995 &lt; 0.000000000000000222\nDESTIN_hex2606  14.6106412511  0.0186015713   785.45199 &lt; 0.000000000000000222\nDESTIN_hex2607  15.2340644840  0.0066071608  2305.68998 &lt; 0.000000000000000222\nDESTIN_hex2608  14.5801702519  0.0101525473  1436.10956 &lt; 0.000000000000000222\nDESTIN_hex2609  13.0736561629  0.0301725490   433.29638 &lt; 0.000000000000000222\nDESTIN_hex2610  13.7223281426  0.0265341025   517.15818 &lt; 0.000000000000000222\nDESTIN_hex2611  16.4636723124  0.0109776749  1499.74129 &lt; 0.000000000000000222\nDESTIN_hex2633  15.3865879443  0.0070176184  2192.56549 &lt; 0.000000000000000222\nDESTIN_hex2634  17.3183681379  0.0028300721  6119.40889 &lt; 0.000000000000000222\nDESTIN_hex2635  14.4516174416  0.0101690647  1421.13536 &lt; 0.000000000000000222\nDESTIN_hex2636  15.8236805667  0.0052286013  3026.36969 &lt; 0.000000000000000222\nDESTIN_hex2637  14.5982063325  0.0099416754  1468.38493 &lt; 0.000000000000000222\nDESTIN_hex2638  15.0361887651  0.0077318550  1944.70652 &lt; 0.000000000000000222\nDESTIN_hex2660  15.5425599341  0.0059131933  2628.45458 &lt; 0.000000000000000222\nDESTIN_hex2661  15.4582163764  0.0052706879  2932.86506 &lt; 0.000000000000000222\nDESTIN_hex2662  14.5041703411  0.0082499656  1758.08858 &lt; 0.000000000000000222\nDESTIN_hex2663  15.9434167517  0.0049638142  3211.92857 &lt; 0.000000000000000222\nDESTIN_hex2664  15.0347294448  0.0070696254  2126.66563 &lt; 0.000000000000000222\nDESTIN_hex2665  16.4147243212  0.0040543985  4048.62135 &lt; 0.000000000000000222\nDESTIN_hex2687  14.3885647636  0.0111410562  1291.49019 &lt; 0.000000000000000222\nDESTIN_hex2688  15.5168046087  0.0053596784  2895.09995 &lt; 0.000000000000000222\nDESTIN_hex2689  16.1251923154  0.0042059436  3833.90596 &lt; 0.000000000000000222\nDESTIN_hex2690  15.9876826311  0.0045046661  3549.13821 &lt; 0.000000000000000222\nDESTIN_hex2691  15.3682783347  0.0058481937  2627.86755 &lt; 0.000000000000000222\nDESTIN_hex2693  15.6338230474  0.0057301794  2728.33046 &lt; 0.000000000000000222\nDESTIN_hex2714  14.5702201013  0.0090437647  1611.07909 &lt; 0.000000000000000222\nDESTIN_hex2715  15.2770612562  0.0072857855  2096.83105 &lt; 0.000000000000000222\nDESTIN_hex2716  13.2949299895  0.0155741761   853.65222 &lt; 0.000000000000000222\nDESTIN_hex2717  15.6317321019  0.0045494090  3435.99180 &lt; 0.000000000000000222\nDESTIN_hex2718  14.5503895998  0.0091704228  1586.66508 &lt; 0.000000000000000222\nDESTIN_hex2719  15.6292107119  0.0056361362  2773.03639 &lt; 0.000000000000000222\nDESTIN_hex2742  15.7540121303  0.0051109536  3082.40170 &lt; 0.000000000000000222\nDESTIN_hex2743  15.8300691084  0.0069702226  2271.09950 &lt; 0.000000000000000222\nDESTIN_hex2744  16.1997567711  0.0037852465  4279.70983 &lt; 0.000000000000000222\nDESTIN_hex2745  16.1962157723  0.0037600499  4307.44706 &lt; 0.000000000000000222\nDESTIN_hex2746  13.8954284915  0.0140453990   989.32245 &lt; 0.000000000000000222\nDESTIN_hex2747  14.9435263943  0.0082773923  1805.34228 &lt; 0.000000000000000222\nDESTIN_hex2768  15.7618222368  0.0061435422  2565.59191 &lt; 0.000000000000000222\nDESTIN_hex2769  16.6229206703  0.0038463183  4321.77454 &lt; 0.000000000000000222\nDESTIN_hex2770  15.9843135377  0.0044575195  3585.92117 &lt; 0.000000000000000222\nDESTIN_hex2771  17.3725728610  0.0027075992  6416.22770 &lt; 0.000000000000000222\nDESTIN_hex2772  12.8950648480  0.0259150361   497.59008 &lt; 0.000000000000000222\nDESTIN_hex2773  14.5567268162  0.0082967073  1754.51854 &lt; 0.000000000000000222\nDESTIN_hex2795  14.6049150483  0.0636721875   229.37668 &lt; 0.000000000000000222\nDESTIN_hex2796  10.9121546786  0.1154878975    94.48743 &lt; 0.000000000000000222\nDESTIN_hex2797  15.7491295454  0.0053178139  2961.57967 &lt; 0.000000000000000222\nDESTIN_hex2798  14.2113023734  0.0093725038  1516.27599 &lt; 0.000000000000000222\nDESTIN_hex2799  14.9798868896  0.0064624903  2317.97435 &lt; 0.000000000000000222\nDESTIN_hex2800  16.3423009857  0.0039807806  4105.30057 &lt; 0.000000000000000222\nDESTIN_hex2801  13.2067275502  0.0295341776   447.16761 &lt; 0.000000000000000222\nDESTIN_hex2822  14.1822030995  0.0138602012  1023.23212 &lt; 0.000000000000000222\nDESTIN_hex2823  15.5066641040  0.0065433586  2369.83253 &lt; 0.000000000000000222\nDESTIN_hex2824  16.2401576187  0.0046883025  3463.97394 &lt; 0.000000000000000222\nDESTIN_hex2825  15.5444378920  0.0048492768  3205.51672 &lt; 0.000000000000000222\nDESTIN_hex2826  15.0108608071  0.0080288954  1869.60472 &lt; 0.000000000000000222\nDESTIN_hex2827  16.8897846091  0.0032451840  5204.56916 &lt; 0.000000000000000222\nDESTIN_hex2850  14.8311697993  0.0129801735  1142.60181 &lt; 0.000000000000000222\nDESTIN_hex2851  16.4832925977  0.0043327227  3804.37287 &lt; 0.000000000000000222\nDESTIN_hex2852  14.6464350700  0.0087391194  1675.96235 &lt; 0.000000000000000222\nDESTIN_hex2853  16.5798060690  0.0033428136  4959.83569 &lt; 0.000000000000000222\nDESTIN_hex2854  15.5675916630  0.0053780579  2894.64933 &lt; 0.000000000000000222\nDESTIN_hex2877  15.0830103193  0.0126947709  1188.12781 &lt; 0.000000000000000222\nDESTIN_hex2878  15.4817518905  0.0064027822  2417.97258 &lt; 0.000000000000000222\nDESTIN_hex2879  15.2533221213  0.0075113620  2030.69990 &lt; 0.000000000000000222\nDESTIN_hex2880  14.4792942223  0.0081913289  1767.63677 &lt; 0.000000000000000222\nDESTIN_hex2881  14.9844126239  0.0080391524  1863.92941 &lt; 0.000000000000000222\nDESTIN_hex2905  15.8847521835  0.0067697081  2346.44567 &lt; 0.000000000000000222\nDESTIN_hex2906  15.2218801240  0.0088349751  1722.91149 &lt; 0.000000000000000222\nDESTIN_hex2907  14.5871250799  0.0081652951  1786.47863 &lt; 0.000000000000000222\nDESTIN_hex2908  15.5825599839  0.0057078035  2730.04494 &lt; 0.000000000000000222\nDESTIN_hex2909  13.8023060749  0.0354806609   389.00927 &lt; 0.000000000000000222\nDESTIN_hex2931  16.3351210226  0.0076429731  2137.27312 &lt; 0.000000000000000222\nDESTIN_hex2932  15.5940770778  0.0082862133  1881.93044 &lt; 0.000000000000000222\nDESTIN_hex2933  16.1587554075  0.0055285687  2922.77374 &lt; 0.000000000000000222\nDESTIN_hex2934  14.8976648004  0.0073436810  2028.63725 &lt; 0.000000000000000222\nDESTIN_hex2959  16.1290487395  0.0088859085  1815.12659 &lt; 0.000000000000000222\nDESTIN_hex2960  17.2689964191  0.0069073741  2500.08125 &lt; 0.000000000000000222\nDESTIN_hex2961  15.3584864976  0.0078093656  1966.67531 &lt; 0.000000000000000222\nDESTIN_hex2962  15.7908470143  0.0057382830  2751.84178 &lt; 0.000000000000000222\nDESTIN_hex2963  15.6915538563  0.0117416262  1336.40379 &lt; 0.000000000000000222\nDESTIN_hex2987  15.9280772145  0.0106435503  1496.50039 &lt; 0.000000000000000222\nDESTIN_hex2988  13.3127007131  0.0237280875   561.05241 &lt; 0.000000000000000222\nDESTIN_hex2989  15.3774467489  0.0080166388  1918.19130 &lt; 0.000000000000000222\nDESTIN_hex2990  16.0906669145  0.0128069963  1256.39662 &lt; 0.000000000000000222\nDESTIN_hex3015  14.7980466752  0.0203022482   728.88709 &lt; 0.000000000000000222\nDESTIN_hex3016  15.4300513944  0.0117035547  1318.40725 &lt; 0.000000000000000222\nDESTIN_hex3017  15.1609149184  0.0095447281  1588.40721 &lt; 0.000000000000000222\nDESTIN_hex3040  16.5803608089  0.0061616075  2690.91480 &lt; 0.000000000000000222\nDESTIN_hex3043  14.9416453579  0.0101222936  1476.11262 &lt; 0.000000000000000222\nDESTIN_hex3044  15.2625471258  0.0096436149  1582.65830 &lt; 0.000000000000000222\nDESTIN_hex3068  15.0963061548  0.0127707083  1182.10406 &lt; 0.000000000000000222\nDESTIN_hex3070  14.5599535680  0.0205368564   708.96701 &lt; 0.000000000000000222\nDESTIN_hex3072  14.4707889285  0.0239971423   603.02134 &lt; 0.000000000000000222\nDESTIN_hex3092  17.0372060715  0.0153245538  1111.75871 &lt; 0.000000000000000222\nDESTIN_hex3098  15.7875181657  0.0077618850  2033.97992 &lt; 0.000000000000000222\nDESTIN_hex3123  17.9352316200  0.0040376524  4441.99491 &lt; 0.000000000000000222\nDESTIN_hex3126  12.3188911883  0.0596996928   206.34765 &lt; 0.000000000000000222\nDESTIN_hex3151  17.2474801217  0.0049362253  3494.06257 &lt; 0.000000000000000222\nDESTIN_hex3152  11.9374916164  0.0654086322   182.50636 &lt; 0.000000000000000222\nDESTIN_hex3173  16.3695632316  0.0241503981   677.81753 &lt; 0.000000000000000222\nDESTIN_hex3178  15.8620208916  0.0098853156  1604.60441 &lt; 0.000000000000000222\nDESTIN_hex3179  15.4959008052  0.0103311631  1499.91832 &lt; 0.000000000000000222\nDESTIN_hex3205  16.4629362934  0.0118420995  1390.20418 &lt; 0.000000000000000222\nDESTIN_hex3206  16.8564365390  0.0066083693  2550.77097 &lt; 0.000000000000000222\nDESTIN_hex3232  16.2023662307  0.0223663015   724.40972 &lt; 0.000000000000000222\nDESTIN_hex3233  15.4324330565  0.0212960776   724.66082 &lt; 0.000000000000000222\nDESTIN_hex3308  17.2585218429  0.0182181867   947.32380 &lt; 0.000000000000000222\no_housing_count  0.1276051591  0.0000886639  1439.20091 &lt; 0.000000000000000222\no_biz_count     -0.1207381596  0.0002122754  -568.78064 &lt; 0.000000000000000222\no_school_count   0.1500079367  0.0006342621   236.50780 &lt; 0.000000000000000222\no_busstop_count  0.5538186959  0.0005212239  1062.53505 &lt; 0.000000000000000222\no_mrtlrt_count   0.3330837710  0.0009775876   340.72012 &lt; 0.000000000000000222\ndist            -1.4609624634  0.0002608931 -5599.85044 &lt; 0.000000000000000222\n                   \nDESTIN_hex118   ***\nDESTIN_hex146   ***\nDESTIN_hex174   ***\nDESTIN_hex175   ***\nDESTIN_hex200   ***\nDESTIN_hex201   ***\nDESTIN_hex202   ***\nDESTIN_hex203   ***\nDESTIN_hex227   ***\nDESTIN_hex228   ***\nDESTIN_hex229   ***\nDESTIN_hex230   ***\nDESTIN_hex231   ***\nDESTIN_hex254   ***\nDESTIN_hex255   ***\nDESTIN_hex256   ***\nDESTIN_hex257   ***\nDESTIN_hex258   ***\nDESTIN_hex259   ***\nDESTIN_hex281   ***\nDESTIN_hex282   ***\nDESTIN_hex284   ***\nDESTIN_hex285   ***\nDESTIN_hex286   ***\nDESTIN_hex312   ***\nDESTIN_hex313   ***\nDESTIN_hex314   ***\nDESTIN_hex336   ***\nDESTIN_hex338   ***\nDESTIN_hex339   ***\nDESTIN_hex340   ***\nDESTIN_hex366   ***\nDESTIN_hex367   ***\nDESTIN_hex391   ***\nDESTIN_hex392   ***\nDESTIN_hex393   ***\nDESTIN_hex394   ***\nDESTIN_hex419   ***\nDESTIN_hex420   ***\nDESTIN_hex421   ***\nDESTIN_hex445   ***\nDESTIN_hex446   ***\nDESTIN_hex447   ***\nDESTIN_hex472   ***\nDESTIN_hex473   ***\nDESTIN_hex474   ***\nDESTIN_hex499   ***\nDESTIN_hex500   ***\nDESTIN_hex526   ***\nDESTIN_hex527   ***\nDESTIN_hex528   ***\nDESTIN_hex552   ***\nDESTIN_hex553   ***\nDESTIN_hex554   ***\nDESTIN_hex555   ***\nDESTIN_hex581   ***\nDESTIN_hex582   ***\nDESTIN_hex607   ***\nDESTIN_hex608   ***\nDESTIN_hex609   ***\nDESTIN_hex610   ***\nDESTIN_hex611   ***\nDESTIN_hex634   ***\nDESTIN_hex635   ***\nDESTIN_hex636   ***\nDESTIN_hex638   ***\nDESTIN_hex661   ***\nDESTIN_hex662   ***\nDESTIN_hex663   ***\nDESTIN_hex664   ***\nDESTIN_hex665   ***\nDESTIN_hex689   ***\nDESTIN_hex690   ***\nDESTIN_hex692   ***\nDESTIN_hex693   ***\nDESTIN_hex715   ***\nDESTIN_hex716   ***\nDESTIN_hex717   ***\nDESTIN_hex718   ***\nDESTIN_hex719   ***\nDESTIN_hex720   ***\nDESTIN_hex743   ***\nDESTIN_hex744   ***\nDESTIN_hex745   ***\nDESTIN_hex746   ***\nDESTIN_hex747   ***\nDESTIN_hex748   ***\nDESTIN_hex769   ***\nDESTIN_hex770   ***\nDESTIN_hex771   ***\nDESTIN_hex772   ***\nDESTIN_hex773   ***\nDESTIN_hex774   ***\nDESTIN_hex775   ***\nDESTIN_hex776   ***\nDESTIN_hex777   ***\nDESTIN_hex797   ***\nDESTIN_hex798   ***\nDESTIN_hex799   ***\nDESTIN_hex800   ***\nDESTIN_hex802   ***\nDESTIN_hex803   ***\nDESTIN_hex805   ***\nDESTIN_hex806   ***\nDESTIN_hex823   ***\nDESTIN_hex824   ***\nDESTIN_hex825   ***\nDESTIN_hex826   ***\nDESTIN_hex827   ***\nDESTIN_hex832   ***\nDESTIN_hex833   ***\nDESTIN_hex851   ***\nDESTIN_hex852   ***\nDESTIN_hex853   ***\nDESTIN_hex854   ***\nDESTIN_hex856   ***\nDESTIN_hex861   ***\nDESTIN_hex862   ***\nDESTIN_hex878   ***\nDESTIN_hex879   ***\nDESTIN_hex880   ***\nDESTIN_hex881   ***\nDESTIN_hex888   ***\nDESTIN_hex889   ***\nDESTIN_hex905   ***\nDESTIN_hex906   ***\nDESTIN_hex907   ***\nDESTIN_hex908   ***\nDESTIN_hex910   ***\nDESTIN_hex932   ***\nDESTIN_hex933   ***\nDESTIN_hex934   ***\nDESTIN_hex935   ***\nDESTIN_hex937   ***\nDESTIN_hex959   ***\nDESTIN_hex960   ***\nDESTIN_hex961   ***\nDESTIN_hex962   ***\nDESTIN_hex986   ***\nDESTIN_hex987   ***\nDESTIN_hex988   ***\nDESTIN_hex989   ***\nDESTIN_hex991   ***\nDESTIN_hex1013  ***\nDESTIN_hex1014  ***\nDESTIN_hex1015  ***\nDESTIN_hex1016  ***\nDESTIN_hex1042  ***\nDESTIN_hex1043  ***\nDESTIN_hex1045  ***\nDESTIN_hex1067  ***\nDESTIN_hex1068  ***\nDESTIN_hex1069  ***\nDESTIN_hex1070  ***\nDESTIN_hex1078  ***\nDESTIN_hex1093  ***\nDESTIN_hex1094  ***\nDESTIN_hex1095  ***\nDESTIN_hex1096  ***\nDESTIN_hex1097  ***\nDESTIN_hex1099  ***\nDESTIN_hex1100  ***\nDESTIN_hex1122  ***\nDESTIN_hex1123  ***\nDESTIN_hex1124  ***\nDESTIN_hex1125  ***\nDESTIN_hex1126  ***\nDESTIN_hex1127  ***\nDESTIN_hex1128  ***\nDESTIN_hex1132  ***\nDESTIN_hex1147  ***\nDESTIN_hex1148  ***\nDESTIN_hex1149  ***\nDESTIN_hex1150  ***\nDESTIN_hex1151  ***\nDESTIN_hex1152  ***\nDESTIN_hex1153  ***\nDESTIN_hex1154  ***\nDESTIN_hex1155  ***\nDESTIN_hex1158  ***\nDESTIN_hex1174  ***\nDESTIN_hex1175  ***\nDESTIN_hex1176  ***\nDESTIN_hex1177  ***\nDESTIN_hex1178  ***\nDESTIN_hex1179  ***\nDESTIN_hex1180  ***\nDESTIN_hex1181  ***\nDESTIN_hex1182  ***\nDESTIN_hex1183  ***\nDESTIN_hex1185  ***\nDESTIN_hex1201  ***\nDESTIN_hex1202  ***\nDESTIN_hex1203  ***\nDESTIN_hex1205  ***\nDESTIN_hex1206  ***\nDESTIN_hex1207  ***\nDESTIN_hex1209  ***\nDESTIN_hex1210  ***\nDESTIN_hex1211  ***\nDESTIN_hex1212  ***\nDESTIN_hex1228  ***\nDESTIN_hex1229  ***\nDESTIN_hex1230  ***\nDESTIN_hex1231  ***\nDESTIN_hex1232  ***\nDESTIN_hex1233  ***\nDESTIN_hex1235  ***\nDESTIN_hex1236  ***\nDESTIN_hex1237  ***\nDESTIN_hex1238  ***\nDESTIN_hex1239  ***\nDESTIN_hex1240  ***\nDESTIN_hex1255  ***\nDESTIN_hex1256  ***\nDESTIN_hex1257  ***\nDESTIN_hex1258  ***\nDESTIN_hex1259  ***\nDESTIN_hex1261  ***\nDESTIN_hex1262  ***\nDESTIN_hex1263  ***\nDESTIN_hex1264  ***\nDESTIN_hex1265  ***\nDESTIN_hex1266  ***\nDESTIN_hex1282  ***\nDESTIN_hex1283  ***\nDESTIN_hex1284  ***\nDESTIN_hex1285  ***\nDESTIN_hex1286  ***\nDESTIN_hex1287  ***\nDESTIN_hex1288  ***\nDESTIN_hex1289  ***\nDESTIN_hex1293  ***\nDESTIN_hex1308  ***\nDESTIN_hex1309  ***\nDESTIN_hex1310  ***\nDESTIN_hex1311  ***\nDESTIN_hex1312  ***\nDESTIN_hex1314  ***\nDESTIN_hex1315  ***\nDESTIN_hex1316  ***\nDESTIN_hex1318  ***\nDESTIN_hex1319  ***\nDESTIN_hex1320  ***\nDESTIN_hex1335  ***\nDESTIN_hex1336  ***\nDESTIN_hex1337  ***\nDESTIN_hex1338  ***\nDESTIN_hex1339  ***\nDESTIN_hex1340  ***\nDESTIN_hex1341  ***\nDESTIN_hex1342  ***\nDESTIN_hex1343  ***\nDESTIN_hex1347  ***\nDESTIN_hex1348  ***\nDESTIN_hex1362  ***\nDESTIN_hex1363  ***\nDESTIN_hex1364  ***\nDESTIN_hex1366  ***\nDESTIN_hex1367  ***\nDESTIN_hex1368  ***\nDESTIN_hex1369  ***\nDESTIN_hex1370  ***\nDESTIN_hex1372  ***\nDESTIN_hex1374  ***\nDESTIN_hex1375  ***\nDESTIN_hex1389  ***\nDESTIN_hex1390  ***\nDESTIN_hex1391  ***\nDESTIN_hex1392  ***\nDESTIN_hex1394  ***\nDESTIN_hex1396  ***\nDESTIN_hex1397  ***\nDESTIN_hex1401  ***\nDESTIN_hex1402  ***\nDESTIN_hex1416  ***\nDESTIN_hex1417  ***\nDESTIN_hex1418  ***\nDESTIN_hex1419  ***\nDESTIN_hex1420  ***\nDESTIN_hex1422  ***\nDESTIN_hex1423  ***\nDESTIN_hex1426  ***\nDESTIN_hex1428  ***\nDESTIN_hex1429  ***\nDESTIN_hex1443  ***\nDESTIN_hex1444  ***\nDESTIN_hex1445  ***\nDESTIN_hex1446  ***\nDESTIN_hex1447  ***\nDESTIN_hex1455  ***\nDESTIN_hex1456  ***\nDESTIN_hex1457  ***\nDESTIN_hex1469  ***\nDESTIN_hex1470  ***\nDESTIN_hex1471  ***\nDESTIN_hex1472  ***\nDESTIN_hex1480  ***\nDESTIN_hex1482  ***\nDESTIN_hex1483  ***\nDESTIN_hex1496  ***\nDESTIN_hex1497  ***\nDESTIN_hex1498  ***\nDESTIN_hex1499  ***\nDESTIN_hex1500  ***\nDESTIN_hex1501  ***\nDESTIN_hex1507  ***\nDESTIN_hex1509  ***\nDESTIN_hex1510  ***\nDESTIN_hex1511  ***\nDESTIN_hex1523  ***\nDESTIN_hex1524  ***\nDESTIN_hex1525  ***\nDESTIN_hex1526  ***\nDESTIN_hex1527  ***\nDESTIN_hex1534  ***\nDESTIN_hex1536  ***\nDESTIN_hex1537  ***\nDESTIN_hex1550  ***\nDESTIN_hex1551  ***\nDESTIN_hex1552  ***\nDESTIN_hex1553  ***\nDESTIN_hex1554  ***\nDESTIN_hex1555  ***\nDESTIN_hex1562  ***\nDESTIN_hex1563  ***\nDESTIN_hex1564  ***\nDESTIN_hex1565  ***\nDESTIN_hex1576  ***\nDESTIN_hex1578  ***\nDESTIN_hex1579  ***\nDESTIN_hex1581  ***\nDESTIN_hex1588  ***\nDESTIN_hex1590  ***\nDESTIN_hex1591  ***\nDESTIN_hex1592  ***\nDESTIN_hex1604  ***\nDESTIN_hex1605  ***\nDESTIN_hex1606  ***\nDESTIN_hex1607  ***\nDESTIN_hex1616  ***\nDESTIN_hex1617  ***\nDESTIN_hex1618  ***\nDESTIN_hex1619  ***\nDESTIN_hex1620  ***\nDESTIN_hex1630  ***\nDESTIN_hex1631  ***\nDESTIN_hex1632  ***\nDESTIN_hex1633  ***\nDESTIN_hex1634  ***\nDESTIN_hex1635  ***\nDESTIN_hex1642  ***\nDESTIN_hex1644  ***\nDESTIN_hex1645  ***\nDESTIN_hex1646  ***\nDESTIN_hex1647  ***\nDESTIN_hex1658  ***\nDESTIN_hex1659  ***\nDESTIN_hex1660  ***\nDESTIN_hex1661  ***\nDESTIN_hex1662  ***\nDESTIN_hex1669  ***\nDESTIN_hex1670  ***\nDESTIN_hex1672  ***\nDESTIN_hex1673  ***\nDESTIN_hex1674  ***\nDESTIN_hex1684  ***\nDESTIN_hex1685  ***\nDESTIN_hex1686  ***\nDESTIN_hex1687  ***\nDESTIN_hex1688  ***\nDESTIN_hex1689  ***\nDESTIN_hex1695  ***\nDESTIN_hex1699  ***\nDESTIN_hex1700  ***\nDESTIN_hex1701  ***\nDESTIN_hex1712  ***\nDESTIN_hex1713  ***\nDESTIN_hex1714  ***\nDESTIN_hex1716  ***\nDESTIN_hex1723  ***\nDESTIN_hex1726  ***\nDESTIN_hex1727  ***\nDESTIN_hex1728  ***\nDESTIN_hex1738  ***\nDESTIN_hex1739  ***\nDESTIN_hex1740  ***\nDESTIN_hex1741  ***\nDESTIN_hex1743  ***\nDESTIN_hex1744  ***\nDESTIN_hex1748  ***\nDESTIN_hex1749  ***\nDESTIN_hex1753  ***\nDESTIN_hex1754  ***\nDESTIN_hex1765  ***\nDESTIN_hex1766  ***\nDESTIN_hex1767  ***\nDESTIN_hex1768  ***\nDESTIN_hex1770  ***\nDESTIN_hex1771  ***\nDESTIN_hex1776  ***\nDESTIN_hex1777  ***\nDESTIN_hex1778  ***\nDESTIN_hex1780  ***\nDESTIN_hex1781  ***\nDESTIN_hex1791  ***\nDESTIN_hex1792  ***\nDESTIN_hex1793  ***\nDESTIN_hex1794  ***\nDESTIN_hex1795  ***\nDESTIN_hex1796  ***\nDESTIN_hex1798  ***\nDESTIN_hex1800  ***\nDESTIN_hex1802  ***\nDESTIN_hex1804  ***\nDESTIN_hex1805  ***\nDESTIN_hex1806  ***\nDESTIN_hex1807  ***\nDESTIN_hex1808  ***\nDESTIN_hex1820  ***\nDESTIN_hex1821  ***\nDESTIN_hex1822  ***\nDESTIN_hex1823  ***\nDESTIN_hex1824  ***\nDESTIN_hex1827  ***\nDESTIN_hex1828  ***\nDESTIN_hex1829  ***\nDESTIN_hex1831  ***\nDESTIN_hex1833  ***\nDESTIN_hex1834  ***\nDESTIN_hex1835  ***\nDESTIN_hex1846  ***\nDESTIN_hex1847  ***\nDESTIN_hex1848  ***\nDESTIN_hex1849  ***\nDESTIN_hex1850  ***\nDESTIN_hex1852  ***\nDESTIN_hex1853  ***\nDESTIN_hex1854  ***\nDESTIN_hex1855  ***\nDESTIN_hex1856  ***\nDESTIN_hex1857  ***\nDESTIN_hex1858  ***\nDESTIN_hex1859  ***\nDESTIN_hex1860  ***\nDESTIN_hex1861  ***\nDESTIN_hex1862  ***\nDESTIN_hex1874  ***\nDESTIN_hex1875  ***\nDESTIN_hex1876  ***\nDESTIN_hex1877  ***\nDESTIN_hex1878  ***\nDESTIN_hex1879  ***\nDESTIN_hex1882  ***\nDESTIN_hex1883  ***\nDESTIN_hex1884  ***\nDESTIN_hex1886  ***\nDESTIN_hex1887  ***\nDESTIN_hex1888  ***\nDESTIN_hex1889  ***\nDESTIN_hex1890  ***\nDESTIN_hex1900  ***\nDESTIN_hex1901  ***\nDESTIN_hex1902  ***\nDESTIN_hex1903  ***\nDESTIN_hex1904  ***\nDESTIN_hex1905  ***\nDESTIN_hex1906  ***\nDESTIN_hex1907  ***\nDESTIN_hex1908  ***\nDESTIN_hex1909  ***\nDESTIN_hex1910  ***\nDESTIN_hex1912  ***\nDESTIN_hex1913  ***\nDESTIN_hex1914  ***\nDESTIN_hex1916  ***\nDESTIN_hex1928  ***\nDESTIN_hex1929  ***\nDESTIN_hex1930  ***\nDESTIN_hex1931  ***\nDESTIN_hex1932  ***\nDESTIN_hex1933  ***\nDESTIN_hex1934  ***\nDESTIN_hex1935  ***\nDESTIN_hex1936  ***\nDESTIN_hex1937  ***\nDESTIN_hex1938  ***\nDESTIN_hex1940  ***\nDESTIN_hex1941  ***\nDESTIN_hex1942  ***\nDESTIN_hex1954  ***\nDESTIN_hex1955  ***\nDESTIN_hex1956  ***\nDESTIN_hex1958  ***\nDESTIN_hex1959  ***\nDESTIN_hex1960  ***\nDESTIN_hex1961  ***\nDESTIN_hex1962  ***\nDESTIN_hex1963  ***\nDESTIN_hex1964  ***\nDESTIN_hex1967  ***\nDESTIN_hex1968  ***\nDESTIN_hex1982  ***\nDESTIN_hex1983  ***\nDESTIN_hex1984  ***\nDESTIN_hex1985  ***\nDESTIN_hex1986  ***\nDESTIN_hex1987  ***\nDESTIN_hex1988  ***\nDESTIN_hex1989  ***\nDESTIN_hex1990  ***\nDESTIN_hex1991  ***\nDESTIN_hex1992  ***\nDESTIN_hex1994  ***\nDESTIN_hex1995  ***\nDESTIN_hex2009  ***\nDESTIN_hex2010  ***\nDESTIN_hex2011  ***\nDESTIN_hex2012  ***\nDESTIN_hex2013  ***\nDESTIN_hex2014  ***\nDESTIN_hex2015  ***\nDESTIN_hex2016  ***\nDESTIN_hex2017  ***\nDESTIN_hex2021  ***\nDESTIN_hex2036  ***\nDESTIN_hex2037  ***\nDESTIN_hex2038  ***\nDESTIN_hex2039  ***\nDESTIN_hex2040  ***\nDESTIN_hex2041  ***\nDESTIN_hex2042  ***\nDESTIN_hex2043  ***\nDESTIN_hex2044  ***\nDESTIN_hex2046  ***\nDESTIN_hex2049  ***\nDESTIN_hex2063  ***\nDESTIN_hex2064  ***\nDESTIN_hex2065  ***\nDESTIN_hex2066  ***\nDESTIN_hex2067  ***\nDESTIN_hex2068  ***\nDESTIN_hex2069  ***\nDESTIN_hex2070  ***\nDESTIN_hex2071  ***\nDESTIN_hex2072  ***\nDESTIN_hex2074  ***\nDESTIN_hex2089  ***\nDESTIN_hex2090  ***\nDESTIN_hex2091  ***\nDESTIN_hex2092  ***\nDESTIN_hex2093  ***\nDESTIN_hex2094  ***\nDESTIN_hex2095  ***\nDESTIN_hex2096  ***\nDESTIN_hex2097  ***\nDESTIN_hex2098  ***\nDESTIN_hex2100  ***\nDESTIN_hex2101  ***\nDESTIN_hex2102  ***\nDESTIN_hex2116  ***\nDESTIN_hex2117  ***\nDESTIN_hex2119  ***\nDESTIN_hex2120  ***\nDESTIN_hex2121  ***\nDESTIN_hex2122  ***\nDESTIN_hex2123  ***\nDESTIN_hex2124  ***\nDESTIN_hex2125  ***\nDESTIN_hex2126  ***\nDESTIN_hex2129  ***\nDESTIN_hex2146  ***\nDESTIN_hex2147  ***\nDESTIN_hex2148  ***\nDESTIN_hex2149  ***\nDESTIN_hex2150  ***\nDESTIN_hex2151  ***\nDESTIN_hex2152  ***\nDESTIN_hex2153  ***\nDESTIN_hex2154  ***\nDESTIN_hex2155  ***\nDESTIN_hex2171  ***\nDESTIN_hex2172  ***\nDESTIN_hex2174  ***\nDESTIN_hex2175  ***\nDESTIN_hex2176  ***\nDESTIN_hex2177  ***\nDESTIN_hex2178  ***\nDESTIN_hex2179  ***\nDESTIN_hex2180  ***\nDESTIN_hex2181  ***\nDESTIN_hex2182  ***\nDESTIN_hex2200  ***\nDESTIN_hex2201  ***\nDESTIN_hex2202  ***\nDESTIN_hex2203  ***\nDESTIN_hex2204  ***\nDESTIN_hex2205  ***\nDESTIN_hex2206  ***\nDESTIN_hex2207  ***\nDESTIN_hex2208  ***\nDESTIN_hex2209  ***\nDESTIN_hex2227  ***\nDESTIN_hex2228  ***\nDESTIN_hex2229  ***\nDESTIN_hex2230  ***\nDESTIN_hex2231  ***\nDESTIN_hex2233  ***\nDESTIN_hex2234  ***\nDESTIN_hex2235  ***\nDESTIN_hex2254  ***\nDESTIN_hex2255  ***\nDESTIN_hex2256  ***\nDESTIN_hex2257  ***\nDESTIN_hex2258  ***\nDESTIN_hex2259  ***\nDESTIN_hex2260  ***\nDESTIN_hex2261  ***\nDESTIN_hex2262  ***\nDESTIN_hex2281  ***\nDESTIN_hex2282  ***\nDESTIN_hex2283  ***\nDESTIN_hex2284  ***\nDESTIN_hex2285  ***\nDESTIN_hex2286  ***\nDESTIN_hex2287  ***\nDESTIN_hex2288  ***\nDESTIN_hex2308  ***\nDESTIN_hex2309  ***\nDESTIN_hex2310  ***\nDESTIN_hex2311  ***\nDESTIN_hex2312  ***\nDESTIN_hex2313  ***\nDESTIN_hex2314  ***\nDESTIN_hex2315  ***\nDESTIN_hex2316  ***\nDESTIN_hex2317  ***\nDESTIN_hex2335  ***\nDESTIN_hex2336  ***\nDESTIN_hex2337  ***\nDESTIN_hex2338  ***\nDESTIN_hex2339  ***\nDESTIN_hex2340  ***\nDESTIN_hex2341  ***\nDESTIN_hex2342  ***\nDESTIN_hex2343  ***\nDESTIN_hex2362  ***\nDESTIN_hex2363  ***\nDESTIN_hex2364  ***\nDESTIN_hex2365  ***\nDESTIN_hex2366  ***\nDESTIN_hex2367  ***\nDESTIN_hex2368  ***\nDESTIN_hex2369  ***\nDESTIN_hex2370  ***\nDESTIN_hex2371  ***\nDESTIN_hex2389  ***\nDESTIN_hex2390  ***\nDESTIN_hex2391  ***\nDESTIN_hex2392  ***\nDESTIN_hex2393  ***\nDESTIN_hex2394  ***\nDESTIN_hex2395  ***\nDESTIN_hex2396  ***\nDESTIN_hex2397  ***\nDESTIN_hex2398  ***\nDESTIN_hex2416  ***\nDESTIN_hex2417  ***\nDESTIN_hex2418  ***\nDESTIN_hex2419  ***\nDESTIN_hex2420  ***\nDESTIN_hex2422  ***\nDESTIN_hex2423  ***\nDESTIN_hex2424  ***\nDESTIN_hex2425  ***\nDESTIN_hex2426  ***\nDESTIN_hex2443  ***\nDESTIN_hex2444  ***\nDESTIN_hex2445  ***\nDESTIN_hex2448  ***\nDESTIN_hex2449  ***\nDESTIN_hex2450  ***\nDESTIN_hex2451  ***\nDESTIN_hex2452  ***\nDESTIN_hex2471  ***\nDESTIN_hex2472  ***\nDESTIN_hex2473  ***\nDESTIN_hex2476  ***\nDESTIN_hex2478  ***\nDESTIN_hex2479  ***\nDESTIN_hex2480  ***\nDESTIN_hex2497  ***\nDESTIN_hex2498  ***\nDESTIN_hex2499  ***\nDESTIN_hex2500  ***\nDESTIN_hex2503  ***\nDESTIN_hex2504  ***\nDESTIN_hex2505  ***\nDESTIN_hex2525  ***\nDESTIN_hex2526  ***\nDESTIN_hex2527  ***\nDESTIN_hex2531  ***\nDESTIN_hex2532  ***\nDESTIN_hex2533  ***\nDESTIN_hex2551  ***\nDESTIN_hex2552  ***\nDESTIN_hex2553  ***\nDESTIN_hex2554  ***\nDESTIN_hex2557  ***\nDESTIN_hex2559  ***\nDESTIN_hex2579  ***\nDESTIN_hex2580  ***\nDESTIN_hex2581  ***\nDESTIN_hex2584  ***\nDESTIN_hex2605  ***\nDESTIN_hex2606  ***\nDESTIN_hex2607  ***\nDESTIN_hex2608  ***\nDESTIN_hex2609  ***\nDESTIN_hex2610  ***\nDESTIN_hex2611  ***\nDESTIN_hex2633  ***\nDESTIN_hex2634  ***\nDESTIN_hex2635  ***\nDESTIN_hex2636  ***\nDESTIN_hex2637  ***\nDESTIN_hex2638  ***\nDESTIN_hex2660  ***\nDESTIN_hex2661  ***\nDESTIN_hex2662  ***\nDESTIN_hex2663  ***\nDESTIN_hex2664  ***\nDESTIN_hex2665  ***\nDESTIN_hex2687  ***\nDESTIN_hex2688  ***\nDESTIN_hex2689  ***\nDESTIN_hex2690  ***\nDESTIN_hex2691  ***\nDESTIN_hex2693  ***\nDESTIN_hex2714  ***\nDESTIN_hex2715  ***\nDESTIN_hex2716  ***\nDESTIN_hex2717  ***\nDESTIN_hex2718  ***\nDESTIN_hex2719  ***\nDESTIN_hex2742  ***\nDESTIN_hex2743  ***\nDESTIN_hex2744  ***\nDESTIN_hex2745  ***\nDESTIN_hex2746  ***\nDESTIN_hex2747  ***\nDESTIN_hex2768  ***\nDESTIN_hex2769  ***\nDESTIN_hex2770  ***\nDESTIN_hex2771  ***\nDESTIN_hex2772  ***\nDESTIN_hex2773  ***\nDESTIN_hex2795  ***\nDESTIN_hex2796  ***\nDESTIN_hex2797  ***\nDESTIN_hex2798  ***\nDESTIN_hex2799  ***\nDESTIN_hex2800  ***\nDESTIN_hex2801  ***\nDESTIN_hex2822  ***\nDESTIN_hex2823  ***\nDESTIN_hex2824  ***\nDESTIN_hex2825  ***\nDESTIN_hex2826  ***\nDESTIN_hex2827  ***\nDESTIN_hex2850  ***\nDESTIN_hex2851  ***\nDESTIN_hex2852  ***\nDESTIN_hex2853  ***\nDESTIN_hex2854  ***\nDESTIN_hex2877  ***\nDESTIN_hex2878  ***\nDESTIN_hex2879  ***\nDESTIN_hex2880  ***\nDESTIN_hex2881  ***\nDESTIN_hex2905  ***\nDESTIN_hex2906  ***\nDESTIN_hex2907  ***\nDESTIN_hex2908  ***\nDESTIN_hex2909  ***\nDESTIN_hex2931  ***\nDESTIN_hex2932  ***\nDESTIN_hex2933  ***\nDESTIN_hex2934  ***\nDESTIN_hex2959  ***\nDESTIN_hex2960  ***\nDESTIN_hex2961  ***\nDESTIN_hex2962  ***\nDESTIN_hex2963  ***\nDESTIN_hex2987  ***\nDESTIN_hex2988  ***\nDESTIN_hex2989  ***\nDESTIN_hex2990  ***\nDESTIN_hex3015  ***\nDESTIN_hex3016  ***\nDESTIN_hex3017  ***\nDESTIN_hex3040  ***\nDESTIN_hex3043  ***\nDESTIN_hex3044  ***\nDESTIN_hex3068  ***\nDESTIN_hex3070  ***\nDESTIN_hex3072  ***\nDESTIN_hex3092  ***\nDESTIN_hex3098  ***\nDESTIN_hex3123  ***\nDESTIN_hex3126  ***\nDESTIN_hex3151  ***\nDESTIN_hex3152  ***\nDESTIN_hex3173  ***\nDESTIN_hex3178  ***\nDESTIN_hex3179  ***\nDESTIN_hex3205  ***\nDESTIN_hex3206  ***\nDESTIN_hex3232  ***\nDESTIN_hex3233  ***\nDESTIN_hex3308  ***\no_housing_count ***\no_biz_count     ***\no_school_count  ***\no_busstop_count ***\no_mrtlrt_count  ***\ndist            ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 341321396  on 65051  degrees of freedom\nResidual deviance:  36294465  on 64224  degrees of freedom\nAIC: 36653143\n\nNumber of Fisher Scoring iterations: 8\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nBy absolute value, the most influential variable is the Distance between origin and destination. The negative coefficient means there is an inverse relationship between Distance and Number of Trips: More trips are made when the distance is nearer, while less trips are made when the distance is further.\nThe most propulsive variable appears to be Bus Stop counts at the origin site with a coefficient of 0.553: More trips are made when there is higher bus stop density at the origin site, while less trips are made when there is lower bus stop density at the origin site.\nThere is an inverse relationship between the number of businesses at the origin and Number of Trips: More bus trips are made when there are less businesses at the origin, while less bus trips are made when there are more businesses at the origin.\nInterestingly, unlike with business density, there is a direct relationship between school density at origin site and bus trips: More bus trips are made when there are more schools at the origin, while less bus trips are made when there are less schools at the origin. This could be due to the relationship between schools and bus stop as a result of urban planning – most schools have at least one bus stop immediately within the vicinity of the school.\n\n\n\n\n\nCode\nCalcRSquared(decSIM$data$TOTAL_TRIPS, decSIM$fitted.values)\n\n\n[1] 0.4144590931\n\n\n\n\n\n\n\n\nInsights\n\n\n\nWith reference to the R2 above, it can be concluded that the model accounts for almost 41.44% of the variation of flows."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#doubly-constrained-spatial-interaction-model",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#doubly-constrained-spatial-interaction-model",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Doubly Constrained Spatial Interaction Model",
    "text": "Doubly Constrained Spatial Interaction Model\nNext, fit a doubly constrained SIM by using the code chunk below.\n\n\nCode\ndbcSIM &lt;- glm(formula = TOTAL_TRIPS ~ \n                ORIGIN_hex + \n                DESTIN_hex + \n                dist,\n              family = poisson(link = \"log\"),\n              data = flow_data_log,\n              na.action = na.exclude)\n\n\n\n\nCode\nsummary(dbcSIM)\n\n\n\nCall:\nglm(formula = TOTAL_TRIPS ~ ORIGIN_hex + DESTIN_hex + dist, family = poisson(link = \"log\"), \n    data = flow_data_log, na.action = na.exclude)\n\nDeviance Residuals: \n       Min          1Q      Median          3Q         Max  \n-189.23777    -9.59267    -3.37029     2.29728   372.68284  \n\nCoefficients:\n                    Estimate    Std. Error     z value               Pr(&gt;|z|)\n(Intercept)    14.3800438474  0.1374345620   104.63193 &lt; 0.000000000000000222\nORIGIN_hex146   2.1835203793  0.1912090937    11.41954 &lt; 0.000000000000000222\nORIGIN_hex174   2.1384201895  0.1978768354    10.80682 &lt; 0.000000000000000222\nORIGIN_hex175   0.1038432960  0.1693595948     0.61315             0.53977536\nORIGIN_hex200  -0.4966627544  0.1501239095    -3.30835             0.00093847\nORIGIN_hex201   1.7389270413  0.1300958785    13.36650 &lt; 0.000000000000000222\nORIGIN_hex202   3.3861740906  0.1299735913    26.05279 &lt; 0.000000000000000222\nORIGIN_hex203   0.7830595914  0.1373789614     5.70000 0.00000001198099271729\nORIGIN_hex227   2.3025870011  0.1435896399    16.03589 &lt; 0.000000000000000222\nORIGIN_hex228   0.9826573869  0.1315819019     7.46803 0.00000000000008140525\nORIGIN_hex229   2.3885492037  0.1495380994    15.97285 &lt; 0.000000000000000222\nORIGIN_hex230   4.2239518256  0.1287714476    32.80193 &lt; 0.000000000000000222\nORIGIN_hex231   0.8030467017  0.1451949786     5.53082 0.00000003187446490472\nORIGIN_hex254   4.5153366053  0.1292211758    34.94270 &lt; 0.000000000000000222\nORIGIN_hex255   1.0923572017  0.1447844683     7.54471 0.00000000000004532860\nORIGIN_hex256   1.6197444529  0.1375821561    11.77293 &lt; 0.000000000000000222\nORIGIN_hex257   2.5860306846  0.1293532026    19.99201 &lt; 0.000000000000000222\nORIGIN_hex258   0.4537789331  0.1457984916     3.11237             0.00185591\nORIGIN_hex259   0.9984929285  0.1369997050     7.28829 0.00000000000031392479\nORIGIN_hex281   2.5308770666  0.1356518268    18.65715 &lt; 0.000000000000000222\nORIGIN_hex282   1.9952119647  0.1383730855    14.41908 &lt; 0.000000000000000222\nORIGIN_hex284   1.9893878335  0.1330659238    14.95039 &lt; 0.000000000000000222\nORIGIN_hex285   2.9964803672  0.1299802758    23.05335 &lt; 0.000000000000000222\nORIGIN_hex286   5.4024286875  0.1279344002    42.22812 &lt; 0.000000000000000222\nORIGIN_hex312   0.9634289130  0.1446105219     6.66223 0.00000000002696989882\nORIGIN_hex313   1.1345973471  0.1371344092     8.27362 &lt; 0.000000000000000222\nORIGIN_hex314   1.9385952633  0.1324591472    14.63542 &lt; 0.000000000000000222\nORIGIN_hex336   0.2659822141  0.1845139320     1.44153             0.14943524\nORIGIN_hex338   1.8472202344  0.1342897616    13.75548 &lt; 0.000000000000000222\nORIGIN_hex339   4.4423924564  0.1280550158    34.69128 &lt; 0.000000000000000222\nORIGIN_hex340  -0.4413742068  0.1929525670    -2.28748             0.02216810\nORIGIN_hex366   5.2201051270  0.1281276124    40.74145 &lt; 0.000000000000000222\nORIGIN_hex367   2.6116337525  0.1304827062    20.01517 &lt; 0.000000000000000222\nORIGIN_hex391   2.8628531884  0.1546821649    18.50797 &lt; 0.000000000000000222\nORIGIN_hex392   5.0539456013  0.1281732636    39.43058 &lt; 0.000000000000000222\nORIGIN_hex393   2.8709110731  0.1304578460    22.00643 &lt; 0.000000000000000222\nORIGIN_hex394   0.0105633390  0.2747485634     0.03845             0.96933105\nORIGIN_hex419   0.6993416600  0.1545975424     4.52363 0.00000607887353914640\nORIGIN_hex420   3.3226347090  0.1317519331    25.21887 &lt; 0.000000000000000222\nORIGIN_hex421   0.9775549108  0.1757428231     5.56242 0.00000002660632023985\nORIGIN_hex445   2.1986220276  0.1323620192    16.61067 &lt; 0.000000000000000222\nORIGIN_hex446   3.8760142999  0.1286525082    30.12778 &lt; 0.000000000000000222\nORIGIN_hex447   1.7021490345  0.1395567167    12.19683 &lt; 0.000000000000000222\nORIGIN_hex472  -0.2326678589  0.1854568017    -1.25457             0.20963623\nORIGIN_hex473   1.2093256276  0.1371808701     8.81556 &lt; 0.000000000000000222\nORIGIN_hex474   1.9398760993  0.1373276572    14.12590 &lt; 0.000000000000000222\nORIGIN_hex499   0.5497510262  0.1349205673     4.07463 0.00004608809849972528\nORIGIN_hex500   3.8888189028  0.1284710367    30.27000 &lt; 0.000000000000000222\nORIGIN_hex526   1.6934666477  0.1315585967    12.87234 &lt; 0.000000000000000222\nORIGIN_hex527   2.0871439114  0.1377332819    15.15352 &lt; 0.000000000000000222\nORIGIN_hex528   2.6194623383  0.1323566384    19.79094 &lt; 0.000000000000000222\nORIGIN_hex552   0.4487328360  0.1393988141     3.21906             0.00128613\nORIGIN_hex553  -1.7226175524  0.1818835871    -9.47099 &lt; 0.000000000000000222\nORIGIN_hex554   1.7518924348  0.1331677156    13.15553 &lt; 0.000000000000000222\nORIGIN_hex555   1.7701139547  0.1343352233    13.17684 &lt; 0.000000000000000222\nORIGIN_hex581   1.5926355723  0.1316030919    12.10181 &lt; 0.000000000000000222\nORIGIN_hex582   1.8363988663  0.1317128904    13.94244 &lt; 0.000000000000000222\nORIGIN_hex607   1.3246429181  0.1351216944     9.80333 &lt; 0.000000000000000222\nORIGIN_hex608   1.1856136019  0.1344894215     8.81566 &lt; 0.000000000000000222\nORIGIN_hex609   6.5544082248  0.1280102543    51.20221 &lt; 0.000000000000000222\nORIGIN_hex610   2.0871312399  0.1388114781    15.03573 &lt; 0.000000000000000222\nORIGIN_hex611   0.2050112082  0.2963459368     0.69180             0.48906487\nORIGIN_hex634   2.6149026263  0.1328263584    19.68662 &lt; 0.000000000000000222\nORIGIN_hex635   0.1670284663  0.1422416346     1.17426             0.24029145\nORIGIN_hex636   2.8372646163  0.1287369419    22.03924 &lt; 0.000000000000000222\nORIGIN_hex638   2.7997550875  0.1300060168    21.53558 &lt; 0.000000000000000222\nORIGIN_hex661   2.0351241647  0.1409036302    14.44338 &lt; 0.000000000000000222\nORIGIN_hex662   2.3437489860  0.1331494998    17.60239 &lt; 0.000000000000000222\nORIGIN_hex663   2.3935238872  0.1302330019    18.37878 &lt; 0.000000000000000222\nORIGIN_hex664   2.5303250624  0.1359552392    18.61146 &lt; 0.000000000000000222\nORIGIN_hex665   3.4273676339  0.1286912842    26.63248 &lt; 0.000000000000000222\nORIGIN_hex689   0.6419006813  0.1342219311     4.78238 0.00000173229219151876\nORIGIN_hex690   2.3252238585  0.1318771496    17.63174 &lt; 0.000000000000000222\nORIGIN_hex692   3.4579512397  0.1286492696    26.87890 &lt; 0.000000000000000222\nORIGIN_hex693   2.7404862133  0.1304651426    21.00551 &lt; 0.000000000000000222\nORIGIN_hex715   0.7119714202  0.1395628078     5.10144 0.00000033707722717034\nORIGIN_hex716   2.0230066501  0.1330876110    15.20056 &lt; 0.000000000000000222\nORIGIN_hex717   3.4418366897  0.1291413679    26.65170 &lt; 0.000000000000000222\nORIGIN_hex718   6.6811726951  0.1280693007    52.16842 &lt; 0.000000000000000222\nORIGIN_hex719   3.2406474883  0.1292916332    25.06463 &lt; 0.000000000000000222\nORIGIN_hex720  -0.6501733605  0.2882383329    -2.25568             0.02409070\nORIGIN_hex743   2.1826831575  0.1303181747    16.74888 &lt; 0.000000000000000222\nORIGIN_hex744   2.9872537082  0.1304716149    22.89581 &lt; 0.000000000000000222\nORIGIN_hex745   5.0067933150  0.1281468912    39.07074 &lt; 0.000000000000000222\nORIGIN_hex746   5.9957541442  0.1280757097    46.81414 &lt; 0.000000000000000222\nORIGIN_hex747   2.9644584610  0.1303223870    22.74712 &lt; 0.000000000000000222\nORIGIN_hex748   1.7236380689  0.1413544997    12.19373 &lt; 0.000000000000000222\nORIGIN_hex769   0.6040522490  0.1443472888     4.18471 0.00002855242323226111\nORIGIN_hex770   2.1604964494  0.1304145844    16.56637 &lt; 0.000000000000000222\nORIGIN_hex771   3.5983828639  0.1285021729    28.00251 &lt; 0.000000000000000222\nORIGIN_hex772   5.7481397702  0.1280632863    44.88515 &lt; 0.000000000000000222\nORIGIN_hex773   4.8262626911  0.1283659152    37.59770 &lt; 0.000000000000000222\nORIGIN_hex774   2.3030928075  0.1339803760    17.18978 &lt; 0.000000000000000222\nORIGIN_hex775   3.6652120004  0.1305865258    28.06731 &lt; 0.000000000000000222\nORIGIN_hex776   1.3942831236  0.2411629782     5.78150 0.00000000740386404077\nORIGIN_hex777   1.3471612575  0.2447334287     5.50461 0.00000003699934393892\nORIGIN_hex797   0.9885683256  0.1328985471     7.43852 0.00000000000010182058\nORIGIN_hex798   0.2842201538  0.1675023593     1.69681             0.08973205\nORIGIN_hex799   5.5363743320  0.1280743665    43.22781 &lt; 0.000000000000000222\nORIGIN_hex800   6.3341958744  0.1280516717    49.46594 &lt; 0.000000000000000222\nORIGIN_hex802   0.8565731186  0.1541471940     5.55685 0.00000002746837260865\nORIGIN_hex803   1.2227584447  0.1836232295     6.65906 0.00000000002755809303\nORIGIN_hex805   1.6918857228  0.1613623336    10.48501 &lt; 0.000000000000000222\nORIGIN_hex806   4.2201004146  0.1354357575    31.15943 &lt; 0.000000000000000222\nORIGIN_hex823   1.0310643875  0.1398457249     7.37287 0.00000000000016699298\nORIGIN_hex824   0.4661112920  0.1383760340     3.36844             0.00075595\nORIGIN_hex825   3.4658439272  0.1297321380    26.71538 &lt; 0.000000000000000222\nORIGIN_hex826   7.0227782170  0.1280309535    54.85219 &lt; 0.000000000000000222\nORIGIN_hex827   6.2125831295  0.1280784164    48.50609 &lt; 0.000000000000000222\nORIGIN_hex832   1.0318505074  1.0092941839     1.02235             0.30661593\nORIGIN_hex833   0.6530078899  0.1815461262     3.59693             0.00032200\nORIGIN_hex851  -0.8188456464  0.1613245267    -5.07577 0.00000038593677490210\nORIGIN_hex852   2.3390215894  0.1298894927    18.00778 &lt; 0.000000000000000222\nORIGIN_hex853   3.6404357508  0.1283299010    28.36779 &lt; 0.000000000000000222\nORIGIN_hex854   5.2618821499  0.1281013634    41.07593 &lt; 0.000000000000000222\nORIGIN_hex856  -0.0188771466  0.2409847424    -0.07833             0.93756287\nORIGIN_hex861   1.5123928776  0.1686696061     8.96660 &lt; 0.000000000000000222\nORIGIN_hex862   3.4751528873  0.1631015014    21.30669 &lt; 0.000000000000000222\nORIGIN_hex878   1.2265680153  0.1336603362     9.17675 &lt; 0.000000000000000222\nORIGIN_hex879   2.1932288797  0.1304732083    16.80980 &lt; 0.000000000000000222\nORIGIN_hex880   4.2701028279  0.1281743554    33.31480 &lt; 0.000000000000000222\nORIGIN_hex881   4.2193327163  0.1285013627    32.83493 &lt; 0.000000000000000222\nORIGIN_hex888   2.3958259447  0.2255769648    10.62088 &lt; 0.000000000000000222\nORIGIN_hex889   4.3240846908  0.1411842832    30.62724 &lt; 0.000000000000000222\nORIGIN_hex905   1.6033902802  0.1357820255    11.80856 &lt; 0.000000000000000222\nORIGIN_hex906  -0.2815118999  0.1803470870    -1.56095             0.11853671\nORIGIN_hex907   2.2988153931  0.1304557661    17.62142 &lt; 0.000000000000000222\nORIGIN_hex908   6.1033530687  0.1280600995    47.66007 &lt; 0.000000000000000222\nORIGIN_hex910   2.0073745363  0.1439595762    13.94402 &lt; 0.000000000000000222\nORIGIN_hex932   3.1149962663  0.1292067573    24.10862 &lt; 0.000000000000000222\nORIGIN_hex933   3.3754195735  0.1288790885    26.19059 &lt; 0.000000000000000222\nORIGIN_hex934   4.7643382487  0.1281591704    37.17516 &lt; 0.000000000000000222\nORIGIN_hex935   5.7189457345  0.1280826466    44.65043 &lt; 0.000000000000000222\nORIGIN_hex937   6.2735409152  0.1282344470    48.92243 &lt; 0.000000000000000222\nORIGIN_hex959   3.9605862340  0.1289131052    30.72291 &lt; 0.000000000000000222\nORIGIN_hex960   4.7216580756  0.1282033483    36.82944 &lt; 0.000000000000000222\nORIGIN_hex961   5.7443905171  0.1280873013    44.84746 &lt; 0.000000000000000222\nORIGIN_hex962   6.3482019582  0.1280678120    49.56907 &lt; 0.000000000000000222\nORIGIN_hex986   0.1193060381  0.1562154009     0.76373             0.44502949\nORIGIN_hex987   5.9071990274  0.1280852093    46.11929 &lt; 0.000000000000000222\nORIGIN_hex988   4.7513688620  0.1281915802    37.06459 &lt; 0.000000000000000222\nORIGIN_hex989   6.0470783180  0.1280665595    47.21825 &lt; 0.000000000000000222\nORIGIN_hex991   3.0273416210  0.1319456049    22.94386 &lt; 0.000000000000000222\nORIGIN_hex1013  0.1119889556  0.1651568933     0.67808             0.49772339\nORIGIN_hex1014  4.1097863146  0.1284680160    31.99074 &lt; 0.000000000000000222\nORIGIN_hex1015  4.8767526998  0.1282410868    38.02801 &lt; 0.000000000000000222\nORIGIN_hex1016  4.9073523756  0.1281242187    38.30152 &lt; 0.000000000000000222\nORIGIN_hex1042  4.7270278361  0.1282897686    36.84649 &lt; 0.000000000000000222\nORIGIN_hex1043  5.4322739288  0.1281133833    42.40208 &lt; 0.000000000000000222\nORIGIN_hex1045  2.5108624462  0.1342492050    18.70300 &lt; 0.000000000000000222\nORIGIN_hex1067  3.7056905774  0.1288729440    28.75460 &lt; 0.000000000000000222\nORIGIN_hex1068  2.9203547466  0.1307313913    22.33859 &lt; 0.000000000000000222\nORIGIN_hex1069  2.5617435940  0.1294991793    19.78193 &lt; 0.000000000000000222\nORIGIN_hex1070  5.7306389326  0.1280773749    44.74357 &lt; 0.000000000000000222\nORIGIN_hex1078  2.2029719896  0.1480935597    14.87554 &lt; 0.000000000000000222\nORIGIN_hex1093  1.7434609963  0.1352916329    12.88669 &lt; 0.000000000000000222\nORIGIN_hex1094  4.8436157101  0.1282027102    37.78092 &lt; 0.000000000000000222\nORIGIN_hex1095  1.9367632316  0.1309509157    14.78999 &lt; 0.000000000000000222\nORIGIN_hex1096  5.3546213600  0.1280939211    41.80231 &lt; 0.000000000000000222\nORIGIN_hex1097  5.5843833865  0.1281335606    43.58252 &lt; 0.000000000000000222\nORIGIN_hex1099  7.3610868211  0.1280701773    57.47698 &lt; 0.000000000000000222\nORIGIN_hex1100  3.4214376082  0.1345448389    25.42972 &lt; 0.000000000000000222\nORIGIN_hex1122  5.7765397121  0.1281015602    45.09344 &lt; 0.000000000000000222\nORIGIN_hex1123  6.1473317651  0.1280589009    48.00394 &lt; 0.000000000000000222\nORIGIN_hex1124  5.3827850413  0.1281131594    42.01586 &lt; 0.000000000000000222\nORIGIN_hex1125  6.0585385763  0.1281037743    47.29399 &lt; 0.000000000000000222\nORIGIN_hex1126  5.1696614595  0.1287033033    40.16728 &lt; 0.000000000000000222\nORIGIN_hex1127  6.2926181064  0.1280892673    49.12682 &lt; 0.000000000000000222\nORIGIN_hex1128  6.2189896785  0.1281595757    48.52536 &lt; 0.000000000000000222\nORIGIN_hex1132  0.5027881736  0.2747078396     1.83027             0.06721031\nORIGIN_hex1147  0.3914722631  0.1507807079     2.59630             0.00942332\nORIGIN_hex1148  4.1428571135  0.1283335818    32.28194 &lt; 0.000000000000000222\nORIGIN_hex1149  3.3395270827  0.1286196815    25.96436 &lt; 0.000000000000000222\nORIGIN_hex1150  6.0296466623  0.1280639744    47.08308 &lt; 0.000000000000000222\nORIGIN_hex1151  5.7305227766  0.1280823729    44.74092 &lt; 0.000000000000000222\nORIGIN_hex1152  5.7780497418  0.1281077398    45.10305 &lt; 0.000000000000000222\nORIGIN_hex1153  7.1582452757  0.1280965736    55.88163 &lt; 0.000000000000000222\nORIGIN_hex1154  6.8081033044  0.1280659695    53.16091 &lt; 0.000000000000000222\nORIGIN_hex1155  2.9290598498  0.1312935029    22.30925 &lt; 0.000000000000000222\nORIGIN_hex1158  4.3737369232  0.1290072270    33.90304 &lt; 0.000000000000000222\nORIGIN_hex1174  2.2218494949  0.1333709800    16.65917 &lt; 0.000000000000000222\nORIGIN_hex1175  2.7206867952  0.1318751564    20.63078 &lt; 0.000000000000000222\nORIGIN_hex1176  4.7587315137  0.1281597423    37.13125 &lt; 0.000000000000000222\nORIGIN_hex1177  3.5517130962  0.1283750158    27.66670 &lt; 0.000000000000000222\nORIGIN_hex1178  5.5461958554  0.1280931448    43.29815 &lt; 0.000000000000000222\nORIGIN_hex1179  5.0979465057  0.1281453210    39.78254 &lt; 0.000000000000000222\nORIGIN_hex1180  4.7256105646  0.1282496072    36.84698 &lt; 0.000000000000000222\nORIGIN_hex1181  5.9848501537  0.1280908322    46.72349 &lt; 0.000000000000000222\nORIGIN_hex1182  6.0929926134  0.1281305514    47.55300 &lt; 0.000000000000000222\nORIGIN_hex1183  6.6007293769  0.1281704199    51.49963 &lt; 0.000000000000000222\nORIGIN_hex1185  3.1995782808  0.1306765012    24.48473 &lt; 0.000000000000000222\nORIGIN_hex1201  2.3793693640  0.1322061061    17.99742 &lt; 0.000000000000000222\nORIGIN_hex1202  4.5769805679  0.1282334162    35.69257 &lt; 0.000000000000000222\nORIGIN_hex1203  3.4315672343  0.1288366036    26.63503 &lt; 0.000000000000000222\nORIGIN_hex1205  6.2125432644  0.1280615149    48.51218 &lt; 0.000000000000000222\nORIGIN_hex1206  5.5180703894  0.1281317652    43.06559 &lt; 0.000000000000000222\nORIGIN_hex1207  5.2766088521  0.1281424887    41.17767 &lt; 0.000000000000000222\nORIGIN_hex1209  6.4172397339  0.1281817805    50.06359 &lt; 0.000000000000000222\nORIGIN_hex1210  2.9972970296  0.1309792285    22.88376 &lt; 0.000000000000000222\nORIGIN_hex1211  2.7683139293  0.1313699133    21.07266 &lt; 0.000000000000000222\nORIGIN_hex1212  2.4053339087  0.1335169900    18.01519 &lt; 0.000000000000000222\nORIGIN_hex1228  1.7394578855  0.1357186532    12.81665 &lt; 0.000000000000000222\nORIGIN_hex1229  2.6809048214  0.1291075241    20.76490 &lt; 0.000000000000000222\nORIGIN_hex1230  4.5270541757  0.1282010759    35.31214 &lt; 0.000000000000000222\nORIGIN_hex1231  5.6006971618  0.1281692515    43.69767 &lt; 0.000000000000000222\nORIGIN_hex1232  5.9731929566  0.1280697429    46.64016 &lt; 0.000000000000000222\nORIGIN_hex1233  5.9097387504  0.1281669412    46.10970 &lt; 0.000000000000000222\nORIGIN_hex1235  6.1251508472  0.1281137461    47.81025 &lt; 0.000000000000000222\nORIGIN_hex1236  4.4613496158  0.1283065913    34.77101 &lt; 0.000000000000000222\nORIGIN_hex1237  5.1800916792  0.1282435324    40.39262 &lt; 0.000000000000000222\nORIGIN_hex1238  2.2690721004  0.1318429582    17.21042 &lt; 0.000000000000000222\nORIGIN_hex1239  0.7253209539  0.1501310719     4.83125 0.00000135677543703410\nORIGIN_hex1240  0.9832479807  0.1803574919     5.45166 0.00000004990139655395\nORIGIN_hex1255  4.4488981587  0.1286800949    34.57332 &lt; 0.000000000000000222\nORIGIN_hex1256  3.6818757419  0.1283884153    28.67763 &lt; 0.000000000000000222\nORIGIN_hex1257  2.7111532182  0.1290475728    21.00894 &lt; 0.000000000000000222\nORIGIN_hex1258  4.7938648747  0.1282255145    37.38620 &lt; 0.000000000000000222\nORIGIN_hex1259  5.5920735889  0.1280958166    43.65540 &lt; 0.000000000000000222\nORIGIN_hex1261  5.6640673122  0.1281006689    44.21575 &lt; 0.000000000000000222\nORIGIN_hex1262  5.8836888445  0.1281031947    45.92929 &lt; 0.000000000000000222\nORIGIN_hex1263  3.1588790453  0.1294563536    24.40111 &lt; 0.000000000000000222\nORIGIN_hex1264  3.8942015134  0.1287091456    30.25583 &lt; 0.000000000000000222\nORIGIN_hex1265  1.6682125859  0.1325402582    12.58646 &lt; 0.000000000000000222\nORIGIN_hex1266  3.3359338247  0.1300576432    25.64966 &lt; 0.000000000000000222\nORIGIN_hex1282  4.3527634057  0.1285615861    33.85742 &lt; 0.000000000000000222\nORIGIN_hex1283  4.9193540140  0.1281087767    38.39982 &lt; 0.000000000000000222\nORIGIN_hex1284  4.5718634432  0.1281635716    35.67210 &lt; 0.000000000000000222\nORIGIN_hex1285  3.2420585822  0.1286611001    25.19844 &lt; 0.000000000000000222\nORIGIN_hex1286  5.0734535435  0.1281300274    39.59613 &lt; 0.000000000000000222\nORIGIN_hex1287  5.1626322668  0.1281850605    40.27484 &lt; 0.000000000000000222\nORIGIN_hex1288  2.4743728607  0.1297647914    19.06814 &lt; 0.000000000000000222\nORIGIN_hex1289  5.8724551054  0.1280825403    45.84899 &lt; 0.000000000000000222\nORIGIN_hex1293  0.6687191180  0.1457125076     4.58930 0.00000444724540485635\nORIGIN_hex1308  3.2426173034  0.1287928747    25.17699 &lt; 0.000000000000000222\nORIGIN_hex1309  5.6635137971  0.1280875364    44.21596 &lt; 0.000000000000000222\nORIGIN_hex1310  6.7009599605  0.1280472875    52.33192 &lt; 0.000000000000000222\nORIGIN_hex1311  3.1305366259  0.1295753058    24.15998 &lt; 0.000000000000000222\nORIGIN_hex1312  3.3955537647  0.1287237045    26.37862 &lt; 0.000000000000000222\nORIGIN_hex1314  4.5278537168  0.1283032472    35.29025 &lt; 0.000000000000000222\nORIGIN_hex1315  6.2554278503  0.1280699314    48.84384 &lt; 0.000000000000000222\nORIGIN_hex1316  5.1842568507  0.1283120254    40.40352 &lt; 0.000000000000000222\nORIGIN_hex1318  2.2219678115  0.1363421611    16.29700 &lt; 0.000000000000000222\nORIGIN_hex1319  6.8816997168  0.1280885007    53.72613 &lt; 0.000000000000000222\nORIGIN_hex1320  5.0738839586  0.1283843094    39.52106 &lt; 0.000000000000000222\nORIGIN_hex1335  0.3363149056  0.2034821917     1.65280             0.09837204\nORIGIN_hex1336  4.1666515127  0.1282317904    32.49312 &lt; 0.000000000000000222\nORIGIN_hex1337  5.4366871469  0.1280687803    42.45131 &lt; 0.000000000000000222\nORIGIN_hex1338  4.7599222370  0.1281910088    37.13148 &lt; 0.000000000000000222\nORIGIN_hex1339  2.9212354700  0.1299951252    22.47188 &lt; 0.000000000000000222\nORIGIN_hex1340  3.4723465265  0.1287251134    26.97490 &lt; 0.000000000000000222\nORIGIN_hex1341  4.9787143088  0.1281696647    38.84472 &lt; 0.000000000000000222\nORIGIN_hex1342  3.6070805361  0.1285448020    28.06088 &lt; 0.000000000000000222\nORIGIN_hex1343  5.8626179781  0.1281023668    45.76510 &lt; 0.000000000000000222\nORIGIN_hex1347  1.7954041207  0.1315235051    13.65082 &lt; 0.000000000000000222\nORIGIN_hex1348  6.5521694701  0.1280844122    51.15509 &lt; 0.000000000000000222\nORIGIN_hex1362  3.6845193510  0.1283150847    28.71462 &lt; 0.000000000000000222\nORIGIN_hex1363  4.4443440014  0.1281714243    34.67500 &lt; 0.000000000000000222\nORIGIN_hex1364  4.7773841981  0.1281303200    37.28535 &lt; 0.000000000000000222\nORIGIN_hex1366  5.0213915822  0.1281354743    39.18815 &lt; 0.000000000000000222\nORIGIN_hex1367  3.2067744203  0.1290354983    24.85188 &lt; 0.000000000000000222\nORIGIN_hex1368  4.0945292417  0.1285623248    31.84859 &lt; 0.000000000000000222\nORIGIN_hex1369  6.3199235389  0.1280752580    49.34539 &lt; 0.000000000000000222\nORIGIN_hex1370  7.1678868375  0.1280989120    55.95588 &lt; 0.000000000000000222\nORIGIN_hex1372 -0.1721753578  0.2102740422    -0.81881             0.41289247\nORIGIN_hex1374  4.5539372961  0.1282304513    35.51370 &lt; 0.000000000000000222\nORIGIN_hex1375  7.0958632653  0.1280792336    55.40214 &lt; 0.000000000000000222\nORIGIN_hex1389  3.8380546595  0.1283249191    29.90888 &lt; 0.000000000000000222\nORIGIN_hex1390  2.3624037213  0.1303655935    18.12137 &lt; 0.000000000000000222\nORIGIN_hex1391  3.1690210042  0.1285089787    24.65992 &lt; 0.000000000000000222\nORIGIN_hex1392  4.1556762033  0.1282287577    32.40830 &lt; 0.000000000000000222\nORIGIN_hex1394  4.4216712706  0.1282726004    34.47089 &lt; 0.000000000000000222\nORIGIN_hex1396  5.4013324481  0.1282409122    42.11864 &lt; 0.000000000000000222\nORIGIN_hex1397  5.5647297649  0.1282484684    43.39022 &lt; 0.000000000000000222\nORIGIN_hex1401  6.0049025373  0.1280960442    46.87813 &lt; 0.000000000000000222\nORIGIN_hex1402  5.9199477919  0.1280963422    46.21481 &lt; 0.000000000000000222\nORIGIN_hex1416 -0.6452548104  0.2230470070    -2.89291             0.00381691\nORIGIN_hex1417  2.3894143322  0.1299308452    18.38989 &lt; 0.000000000000000222\nORIGIN_hex1418  3.8499617427  0.1285636374    29.94596 &lt; 0.000000000000000222\nORIGIN_hex1419  3.7469484133  0.1284710774    29.16570 &lt; 0.000000000000000222\nORIGIN_hex1420  5.4489786609  0.1281036703    42.53570 &lt; 0.000000000000000222\nORIGIN_hex1422  2.7599999398  0.1318583309    20.93156 &lt; 0.000000000000000222\nORIGIN_hex1423  7.6607569957  0.1281319758    59.78802 &lt; 0.000000000000000222\nORIGIN_hex1426  3.9119219873  0.1293781818    30.23633 &lt; 0.000000000000000222\nORIGIN_hex1428  5.2020452340  0.1281312271    40.59936 &lt; 0.000000000000000222\nORIGIN_hex1429  5.2298644490  0.1281775882    40.80171 &lt; 0.000000000000000222\nORIGIN_hex1443  2.6118735724  0.1288355206    20.27293 &lt; 0.000000000000000222\nORIGIN_hex1444  1.6729218227  0.1307157859    12.79816 &lt; 0.000000000000000222\nORIGIN_hex1445  4.8754855869  0.1281486650    38.04554 &lt; 0.000000000000000222\nORIGIN_hex1446  3.3007949207  0.1285763421    25.67187 &lt; 0.000000000000000222\nORIGIN_hex1447  4.8652412283  0.1281247048    37.97270 &lt; 0.000000000000000222\nORIGIN_hex1455  4.7656008009  0.1282722995    37.15222 &lt; 0.000000000000000222\nORIGIN_hex1456  5.3714688729  0.1281214585    41.92482 &lt; 0.000000000000000222\nORIGIN_hex1457  1.3424679882  0.1374018009     9.77038 &lt; 0.000000000000000222\nORIGIN_hex1469  5.0132669817  0.1281254389    39.12780 &lt; 0.000000000000000222\nORIGIN_hex1470  4.2775862790  0.1281712198    33.37400 &lt; 0.000000000000000222\nORIGIN_hex1471  5.2637085160  0.1280925148    41.09302 &lt; 0.000000000000000222\nORIGIN_hex1472  3.5699743972  0.1285113727    27.77944 &lt; 0.000000000000000222\nORIGIN_hex1480 -0.8072827996  0.1888513425    -4.27470 0.00001913949869719235\nORIGIN_hex1482  5.2285228109  0.1281159696    40.81086 &lt; 0.000000000000000222\nORIGIN_hex1483  4.9862129157  0.1282025522    38.89324 &lt; 0.000000000000000222\nORIGIN_hex1496  2.9579050114  0.1288166597    22.96213 &lt; 0.000000000000000222\nORIGIN_hex1497  0.9921555631  0.1371063901     7.23639 0.00000000000046077880\nORIGIN_hex1498  3.4535104561  0.1282941783    26.91868 &lt; 0.000000000000000222\nORIGIN_hex1499  4.7092283369  0.1281475245    36.74849 &lt; 0.000000000000000222\nORIGIN_hex1500  2.4181232474  0.1304061011    18.54302 &lt; 0.000000000000000222\nORIGIN_hex1501  4.4760801359  0.1282147321    34.91081 &lt; 0.000000000000000222\nORIGIN_hex1507  2.2476898883  0.1427345325    15.74734 &lt; 0.000000000000000222\nORIGIN_hex1509  4.8156545695  0.1282526014    37.54820 &lt; 0.000000000000000222\nORIGIN_hex1510  6.9653865000  0.1280602804    54.39147 &lt; 0.000000000000000222\nORIGIN_hex1511  4.1715180261  0.1284526176    32.47515 &lt; 0.000000000000000222\nORIGIN_hex1523  1.0046086613  0.1360438115     7.38445 0.00000000000015308539\nORIGIN_hex1524  1.9367335710  0.1331381170    14.54680 &lt; 0.000000000000000222\nORIGIN_hex1525  5.3026457151  0.1280801792    41.40099 &lt; 0.000000000000000222\nORIGIN_hex1526  2.9697823311  0.1289326415    23.03360 &lt; 0.000000000000000222\nORIGIN_hex1527  1.5290660116  0.1377473913    11.10051 &lt; 0.000000000000000222\nORIGIN_hex1534  0.0017721710  0.1611369663     0.01100             0.99122511\nORIGIN_hex1536  5.6228239867  0.1281058416    43.89202 &lt; 0.000000000000000222\nORIGIN_hex1537  4.9001219699  0.1281902874    38.22538 &lt; 0.000000000000000222\nORIGIN_hex1550  3.8262812354  0.1283539548    29.81039 &lt; 0.000000000000000222\nORIGIN_hex1551  2.0561490707  0.1296548853    15.85863 &lt; 0.000000000000000222\nORIGIN_hex1552  2.0763406244  0.1299845162    15.97375 &lt; 0.000000000000000222\nORIGIN_hex1553  4.4093983054  0.1281538255    34.40708 &lt; 0.000000000000000222\nORIGIN_hex1554  3.4127284814  0.1287923734    26.49791 &lt; 0.000000000000000222\nORIGIN_hex1555  3.2947990357  0.1286970779    25.60120 &lt; 0.000000000000000222\nORIGIN_hex1562  2.9191908428  0.1413968932    20.64537 &lt; 0.000000000000000222\nORIGIN_hex1563  5.1722572402  0.1282648373    40.32483 &lt; 0.000000000000000222\nORIGIN_hex1564  6.0042333892  0.1280785248    46.87931 &lt; 0.000000000000000222\nORIGIN_hex1565  4.6224737444  0.1284072134    35.99855 &lt; 0.000000000000000222\nORIGIN_hex1576  2.7565439675  0.1308801812    21.06158 &lt; 0.000000000000000222\nORIGIN_hex1578  2.9852282162  0.1284861974    23.23384 &lt; 0.000000000000000222\nORIGIN_hex1579  5.5183866541  0.1280819690    43.08480 &lt; 0.000000000000000222\nORIGIN_hex1581  4.5774485861  0.1281854146    35.70959 &lt; 0.000000000000000222\nORIGIN_hex1588  0.8454102412  0.1645720780     5.13702 0.00000027912758774077\nORIGIN_hex1590  6.1490649974  0.1280890766    48.00616 &lt; 0.000000000000000222\nORIGIN_hex1591  5.8386835573  0.1280944649    45.58108 &lt; 0.000000000000000222\nORIGIN_hex1592  2.0377504739  0.1312148134    15.52988 &lt; 0.000000000000000222\nORIGIN_hex1604  3.2225660361  0.1284376715    25.09050 &lt; 0.000000000000000222\nORIGIN_hex1605  4.6072321835  0.1281185724    35.96069 &lt; 0.000000000000000222\nORIGIN_hex1606  4.2891342461  0.1281613460    33.46668 &lt; 0.000000000000000222\nORIGIN_hex1607  3.4827183541  0.1283633696    27.13171 &lt; 0.000000000000000222\nORIGIN_hex1616  2.3034141276  0.1366944939    16.85082 &lt; 0.000000000000000222\nORIGIN_hex1617  4.7159975571  0.1284104446    36.72597 &lt; 0.000000000000000222\nORIGIN_hex1618  6.3385294788  0.1280849150    49.48693 &lt; 0.000000000000000222\nORIGIN_hex1619  4.7552267137  0.1282111493    37.08903 &lt; 0.000000000000000222\nORIGIN_hex1620  2.2897164647  0.1310062730    17.47791 &lt; 0.000000000000000222\nORIGIN_hex1630  2.5129153163  0.1288462925    19.50320 &lt; 0.000000000000000222\nORIGIN_hex1631  3.4411535945  0.1282841571    26.82446 &lt; 0.000000000000000222\nORIGIN_hex1632  4.8157198244  0.1281179532    37.58817 &lt; 0.000000000000000222\nORIGIN_hex1633  3.5588723988  0.1283662720    27.72436 &lt; 0.000000000000000222\nORIGIN_hex1634  4.9636610589  0.1281438293    38.73508 &lt; 0.000000000000000222\nORIGIN_hex1635  3.1508991085  0.1288339808    24.45705 &lt; 0.000000000000000222\nORIGIN_hex1642  2.2000998853  0.1648573571    13.34548 &lt; 0.000000000000000222\nORIGIN_hex1644  5.0918243970  0.1282004850    39.71767 &lt; 0.000000000000000222\nORIGIN_hex1645  5.6590723066  0.1281038915    44.17565 &lt; 0.000000000000000222\nORIGIN_hex1646  3.7654048447  0.1285997680    29.28003 &lt; 0.000000000000000222\nORIGIN_hex1647 -1.6589653039  0.4652501281    -3.56575             0.00036282\nORIGIN_hex1658  4.8739832902  0.1281509938    38.03313 &lt; 0.000000000000000222\nORIGIN_hex1659  4.7010972803  0.1281116534    36.69531 &lt; 0.000000000000000222\nORIGIN_hex1660  3.7645708487  0.1286570580    29.26051 &lt; 0.000000000000000222\nORIGIN_hex1661  3.2758933230  0.1285563041    25.48217 &lt; 0.000000000000000222\nORIGIN_hex1662  4.6128317513  0.1281693293    35.99014 &lt; 0.000000000000000222\nORIGIN_hex1669 -0.1653654188  0.2283873631    -0.72406             0.46903088\nORIGIN_hex1670  1.9242799612  0.1574855520    12.21877 &lt; 0.000000000000000222\nORIGIN_hex1672  4.7538409485  0.1283572235    37.03602 &lt; 0.000000000000000222\nORIGIN_hex1673  4.4400723622  0.1287958113    34.47373 &lt; 0.000000000000000222\nORIGIN_hex1674  3.7535327350  0.1286642450    29.17308 &lt; 0.000000000000000222\nORIGIN_hex1684  5.1287583573  0.1280993171    40.03736 &lt; 0.000000000000000222\nORIGIN_hex1685  3.8761946047  0.1282072618    30.23381 &lt; 0.000000000000000222\nORIGIN_hex1686  4.5995448036  0.1281224657    35.89960 &lt; 0.000000000000000222\nORIGIN_hex1687  2.1748070524  0.1297076843    16.76699 &lt; 0.000000000000000222\nORIGIN_hex1688  2.3204033476  0.1293857606    17.93399 &lt; 0.000000000000000222\nORIGIN_hex1689  2.6985705003  0.1365986473    19.75547 &lt; 0.000000000000000222\nORIGIN_hex1695 -0.4061049856  0.2577242059    -1.57573             0.11508695\nORIGIN_hex1699  4.8143981451  0.1281847038    37.55829 &lt; 0.000000000000000222\nORIGIN_hex1700  0.9638404381  0.1409257591     6.83935 0.00000000000795539085\nORIGIN_hex1701  2.5065985657  0.1323974042    18.93238 &lt; 0.000000000000000222\nORIGIN_hex1712  3.8405737908  0.1282414429    29.94799 &lt; 0.000000000000000222\nORIGIN_hex1713  5.0894155650  0.1280820214    39.73560 &lt; 0.000000000000000222\nORIGIN_hex1714  2.5152419592  0.1293595507    19.44381 &lt; 0.000000000000000222\nORIGIN_hex1716  4.3516327478  0.1282011420    33.94379 &lt; 0.000000000000000222\nORIGIN_hex1723  2.4579339533  0.1362512541    18.03972 &lt; 0.000000000000000222\nORIGIN_hex1726  2.4990047429  0.1314906658    19.00519 &lt; 0.000000000000000222\nORIGIN_hex1727  6.0190043137  0.1281114292    46.98257 &lt; 0.000000000000000222\nORIGIN_hex1728  3.3537433921  0.1287640723    26.04565 &lt; 0.000000000000000222\nORIGIN_hex1738  3.4009792947  0.1283210956    26.50366 &lt; 0.000000000000000222\nORIGIN_hex1739  4.4816942926  0.1281164613    34.98141 &lt; 0.000000000000000222\nORIGIN_hex1740  3.2724232205  0.1283910603    25.48794 &lt; 0.000000000000000222\nORIGIN_hex1741  3.6995185670  0.1283487386    28.82396 &lt; 0.000000000000000222\nORIGIN_hex1743  2.1468472238  0.1324271764    16.21153 &lt; 0.000000000000000222\nORIGIN_hex1744  0.8541006167  0.1868582792     4.57085 0.00000485756705328517\nORIGIN_hex1748 -0.4403221127  0.2182903687    -2.01714             0.04368096\nORIGIN_hex1749  5.7536669837  0.1281751408    44.88910 &lt; 0.000000000000000222\nORIGIN_hex1753  6.1556241300  0.1280939570    48.05554 &lt; 0.000000000000000222\nORIGIN_hex1754  4.8229977601  0.1282029696    37.62002 &lt; 0.000000000000000222\nORIGIN_hex1765  5.4802483240  0.1280934645    42.78320 &lt; 0.000000000000000222\nORIGIN_hex1766  5.1381484864  0.1280953202    40.11191 &lt; 0.000000000000000222\nORIGIN_hex1767  4.7201518327  0.1280987289    36.84776 &lt; 0.000000000000000222\nORIGIN_hex1768  1.3642061351  0.1318223050    10.34883 &lt; 0.000000000000000222\nORIGIN_hex1770  2.8666104926  0.1289761623    22.22589 &lt; 0.000000000000000222\nORIGIN_hex1771  1.6395505695  0.1366921523    11.99447 &lt; 0.000000000000000222\nORIGIN_hex1776 -0.0182809001  0.1782876696    -0.10254             0.91833126\nORIGIN_hex1777  4.4206753281  0.1285098917    34.39949 &lt; 0.000000000000000222\nORIGIN_hex1778  2.0239894581  0.1325101372    15.27422 &lt; 0.000000000000000222\nORIGIN_hex1780  3.6449442273  0.1289276901    28.27123 &lt; 0.000000000000000222\nORIGIN_hex1781  5.8891388415  0.1281112220    45.96895 &lt; 0.000000000000000222\nORIGIN_hex1792  4.4930218742  0.1281386754    35.06375 &lt; 0.000000000000000222\nORIGIN_hex1793  5.2145571169  0.1280753798    40.71475 &lt; 0.000000000000000222\nORIGIN_hex1794  4.0758356658  0.1281750894    31.79897 &lt; 0.000000000000000222\nORIGIN_hex1795  3.1863391318  0.1284124304    24.81332 &lt; 0.000000000000000222\nORIGIN_hex1796  3.9046574921  0.1283476327    30.42251 &lt; 0.000000000000000222\nORIGIN_hex1798 -0.2456903716  0.2019577624    -1.21654             0.22377801\nORIGIN_hex1800  2.3229349892  0.1328113446    17.49049 &lt; 0.000000000000000222\nORIGIN_hex1802  0.9634778389  0.1420770453     6.78138 0.00000000001190367754\nORIGIN_hex1804  0.1390971407  0.1734896612     0.80176             0.42269157\nORIGIN_hex1805  3.8602608030  0.1285230144    30.03556 &lt; 0.000000000000000222\nORIGIN_hex1806  4.9972996278  0.1281827311    38.98575 &lt; 0.000000000000000222\nORIGIN_hex1807  5.1491452921  0.1281529265    40.17969 &lt; 0.000000000000000222\nORIGIN_hex1808  2.7009105925  0.1319174286    20.47425 &lt; 0.000000000000000222\nORIGIN_hex1820  4.6643387620  0.1281139585    36.40773 &lt; 0.000000000000000222\nORIGIN_hex1821  5.4293568699  0.1280704292    42.39352 &lt; 0.000000000000000222\nORIGIN_hex1822  3.2420123020  0.1283664061    25.25592 &lt; 0.000000000000000222\nORIGIN_hex1823  3.1514728736  0.1285697166    24.51178 &lt; 0.000000000000000222\nORIGIN_hex1824  4.5424642743  0.1281563837    35.44470 &lt; 0.000000000000000222\nORIGIN_hex1827  4.6380146239  0.1282165685    36.17329 &lt; 0.000000000000000222\nORIGIN_hex1828  4.3084948365  0.1283574695    33.56637 &lt; 0.000000000000000222\nORIGIN_hex1829  4.2297731356  0.1284932496    32.91825 &lt; 0.000000000000000222\nORIGIN_hex1831  3.4208841604  0.1292531480    26.46654 &lt; 0.000000000000000222\nORIGIN_hex1833  5.9610788651  0.1280873375    46.53917 &lt; 0.000000000000000222\nORIGIN_hex1834  5.0143817684  0.1282165460    39.10869 &lt; 0.000000000000000222\nORIGIN_hex1835  5.5587755199  0.1281704655    43.37018 &lt; 0.000000000000000222\nORIGIN_hex1846  0.6194385014  0.1375973008     4.50182 0.00000673735216537396\nORIGIN_hex1847  4.0061533041  0.1283589273    31.21055 &lt; 0.000000000000000222\nORIGIN_hex1848  4.0538944701  0.1281619718    31.63102 &lt; 0.000000000000000222\nORIGIN_hex1849  4.8686063719  0.1280956972    38.00757 &lt; 0.000000000000000222\nORIGIN_hex1850  3.8106541590  0.1283825771    29.68202 &lt; 0.000000000000000222\nORIGIN_hex1852  1.1432235912  0.1364430502     8.37876 &lt; 0.000000000000000222\nORIGIN_hex1853  4.3517006505  0.1282655011    33.92729 &lt; 0.000000000000000222\nORIGIN_hex1854  3.9280288457  0.1283920679    30.59401 &lt; 0.000000000000000222\nORIGIN_hex1855  3.6718730309  0.1285194200    28.57057 &lt; 0.000000000000000222\nORIGIN_hex1856  2.3318802513  0.1416566048    16.46150 &lt; 0.000000000000000222\nORIGIN_hex1857  0.5801373462  0.1724228162     3.36462             0.00076649\nORIGIN_hex1858  4.3512427263  0.1282913311    33.91689 &lt; 0.000000000000000222\nORIGIN_hex1859  4.7809774024  0.1281747713    37.30046 &lt; 0.000000000000000222\nORIGIN_hex1860  5.4186309270  0.1281196296    42.29353 &lt; 0.000000000000000222\nORIGIN_hex1861  6.5721694899  0.1281170095    51.29818 &lt; 0.000000000000000222\nORIGIN_hex1862  2.4833924408  0.1343922535    18.47869 &lt; 0.000000000000000222\nORIGIN_hex1874  4.2621719410  0.1281494728    33.25938 &lt; 0.000000000000000222\nORIGIN_hex1875  4.3262359876  0.1281266630    33.76531 &lt; 0.000000000000000222\nORIGIN_hex1876  1.9106773653  0.1294567352    14.75920 &lt; 0.000000000000000222\nORIGIN_hex1877  4.0049990454  0.1282027744    31.23957 &lt; 0.000000000000000222\nORIGIN_hex1878  3.0823304338  0.1286599266    23.95719 &lt; 0.000000000000000222\nORIGIN_hex1879  2.6127756861  0.1289421255    20.26317 &lt; 0.000000000000000222\nORIGIN_hex1882  5.1551769916  0.1281332816    40.23293 &lt; 0.000000000000000222\nORIGIN_hex1883  4.7497803454  0.1282106936    37.04668 &lt; 0.000000000000000222\nORIGIN_hex1884  3.8816881314  0.1288174609    30.13325 &lt; 0.000000000000000222\nORIGIN_hex1886  6.7072451541  0.1280699255    52.37174 &lt; 0.000000000000000222\nORIGIN_hex1887  6.5511456041  0.1280691561    51.15319 &lt; 0.000000000000000222\nORIGIN_hex1888  4.8787682146  0.1282308967    38.04674 &lt; 0.000000000000000222\nORIGIN_hex1889  2.5794970068  0.1398379769    18.44633 &lt; 0.000000000000000222\nORIGIN_hex1890  3.6451591082  0.1346094270    27.07952 &lt; 0.000000000000000222\nORIGIN_hex1900  2.9579807807  0.1288256180    22.96112 &lt; 0.000000000000000222\nORIGIN_hex1901  4.4432543947  0.1281153990    34.68166 &lt; 0.000000000000000222\nORIGIN_hex1902  3.8223324281  0.1282510428    29.80352 &lt; 0.000000000000000222\nORIGIN_hex1903  3.3178909737  0.1288607285    25.74788 &lt; 0.000000000000000222\nORIGIN_hex1904  3.4241213048  0.1283976545    26.66810 &lt; 0.000000000000000222\nORIGIN_hex1905  3.5034139560  0.1283015958    27.30608 &lt; 0.000000000000000222\nORIGIN_hex1906  3.8511440564  0.1282470699    30.02910 &lt; 0.000000000000000222\nORIGIN_hex1907  4.6043396247  0.1281566365    35.92744 &lt; 0.000000000000000222\nORIGIN_hex1908  4.3416189419  0.1282823021    33.84425 &lt; 0.000000000000000222\nORIGIN_hex1909  5.5226028985  0.1281130606    43.10726 &lt; 0.000000000000000222\nORIGIN_hex1910  4.2945348909  0.1283483754    33.45999 &lt; 0.000000000000000222\nORIGIN_hex1912  3.4545026617  0.1289684404    26.78564 &lt; 0.000000000000000222\nORIGIN_hex1913  4.4889374090  0.1282217053    35.00919 &lt; 0.000000000000000222\nORIGIN_hex1914  6.0754768055  0.1280966902    47.42884 &lt; 0.000000000000000222\nORIGIN_hex1916  5.8355152391  0.1290189590    45.22990 &lt; 0.000000000000000222\nORIGIN_hex1928  4.1585163041  0.1281579492    32.44837 &lt; 0.000000000000000222\nORIGIN_hex1929  3.7666645149  0.1281929850    29.38277 &lt; 0.000000000000000222\nORIGIN_hex1930  3.6908899768  0.1282048469    28.78900 &lt; 0.000000000000000222\nORIGIN_hex1931  3.5853095076  0.1282635450    27.95268 &lt; 0.000000000000000222\nORIGIN_hex1932  4.2116628376  0.1281870358    32.85561 &lt; 0.000000000000000222\nORIGIN_hex1933  4.2318803323  0.1283070084    32.98246 &lt; 0.000000000000000222\nORIGIN_hex1934  2.7976306103  0.1286665946    21.74326 &lt; 0.000000000000000222\nORIGIN_hex1935  4.9369551616  0.1281234765    38.53279 &lt; 0.000000000000000222\nORIGIN_hex1936  5.2267859826  0.1281155006    40.79745 &lt; 0.000000000000000222\nORIGIN_hex1937  4.8223096796  0.1281644106    37.62597 &lt; 0.000000000000000222\nORIGIN_hex1938  1.6444570071  0.1343525403    12.23987 &lt; 0.000000000000000222\nORIGIN_hex1940  6.3568131826  0.1280887824    49.62818 &lt; 0.000000000000000222\nORIGIN_hex1941  5.4082409612  0.1281433190    42.20463 &lt; 0.000000000000000222\nORIGIN_hex1942  4.9884032927  0.1283957004    38.85179 &lt; 0.000000000000000222\nORIGIN_hex1954  3.2065277784  0.1288019125    24.89503 &lt; 0.000000000000000222\nORIGIN_hex1955  4.3024825681  0.1281280722    33.57955 &lt; 0.000000000000000222\nORIGIN_hex1956  3.1506195908  0.1283665266    24.54393 &lt; 0.000000000000000222\nORIGIN_hex1958  4.6566838340  0.1281287658    36.34378 &lt; 0.000000000000000222\nORIGIN_hex1959  5.1084875270  0.1280831576    39.88415 &lt; 0.000000000000000222\nORIGIN_hex1960  5.1529370431  0.1281343499    40.21511 &lt; 0.000000000000000222\nORIGIN_hex1961  4.9193187012  0.1281293502    38.39338 &lt; 0.000000000000000222\nORIGIN_hex1962  5.3429203928  0.1280916052    41.71171 &lt; 0.000000000000000222\nORIGIN_hex1963  4.3267795773  0.1281705563    33.75798 &lt; 0.000000000000000222\nORIGIN_hex1964  3.6760568890  0.1284393582    28.62095 &lt; 0.000000000000000222\nORIGIN_hex1967  6.7923670546  0.1280834044    53.03081 &lt; 0.000000000000000222\nORIGIN_hex1968  6.4366060293  0.1281158615    50.24051 &lt; 0.000000000000000222\nORIGIN_hex1982  3.4619830847  0.1283048789    26.98247 &lt; 0.000000000000000222\nORIGIN_hex1983  3.5795720172  0.1282061576    27.92044 &lt; 0.000000000000000222\nORIGIN_hex1984  4.6490615484  0.1280955395    36.29370 &lt; 0.000000000000000222\nORIGIN_hex1985  3.5857180387  0.1283116162    27.94539 &lt; 0.000000000000000222\nORIGIN_hex1986  4.5550286099  0.1281606367    35.54156 &lt; 0.000000000000000222\nORIGIN_hex1987  5.9057374008  0.1280594583    46.11715 &lt; 0.000000000000000222\nORIGIN_hex1988  4.2060423410  0.1281609999    32.81843 &lt; 0.000000000000000222\nORIGIN_hex1989  5.2155163952  0.1280910077    40.71727 &lt; 0.000000000000000222\nORIGIN_hex1990  6.5174063877  0.1280547485    50.89547 &lt; 0.000000000000000222\nORIGIN_hex1991  6.1133308732  0.1280724004    47.73340 &lt; 0.000000000000000222\nORIGIN_hex1992  3.6066355174  0.1288621216    27.98833 &lt; 0.000000000000000222\nORIGIN_hex1994  5.1287780053  0.1283056766    39.97312 &lt; 0.000000000000000222\nORIGIN_hex1995  6.9490143624  0.1280922943    54.25006 &lt; 0.000000000000000222\nORIGIN_hex2009  3.3390173430  0.1283311149    26.01877 &lt; 0.000000000000000222\nORIGIN_hex2010  4.0517821479  0.1281395782    31.62007 &lt; 0.000000000000000222\nORIGIN_hex2011  4.8967843615  0.1280884299    38.22972 &lt; 0.000000000000000222\nORIGIN_hex2012  4.0852833962  0.1281967745    31.86729 &lt; 0.000000000000000222\nORIGIN_hex2013  4.4348379373  0.1281308457    34.61179 &lt; 0.000000000000000222\nORIGIN_hex2014  4.8538121058  0.1281031936    37.88986 &lt; 0.000000000000000222\nORIGIN_hex2015  4.6835947133  0.1281371061    36.55143 &lt; 0.000000000000000222\nORIGIN_hex2016  5.1720281468  0.1281017198    40.37438 &lt; 0.000000000000000222\nORIGIN_hex2017  4.8067396801  0.1281341100    37.51335 &lt; 0.000000000000000222\nORIGIN_hex2021  5.4351569860  0.1282424450    42.38189 &lt; 0.000000000000000222\nORIGIN_hex2036 -0.7155174492  0.1634195626    -4.37841 0.00001195496253959439\nORIGIN_hex2037  2.0812361271  0.1289309130    16.14226 &lt; 0.000000000000000222\nORIGIN_hex2038  4.4560578370  0.1281113140    34.78270 &lt; 0.000000000000000222\nORIGIN_hex2039  5.2970213586  0.1281283121    41.34154 &lt; 0.000000000000000222\nORIGIN_hex2040  5.3956991206  0.1280825900    42.12672 &lt; 0.000000000000000222\nORIGIN_hex2041  6.0126821678  0.1280823172    46.94389 &lt; 0.000000000000000222\nORIGIN_hex2042  5.1443540400  0.1281050174    40.15732 &lt; 0.000000000000000222\nORIGIN_hex2043  3.5889250082  0.1283523287    27.96151 &lt; 0.000000000000000222\nORIGIN_hex2044  5.5244507066  0.1280795165    43.13298 &lt; 0.000000000000000222\nORIGIN_hex2046  4.3524698981  0.1283916405    33.89995 &lt; 0.000000000000000222\nORIGIN_hex2049  5.6704086767  0.1282614471    44.20977 &lt; 0.000000000000000222\nORIGIN_hex2063  2.0073825928  0.1298933915    15.45408 &lt; 0.000000000000000222\nORIGIN_hex2064  2.8434448683  0.1285386318    22.12133 &lt; 0.000000000000000222\nORIGIN_hex2065  4.1340791963  0.1281427607    32.26151 &lt; 0.000000000000000222\nORIGIN_hex2066  4.2941359754  0.1281488005    33.50898 &lt; 0.000000000000000222\nORIGIN_hex2067  5.1024973159  0.1280835730    39.83725 &lt; 0.000000000000000222\nORIGIN_hex2068  4.0206951475  0.1282315376    31.35496 &lt; 0.000000000000000222\nORIGIN_hex2069  3.2706769316  0.1284929687    25.45413 &lt; 0.000000000000000222\nORIGIN_hex2070  5.8702696557  0.1280944960    45.82765 &lt; 0.000000000000000222\nORIGIN_hex2071  4.6298964872  0.1282201752    36.10895 &lt; 0.000000000000000222\nORIGIN_hex2072  3.2361035499  0.1299223494    24.90798 &lt; 0.000000000000000222\nORIGIN_hex2074 -0.0266141799  0.2083951459    -0.12771             0.89837834\nORIGIN_hex2089  1.6247430394  0.1558618383    10.42425 &lt; 0.000000000000000222\nORIGIN_hex2090 -1.6767136752  1.0130039579    -1.65519             0.09788603\nORIGIN_hex2091  1.6698756950  0.1303648969    12.80924 &lt; 0.000000000000000222\nORIGIN_hex2092  3.3244452831  0.1283571423    25.89996 &lt; 0.000000000000000222\nORIGIN_hex2093  4.5304804800  0.1281224294    35.36056 &lt; 0.000000000000000222\nORIGIN_hex2094  5.0126563547  0.1280969665    39.13173 &lt; 0.000000000000000222\nORIGIN_hex2095  5.7521006514  0.1281385540    44.88970 &lt; 0.000000000000000222\nORIGIN_hex2096  2.7668687890  0.1288738195    21.46960 &lt; 0.000000000000000222\nORIGIN_hex2097  2.8724404085  0.1304362204    22.02180 &lt; 0.000000000000000222\nORIGIN_hex2098  3.8285583608  0.1282921070    29.84251 &lt; 0.000000000000000222\nORIGIN_hex2100  2.8891366610  0.1317421823    21.93023 &lt; 0.000000000000000222\nORIGIN_hex2101  1.7032374311  0.1424384570    11.95771 &lt; 0.000000000000000222\nORIGIN_hex2102  2.2068526873  0.1375614215    16.04267 &lt; 0.000000000000000222\nORIGIN_hex2116  2.1204862758  0.1434858214    14.77837 &lt; 0.000000000000000222\nORIGIN_hex2117 -0.7977229212  1.0130039402    -0.78748             0.43099944\nORIGIN_hex2119  4.6138072984  0.1281184681    36.01204 &lt; 0.000000000000000222\nORIGIN_hex2120  4.0880489798  0.1281835225    31.89216 &lt; 0.000000000000000222\nORIGIN_hex2121  4.3496045015  0.1281596534    33.93895 &lt; 0.000000000000000222\nORIGIN_hex2122  1.7402585406  0.1359689035    12.79895 &lt; 0.000000000000000222\nORIGIN_hex2123  4.5104410057  0.1281495081    35.19671 &lt; 0.000000000000000222\nORIGIN_hex2124  4.1468702887  0.1283582323    32.30701 &lt; 0.000000000000000222\nORIGIN_hex2125  3.9973448191  0.1283676437    31.13982 &lt; 0.000000000000000222\nORIGIN_hex2126  3.7590365682  0.1287608820    29.19393 &lt; 0.000000000000000222\nORIGIN_hex2129  1.0315042800  0.1599227767     6.45001 0.00000000011183921262\nORIGIN_hex2146  4.2097083714  0.1289114235    32.65582 &lt; 0.000000000000000222\nORIGIN_hex2147  4.6866101628  0.1281090782    36.58297 &lt; 0.000000000000000222\nORIGIN_hex2148  5.4037407548  0.1280760222    42.19167 &lt; 0.000000000000000222\nORIGIN_hex2149  4.8431376822  0.1281391866    37.79591 &lt; 0.000000000000000222\nORIGIN_hex2150  3.4450603090  0.1283746264    26.83599 &lt; 0.000000000000000222\nORIGIN_hex2151  4.0721468031  0.1282489452    31.75189 &lt; 0.000000000000000222\nORIGIN_hex2152  5.4350859800  0.1281147615    42.42357 &lt; 0.000000000000000222\nORIGIN_hex2153  2.5910255715  0.1313155137    19.73130 &lt; 0.000000000000000222\nORIGIN_hex2154  5.2890457814  0.1281897779    41.25950 &lt; 0.000000000000000222\nORIGIN_hex2155  2.2167714117  0.1342301474    16.51471 &lt; 0.000000000000000222\nORIGIN_hex2171  0.0355840485  0.2884067527     0.12338             0.90180503\nORIGIN_hex2172  5.0560525885  0.1285436188    39.33336 &lt; 0.000000000000000222\nORIGIN_hex2174  3.6351460746  0.1284217445    28.30631 &lt; 0.000000000000000222\nORIGIN_hex2175  5.3207029979  0.1280900308    41.53878 &lt; 0.000000000000000222\nORIGIN_hex2176  4.9286887058  0.1281134013    38.47130 &lt; 0.000000000000000222\nORIGIN_hex2177  5.8471419385  0.1280692632    45.65609 &lt; 0.000000000000000222\nORIGIN_hex2178  4.5851995015  0.1281666178    35.77530 &lt; 0.000000000000000222\nORIGIN_hex2179  4.8831503380  0.1281551711    38.10342 &lt; 0.000000000000000222\nORIGIN_hex2180  5.6514455380  0.1281203654    44.11044 &lt; 0.000000000000000222\nORIGIN_hex2181  6.0380588075  0.1281253299    47.12619 &lt; 0.000000000000000222\nORIGIN_hex2182  2.8471123296  0.1375409043    20.70011 &lt; 0.000000000000000222\nORIGIN_hex2200  3.7521895322  0.1293440200    29.00938 &lt; 0.000000000000000222\nORIGIN_hex2201  5.2356109414  0.1280840545    40.87637 &lt; 0.000000000000000222\nORIGIN_hex2202  2.9747331320  0.1290809650    23.04548 &lt; 0.000000000000000222\nORIGIN_hex2203  5.0101642040  0.1281402914    39.09905 &lt; 0.000000000000000222\nORIGIN_hex2204  4.2813415858  0.1281624833    33.40558 &lt; 0.000000000000000222\nORIGIN_hex2205  4.3920726715  0.1281816304    34.26445 &lt; 0.000000000000000222\nORIGIN_hex2206  5.9252212917  0.1280729399    46.26443 &lt; 0.000000000000000222\nORIGIN_hex2207  4.7892121298  0.1281758853    37.36438 &lt; 0.000000000000000222\nORIGIN_hex2208  6.2524195536  0.1280963291    48.81029 &lt; 0.000000000000000222\nORIGIN_hex2209  1.3020666634  0.1468129024     8.86888 &lt; 0.000000000000000222\nORIGIN_hex2227  3.6288391101  0.1283639166    28.26993 &lt; 0.000000000000000222\nORIGIN_hex2228  5.0665261397  0.1281107329    39.54802 &lt; 0.000000000000000222\nORIGIN_hex2229  4.1928365095  0.1281699673    32.71310 &lt; 0.000000000000000222\nORIGIN_hex2230  4.1365275791  0.1283311187    32.23324 &lt; 0.000000000000000222\nORIGIN_hex2231  4.8072236750  0.1281146469    37.52283 &lt; 0.000000000000000222\nORIGIN_hex2233  6.0706898185  0.1280702820    47.40124 &lt; 0.000000000000000222\nORIGIN_hex2234  1.8650835216  0.1348007580    13.83585 &lt; 0.000000000000000222\nORIGIN_hex2235  3.5317058238  0.1321001118    26.73507 &lt; 0.000000000000000222\nORIGIN_hex2254  3.5591229224  0.1290719819    27.57471 &lt; 0.000000000000000222\nORIGIN_hex2255  5.0303273562  0.1281057279    39.26700 &lt; 0.000000000000000222\nORIGIN_hex2256  4.2730552897  0.1281594241    33.34172 &lt; 0.000000000000000222\nORIGIN_hex2257  3.3812815057  0.1285066137    26.31212 &lt; 0.000000000000000222\nORIGIN_hex2258  4.2217261718  0.1282132905    32.92737 &lt; 0.000000000000000222\nORIGIN_hex2259  3.5213693010  0.1285711004    27.38850 &lt; 0.000000000000000222\nORIGIN_hex2260  5.6800738186  0.1280888292    44.34480 &lt; 0.000000000000000222\nORIGIN_hex2261  5.9485199312  0.1280939512    46.43873 &lt; 0.000000000000000222\nORIGIN_hex2262  5.6179549686  0.1281546373    43.83731 &lt; 0.000000000000000222\nORIGIN_hex2281  4.9952708039  0.1281252552    38.98740 &lt; 0.000000000000000222\nORIGIN_hex2282  4.9248672518  0.1281152669    38.44091 &lt; 0.000000000000000222\nORIGIN_hex2283  4.8134024494  0.1281070099    37.57329 &lt; 0.000000000000000222\nORIGIN_hex2284  3.7177196434  0.1282929344    28.97837 &lt; 0.000000000000000222\nORIGIN_hex2285  5.7046485841  0.1280972279    44.53374 &lt; 0.000000000000000222\nORIGIN_hex2286  4.1548923753  0.1282575426    32.39492 &lt; 0.000000000000000222\nORIGIN_hex2287  6.1291677885  0.1280740165    47.85645 &lt; 0.000000000000000222\nORIGIN_hex2288  5.0042181015  0.1282774299    39.01090 &lt; 0.000000000000000222\nORIGIN_hex2308  4.4745855302  0.1283056376    34.87443 &lt; 0.000000000000000222\nORIGIN_hex2309  5.2012586789  0.1280932463    40.60525 &lt; 0.000000000000000222\nORIGIN_hex2310  4.5304983424  0.1281225586    35.36066 &lt; 0.000000000000000222\nORIGIN_hex2311  4.6006840535  0.1281203489    35.90908 &lt; 0.000000000000000222\nORIGIN_hex2312  2.2235719089  0.1296739148    17.14741 &lt; 0.000000000000000222\nORIGIN_hex2313  5.0321184859  0.1281350393    39.27199 &lt; 0.000000000000000222\nORIGIN_hex2314  5.8647028399  0.1280697345    45.79304 &lt; 0.000000000000000222\nORIGIN_hex2315  4.9576687894  0.1281638471    38.68227 &lt; 0.000000000000000222\nORIGIN_hex2316  6.4052409737  0.1280886584    50.00631 &lt; 0.000000000000000222\nORIGIN_hex2317  6.2335118397  0.1283877190    48.55224 &lt; 0.000000000000000222\nORIGIN_hex2335  3.5854753166  0.1284105275    27.92197 &lt; 0.000000000000000222\nORIGIN_hex2336  5.0925025793  0.1280891220    39.75749 &lt; 0.000000000000000222\nORIGIN_hex2337  3.8320469182  0.1282143863    29.88781 &lt; 0.000000000000000222\nORIGIN_hex2338  1.6733963127  0.1308278754    12.79082 &lt; 0.000000000000000222\nORIGIN_hex2339  5.1889374409  0.1281121190    40.50310 &lt; 0.000000000000000222\nORIGIN_hex2340  5.8234863836  0.1280722371    45.47033 &lt; 0.000000000000000222\nORIGIN_hex2341  5.5156842309  0.1280901564    43.06095 &lt; 0.000000000000000222\nORIGIN_hex2342  5.4769640094  0.1281062769    42.75328 &lt; 0.000000000000000222\nORIGIN_hex2343  5.7143876829  0.1281270094    44.59940 &lt; 0.000000000000000222\nORIGIN_hex2362  4.0668353515  0.1284450394    31.66207 &lt; 0.000000000000000222\nORIGIN_hex2363  4.4065212838  0.1281756079    34.37878 &lt; 0.000000000000000222\nORIGIN_hex2364  1.0079269546  0.1325685543     7.60306 0.00000000000002892046\nORIGIN_hex2365  3.0876682526  0.1284232955    24.04290 &lt; 0.000000000000000222\nORIGIN_hex2366 -1.7590723725  0.2230513328    -7.88640 0.00000000000000311025\nORIGIN_hex2367  4.8581596701  0.1281569113    37.90790 &lt; 0.000000000000000222\nORIGIN_hex2368  5.4043612038  0.1280936324    42.19071 &lt; 0.000000000000000222\nORIGIN_hex2369  5.5809286545  0.1281005558    43.56678 &lt; 0.000000000000000222\nORIGIN_hex2370  6.2182623058  0.1280753827    48.55158 &lt; 0.000000000000000222\nORIGIN_hex2371  6.2224328614  0.1280953603    48.57657 &lt; 0.000000000000000222\nORIGIN_hex2389  4.2908990037  0.1282121633    33.46718 &lt; 0.000000000000000222\nORIGIN_hex2390  4.9328358155  0.1281026410    38.50690 &lt; 0.000000000000000222\nORIGIN_hex2391  4.4193879097  0.1281600677    34.48335 &lt; 0.000000000000000222\nORIGIN_hex2392  2.8947834016  0.1290508850    22.43133 &lt; 0.000000000000000222\nORIGIN_hex2393  3.3446972387  0.1307574599    25.57940 &lt; 0.000000000000000222\nORIGIN_hex2394  3.9346746171  0.1283653292    30.65216 &lt; 0.000000000000000222\nORIGIN_hex2395  5.6655747945  0.1280933983    44.23003 &lt; 0.000000000000000222\nORIGIN_hex2396  5.9370826891  0.1280796961    46.35460 &lt; 0.000000000000000222\nORIGIN_hex2397  4.8581115408  0.1282053472    37.89321 &lt; 0.000000000000000222\nORIGIN_hex2398  5.5209679858  0.1282637060    43.04388 &lt; 0.000000000000000222\nORIGIN_hex2416  4.3749703648  0.1282392189    34.11570 &lt; 0.000000000000000222\nORIGIN_hex2417  4.6875785889  0.1282252115    36.55739 &lt; 0.000000000000000222\nORIGIN_hex2418  4.3538382337  0.1281509281    33.97430 &lt; 0.000000000000000222\nORIGIN_hex2419  3.9692712669  0.1281970438    30.96227 &lt; 0.000000000000000222\nORIGIN_hex2420  3.2323050692  0.1303116836    24.80441 &lt; 0.000000000000000222\nORIGIN_hex2422  4.5892356450  0.1286531178    35.67139 &lt; 0.000000000000000222\nORIGIN_hex2423  5.3135545704  0.1281387646    41.46719 &lt; 0.000000000000000222\nORIGIN_hex2424  6.6576945172  0.1280647655    51.98693 &lt; 0.000000000000000222\nORIGIN_hex2425  6.3305862658  0.1280847505    49.42498 &lt; 0.000000000000000222\nORIGIN_hex2426  5.8784226208  0.1283883572    45.78626 &lt; 0.000000000000000222\nORIGIN_hex2443  5.3656037792  0.1280984837    41.88655 &lt; 0.000000000000000222\nORIGIN_hex2444  5.3796522008  0.1280805140    42.00211 &lt; 0.000000000000000222\nORIGIN_hex2445  5.4246848045  0.1280765299    42.35503 &lt; 0.000000000000000222\nORIGIN_hex2448  2.2754741828  0.1318026566    17.26425 &lt; 0.000000000000000222\nORIGIN_hex2449  5.8365141413  0.1281525297    45.54350 &lt; 0.000000000000000222\nORIGIN_hex2450  5.9073534726  0.1281125496    46.11065 &lt; 0.000000000000000222\nORIGIN_hex2451  6.8876618477  0.1280643828    53.78281 &lt; 0.000000000000000222\nORIGIN_hex2452  2.3569598405  0.1327690090    17.75233 &lt; 0.000000000000000222\nORIGIN_hex2471  4.5529923208  0.1281483002    35.52909 &lt; 0.000000000000000222\nORIGIN_hex2472  3.6626140083  0.1289272507    28.40838 &lt; 0.000000000000000222\nORIGIN_hex2473  5.0562940883  0.1281194569    39.46547 &lt; 0.000000000000000222\nORIGIN_hex2476  3.1522236612  0.1304568091    24.16297 &lt; 0.000000000000000222\nORIGIN_hex2478  5.5215986930  0.1281550607    43.08530 &lt; 0.000000000000000222\nORIGIN_hex2479  4.1408951154  0.1285489639    32.21259 &lt; 0.000000000000000222\nORIGIN_hex2480  3.1984231988  0.1330346739    24.04203 &lt; 0.000000000000000222\nORIGIN_hex2497  5.5027449089  0.1280889810    42.96033 &lt; 0.000000000000000222\nORIGIN_hex2498  3.7295803744  0.1283450952    29.05900 &lt; 0.000000000000000222\nORIGIN_hex2499  5.3956198441  0.1281091312    42.11737 &lt; 0.000000000000000222\nORIGIN_hex2500  1.1676743597  0.1350861724     8.64392 &lt; 0.000000000000000222\nORIGIN_hex2503 -0.7473221861  0.1991811511    -3.75197             0.00017545\nORIGIN_hex2504  4.4330486765  0.1287533839    34.43054 &lt; 0.000000000000000222\nORIGIN_hex2505  5.6089661021  0.1281535097    43.76756 &lt; 0.000000000000000222\nORIGIN_hex2525  4.2198587456  0.1282562205    32.90179 &lt; 0.000000000000000222\nORIGIN_hex2526  5.0424284020  0.1281187361    39.35746 &lt; 0.000000000000000222\nORIGIN_hex2527  5.4040737265  0.1280970161    42.18735 &lt; 0.000000000000000222\nORIGIN_hex2531 -1.2020552853  0.4652191503    -2.58385             0.00977050\nORIGIN_hex2532  5.6983051209  0.1281629762    44.46140 &lt; 0.000000000000000222\nORIGIN_hex2533  6.5691490183  0.1282157449    51.23512 &lt; 0.000000000000000222\nORIGIN_hex2551  4.4936521000  0.1282259889    35.04478 &lt; 0.000000000000000222\nORIGIN_hex2552  3.5822518955  0.1286160433    27.85229 &lt; 0.000000000000000222\nORIGIN_hex2553  4.6965202631  0.1282663902    36.61536 &lt; 0.000000000000000222\nORIGIN_hex2554  3.6979767731  0.1284471088    28.78988 &lt; 0.000000000000000222\nORIGIN_hex2557  3.2298681865  0.1305868812    24.73348 &lt; 0.000000000000000222\nORIGIN_hex2559  5.8293233443  0.1282595903    45.44941 &lt; 0.000000000000000222\nORIGIN_hex2579  4.3886077070  0.1282112686    34.22950 &lt; 0.000000000000000222\nORIGIN_hex2580  5.1726795584  0.1280991724    40.38027 &lt; 0.000000000000000222\nORIGIN_hex2581  4.8566613775  0.1281646174    37.89393 &lt; 0.000000000000000222\nORIGIN_hex2584  1.0894592032  0.1424299637     7.64909 0.00000000000002024111\nORIGIN_hex2605  4.5079727778  0.1283648373    35.11844 &lt; 0.000000000000000222\nORIGIN_hex2606  4.4392575448  0.1288689519    34.44784 &lt; 0.000000000000000222\nORIGIN_hex2607  5.6929359246  0.1280794201    44.44848 &lt; 0.000000000000000222\nORIGIN_hex2608  4.3836697899  0.1282687011    34.17568 &lt; 0.000000000000000222\nORIGIN_hex2609  3.4916140706  0.1288243811    27.10367 &lt; 0.000000000000000222\nORIGIN_hex2610  2.9324352369  0.1302504979    22.51381 &lt; 0.000000000000000222\nORIGIN_hex2611  0.7881420614  0.1523865082     5.17199 0.00000023160938520535\nORIGIN_hex2633  4.4900735786  0.1282041818    35.02283 &lt; 0.000000000000000222\nORIGIN_hex2634  6.0760394486  0.1280633285    47.44558 &lt; 0.000000000000000222\nORIGIN_hex2635  5.3851572692  0.1281277746    42.02959 &lt; 0.000000000000000222\nORIGIN_hex2636  5.4423094057  0.1281066907    42.48263 &lt; 0.000000000000000222\nORIGIN_hex2637  3.9198195861  0.1284008075    30.52800 &lt; 0.000000000000000222\nORIGIN_hex2638  3.6041271108  0.1284603050    28.05635 &lt; 0.000000000000000222\nORIGIN_hex2660  3.7788248374  0.1282858486    29.45629 &lt; 0.000000000000000222\nORIGIN_hex2661  5.1766294990  0.1280928674    40.41310 &lt; 0.000000000000000222\nORIGIN_hex2662  4.3357286198  0.1281842864    33.82418 &lt; 0.000000000000000222\nORIGIN_hex2663  5.8901537695  0.1280844992    45.98647 &lt; 0.000000000000000222\nORIGIN_hex2664  4.4788826949  0.1282016211    34.93624 &lt; 0.000000000000000222\nORIGIN_hex2665  5.3608641472  0.1281244962    41.84106 &lt; 0.000000000000000222\nORIGIN_hex2687  4.4635283221  0.1282205524    34.81133 &lt; 0.000000000000000222\nORIGIN_hex2688  5.1390653353  0.1280927927    40.11986 &lt; 0.000000000000000222\nORIGIN_hex2689  5.3004418783  0.1281006047    41.37718 &lt; 0.000000000000000222\nORIGIN_hex2690  4.5673161696  0.1281504439    35.64027 &lt; 0.000000000000000222\nORIGIN_hex2691  5.8827008856  0.1280765466    45.93113 &lt; 0.000000000000000222\nORIGIN_hex2693  5.6321974586  0.1281089176    43.96413 &lt; 0.000000000000000222\nORIGIN_hex2714  4.8046335685  0.1281412647    37.49482 &lt; 0.000000000000000222\nORIGIN_hex2715  5.5320117306  0.1281053402    43.18330 &lt; 0.000000000000000222\nORIGIN_hex2716  1.3851691205  0.1306137599    10.60508 &lt; 0.000000000000000222\nORIGIN_hex2717  4.6569954798  0.1281122876    36.35089 &lt; 0.000000000000000222\nORIGIN_hex2718  4.9785707672  0.1281511247    38.84922 &lt; 0.000000000000000222\nORIGIN_hex2719  5.6754375664  0.1281000256    44.30473 &lt; 0.000000000000000222\nORIGIN_hex2742  5.3019348159  0.1280933196    41.39119 &lt; 0.000000000000000222\nORIGIN_hex2743  3.9715900854  0.1284767614    30.91291 &lt; 0.000000000000000222\nORIGIN_hex2744  5.1935527237  0.1280815840    40.54879 &lt; 0.000000000000000222\nORIGIN_hex2745  5.2142417999  0.1280882571    40.70820 &lt; 0.000000000000000222\nORIGIN_hex2746  4.3652012043  0.1284328754    33.98819 &lt; 0.000000000000000222\nORIGIN_hex2747  5.0216889410  0.1281861488    39.17497 &lt; 0.000000000000000222\nORIGIN_hex2768  5.2626497897  0.1281317435    41.07218 &lt; 0.000000000000000222\nORIGIN_hex2769  5.4620451050  0.1280879897    42.64291 &lt; 0.000000000000000222\nORIGIN_hex2770  3.5579063802  0.1282965906    27.73189 &lt; 0.000000000000000222\nORIGIN_hex2771  5.9915600356  0.1280628759    46.78608 &lt; 0.000000000000000222\nORIGIN_hex2772  4.2503405850  0.1283158311    33.12405 &lt; 0.000000000000000222\nORIGIN_hex2773  4.9789063081  0.1281267620    38.85922 &lt; 0.000000000000000222\nORIGIN_hex2795  1.9233556904  0.1615804384    11.90339 &lt; 0.000000000000000222\nORIGIN_hex2796  2.5146858342  0.1297814369    19.37631 &lt; 0.000000000000000222\nORIGIN_hex2797  3.6331860150  0.1282666862    28.32525 &lt; 0.000000000000000222\nORIGIN_hex2798  4.2364800096  0.1281525234    33.05811 &lt; 0.000000000000000222\nORIGIN_hex2799  4.8074184753  0.1281061634    37.52683 &lt; 0.000000000000000222\nORIGIN_hex2800  4.9293841031  0.1281320964    38.47111 &lt; 0.000000000000000222\nORIGIN_hex2801  2.4269620585  0.1308507774    18.54756 &lt; 0.000000000000000222\nORIGIN_hex2822  2.8466575968  0.1292570090    22.02324 &lt; 0.000000000000000222\nORIGIN_hex2823  2.9112903299  0.1285995808    22.63841 &lt; 0.000000000000000222\nORIGIN_hex2824  4.5234327596  0.1281527713    35.29719 &lt; 0.000000000000000222\nORIGIN_hex2825  5.2933907968  0.1280806912    41.32856 &lt; 0.000000000000000222\nORIGIN_hex2826  5.3414242156  0.1281333532    41.68645 &lt; 0.000000000000000222\nORIGIN_hex2827  5.5846409389  0.1280950427    43.59764 &lt; 0.000000000000000222\nORIGIN_hex2850  4.1318112692  0.1284794726    32.15931 &lt; 0.000000000000000222\nORIGIN_hex2851  2.4020207476  0.1290181875    18.61769 &lt; 0.000000000000000222\nORIGIN_hex2852  4.8881023224  0.1281166367    38.15353 &lt; 0.000000000000000222\nORIGIN_hex2853  5.7686897279  0.1280720353    45.04254 &lt; 0.000000000000000222\nORIGIN_hex2854  5.5177361476  0.1280906071    43.07682 &lt; 0.000000000000000222\nORIGIN_hex2877  2.5894087987  0.1291891670    20.04354 &lt; 0.000000000000000222\nORIGIN_hex2878  4.2394288302  0.1281734876    33.07571 &lt; 0.000000000000000222\nORIGIN_hex2879  5.2051433047  0.1281568121    40.61542 &lt; 0.000000000000000222\nORIGIN_hex2880  4.8784763774  0.1281234380    38.07638 &lt; 0.000000000000000222\nORIGIN_hex2881  5.2926133516  0.1281110343    41.31270 &lt; 0.000000000000000222\nORIGIN_hex2905  4.0862726618  0.1282614878    31.85892 &lt; 0.000000000000000222\nORIGIN_hex2906  3.8646798650  0.1283896630    30.10118 &lt; 0.000000000000000222\nORIGIN_hex2907  4.8376127454  0.1281159502    37.75964 &lt; 0.000000000000000222\nORIGIN_hex2908  5.1529337695  0.1281243636    40.21822 &lt; 0.000000000000000222\nORIGIN_hex2909  4.0326542311  0.1296063991    31.11462 &lt; 0.000000000000000222\nORIGIN_hex2931  1.0657738192  0.1352541671     7.87979 0.00000000000000327944\nORIGIN_hex2932 -0.1649175945  0.1457155489    -1.13178             0.25772795\nORIGIN_hex2933  2.8664775816  0.1286630571    22.27895 &lt; 0.000000000000000222\nORIGIN_hex2934  4.4065841623  0.1281676821    34.38140 &lt; 0.000000000000000222\nORIGIN_hex2959  1.7314688737  0.1312500753    13.19214 &lt; 0.000000000000000222\nORIGIN_hex2960  3.7419925802  0.1293181764    28.93632 &lt; 0.000000000000000222\nORIGIN_hex2961  4.3397043450  0.1282714592    33.83219 &lt; 0.000000000000000222\nORIGIN_hex2962  4.1964581404  0.1283008693    32.70795 &lt; 0.000000000000000222\nORIGIN_hex2963  1.0883665329  0.1476773931     7.36989 0.00000000000017076550\nORIGIN_hex2987  2.2867856229  0.1340937630    17.05363 &lt; 0.000000000000000222\nORIGIN_hex2988  2.4710872787  0.1298667700    19.02786 &lt; 0.000000000000000222\nORIGIN_hex2989  2.3585033814  0.1294775882    18.21553 &lt; 0.000000000000000222\nORIGIN_hex2990  2.2141432532  0.1335828731    16.57505 &lt; 0.000000000000000222\nORIGIN_hex3015  4.0917350332  0.1294211985    31.61565 &lt; 0.000000000000000222\nORIGIN_hex3016  3.6828306837  0.1290108847    28.54667 &lt; 0.000000000000000222\nORIGIN_hex3017  1.1512312323  0.1328591476     8.66505 &lt; 0.000000000000000222\nORIGIN_hex3040  4.6581002119  0.1283320335    36.29725 &lt; 0.000000000000000222\nORIGIN_hex3043  2.5536029638  0.1291891926    19.76638 &lt; 0.000000000000000222\nORIGIN_hex3044  2.7294360924  0.1293766522    21.09682 &lt; 0.000000000000000222\nORIGIN_hex3068  2.6707115318  0.1294203454    20.63595 &lt; 0.000000000000000222\nORIGIN_hex3070  0.9314841352  0.1447604741     6.43466 0.00000000012375169387\nORIGIN_hex3072  1.7030952522  0.1370490939    12.42690 &lt; 0.000000000000000222\nORIGIN_hex3092  4.9512181518  0.1290774012    38.35852 &lt; 0.000000000000000222\nORIGIN_hex3098  4.1019548469  0.1283469892    31.95988 &lt; 0.000000000000000222\nORIGIN_hex3123  6.0504115122  0.1281744539    47.20450 &lt; 0.000000000000000222\nORIGIN_hex3126 -1.8133351869  0.2963765155    -6.11835 0.00000000094549356580\nORIGIN_hex3151  3.4838238736  0.1288756506    27.03244 &lt; 0.000000000000000222\nORIGIN_hex3152 -1.1701670274  0.1719441419    -6.80551 0.00000000001006941214\nORIGIN_hex3173  4.3600807398  0.1294583221    33.67942 &lt; 0.000000000000000222\nORIGIN_hex3178  2.4645870316  0.1295932316    19.01787 &lt; 0.000000000000000222\nORIGIN_hex3179  1.9069222121  0.1299094962    14.67885 &lt; 0.000000000000000222\nORIGIN_hex3205  2.4303772493  0.1320681049    18.40245 &lt; 0.000000000000000222\nORIGIN_hex3206  4.4501137701  0.1284470854    34.64550 &lt; 0.000000000000000222\nORIGIN_hex3232  1.9415125467  0.1352697460    14.35290 &lt; 0.000000000000000222\nORIGIN_hex3233  1.2664458626  0.1407198671     8.99977 &lt; 0.000000000000000222\nORIGIN_hex3308  4.0331856979  0.1339752213    30.10397 &lt; 0.000000000000000222\nDESTIN_hex146   1.3403098872  0.0552883030    24.24220 &lt; 0.000000000000000222\nDESTIN_hex174  -0.3026711449  0.0582053286    -5.20006 0.00000019922524219511\nDESTIN_hex175  -0.0256713953  0.0545392148    -0.47070             0.63785777\nDESTIN_hex200   0.4337182471  0.0610998765     7.09851 0.00000000000126106639\nDESTIN_hex201   0.2915056844  0.0531550869     5.48406 0.00000004156737604725\nDESTIN_hex202  -0.3555119207  0.0562227954    -6.32327 0.00000000025608511348\nDESTIN_hex203  -0.7025971494  0.0552175925   -12.72415 &lt; 0.000000000000000222\nDESTIN_hex227  -2.0647845771  0.0668921697   -30.86736 &lt; 0.000000000000000222\nDESTIN_hex228  -0.4163946566  0.0536496290    -7.76137 0.00000000000000840164\nDESTIN_hex229  -3.5670014991  0.1127151958   -31.64615 &lt; 0.000000000000000222\nDESTIN_hex230   0.7959554534  0.0519877834    15.31043 &lt; 0.000000000000000222\nDESTIN_hex231  -2.3896753350  0.0601505635   -39.72823 &lt; 0.000000000000000222\nDESTIN_hex254   1.6311909801  0.0538693955    30.28048 &lt; 0.000000000000000222\nDESTIN_hex255  -0.3587688436  0.0543398558    -6.60231 0.00000000004047863157\nDESTIN_hex256   0.7942174563  0.0523082531    15.18341 &lt; 0.000000000000000222\nDESTIN_hex257  -1.4983363056  0.0551947847   -27.14634 &lt; 0.000000000000000222\nDESTIN_hex258  -0.7844064632  0.0550321507   -14.25360 &lt; 0.000000000000000222\nDESTIN_hex259  -1.3802163913  0.0527954243   -26.14273 &lt; 0.000000000000000222\nDESTIN_hex281  -2.2615354465  0.0688225342   -32.86039 &lt; 0.000000000000000222\nDESTIN_hex282  -1.1888402515  0.0582392376   -20.41305 &lt; 0.000000000000000222\nDESTIN_hex284   0.1504920773  0.0516508199     2.91364             0.00357238\nDESTIN_hex285  -0.9043040816  0.0520017903   -17.38986 &lt; 0.000000000000000222\nDESTIN_hex286  -0.0179897632  0.0517546763    -0.34760             0.72814296\nDESTIN_hex312  -0.5191882258  0.0520726735    -9.97045 &lt; 0.000000000000000222\nDESTIN_hex313  -1.9493904572  0.0561277498   -34.73131 &lt; 0.000000000000000222\nDESTIN_hex314  -1.3978880715  0.0532670254   -26.24303 &lt; 0.000000000000000222\nDESTIN_hex336  -1.5666070429  0.0659514423   -23.75395 &lt; 0.000000000000000222\nDESTIN_hex338  -2.2407377875  0.0560356034   -39.98775 &lt; 0.000000000000000222\nDESTIN_hex339  -2.6882494090  0.0566395006   -47.46245 &lt; 0.000000000000000222\nDESTIN_hex340  -4.9904033562  0.2631919225   -18.96108 &lt; 0.000000000000000222\nDESTIN_hex366  -1.6838344832  0.0531019564   -31.70946 &lt; 0.000000000000000222\nDESTIN_hex367  -0.9083379525  0.0518898841   -17.50511 &lt; 0.000000000000000222\nDESTIN_hex391  -0.6944831568  0.0587578103   -11.81942 &lt; 0.000000000000000222\nDESTIN_hex392  -1.5217354985  0.0538925334   -28.23648 &lt; 0.000000000000000222\nDESTIN_hex393  -0.4634969406  0.0514869226    -9.00223 &lt; 0.000000000000000222\nDESTIN_hex394  -3.1507545614  0.0934839861   -33.70368 &lt; 0.000000000000000222\nDESTIN_hex419   0.0177669880  0.0539891694     0.32908             0.74209197\nDESTIN_hex420  -0.8679606491  0.0530671639   -16.35589 &lt; 0.000000000000000222\nDESTIN_hex421  -1.2718837010  0.0558824287   -22.75999 &lt; 0.000000000000000222\nDESTIN_hex445   0.8110901891  0.0524553242    15.46250 &lt; 0.000000000000000222\nDESTIN_hex446  -2.2835618546  0.0546144340   -41.81242 &lt; 0.000000000000000222\nDESTIN_hex447  -1.4621592629  0.0536849428   -27.23593 &lt; 0.000000000000000222\nDESTIN_hex472  -1.1790682977  0.0604799441   -19.49519 &lt; 0.000000000000000222\nDESTIN_hex473  -0.5710463685  0.0524258449   -10.89246 &lt; 0.000000000000000222\nDESTIN_hex474  -1.0421360763  0.0533978471   -19.51644 &lt; 0.000000000000000222\nDESTIN_hex499   0.4193486831  0.0526363981     7.96690 0.00000000000000162710\nDESTIN_hex500  -1.4486901835  0.0530137623   -27.32668 &lt; 0.000000000000000222\nDESTIN_hex526   1.2033403386  0.0520013964    23.14054 &lt; 0.000000000000000222\nDESTIN_hex527  -0.6456333054  0.0534153161   -12.08704 &lt; 0.000000000000000222\nDESTIN_hex528  -0.1072199668  0.0515573292    -2.07963             0.03755984\nDESTIN_hex552   0.0513630123  0.0546102804     0.94054             0.34694196\nDESTIN_hex553  -3.2301738029  0.0780363845   -41.39318 &lt; 0.000000000000000222\nDESTIN_hex554  -0.3559291255  0.0520676149    -6.83590 0.00000000000814904978\nDESTIN_hex555  -1.1514035948  0.0518373532   -22.21185 &lt; 0.000000000000000222\nDESTIN_hex581   0.3361301550  0.0515836515     6.51621 0.00000000007210368560\nDESTIN_hex582  -1.8354146272  0.0523332275   -35.07169 &lt; 0.000000000000000222\nDESTIN_hex607  -0.4506436186  0.0540748810    -8.33370 &lt; 0.000000000000000222\nDESTIN_hex608  -0.7775092920  0.0524135671   -14.83412 &lt; 0.000000000000000222\nDESTIN_hex609   0.0635652165  0.0512241753     1.24092             0.21463449\nDESTIN_hex610   0.0518747362  0.0516928150     1.00352             0.31561038\nDESTIN_hex611  -2.0020690088  0.0578710896   -34.59532 &lt; 0.000000000000000222\nDESTIN_hex634   0.4052311098  0.0529501564     7.65307 0.00000000000001962412\nDESTIN_hex635   0.2199717102  0.0520298891     4.22780 0.00002359925473604047\nDESTIN_hex636  -1.8574004373  0.0521893925   -35.58962 &lt; 0.000000000000000222\nDESTIN_hex638   0.9399743276  0.0512210205    18.35134 &lt; 0.000000000000000222\nDESTIN_hex661  -0.6495075107  0.0553212475   -11.74065 &lt; 0.000000000000000222\nDESTIN_hex662  -0.3661034368  0.0522775559    -7.00307 0.00000000000250411801\nDESTIN_hex663  -1.9440791168  0.0518688097   -37.48070 &lt; 0.000000000000000222\nDESTIN_hex664  -0.6953363317  0.0518193157   -13.41848 &lt; 0.000000000000000222\nDESTIN_hex665  -1.3037432214  0.0523562737   -24.90138 &lt; 0.000000000000000222\nDESTIN_hex689  -1.2475886371  0.0536873981   -23.23802 &lt; 0.000000000000000222\nDESTIN_hex690  -1.1833211166  0.0518636947   -22.81598 &lt; 0.000000000000000222\nDESTIN_hex692  -1.8938829226  0.0527147793   -35.92698 &lt; 0.000000000000000222\nDESTIN_hex693  -2.2837798831  0.0568765235   -40.15330 &lt; 0.000000000000000222\nDESTIN_hex715  -0.8890801429  0.0556085710   -15.98819 &lt; 0.000000000000000222\nDESTIN_hex716  -1.4611557477  0.0535165955   -27.30285 &lt; 0.000000000000000222\nDESTIN_hex717  -2.0679935412  0.0521028429   -39.69061 &lt; 0.000000000000000222\nDESTIN_hex718  -0.5020989955  0.0512543413    -9.79622 &lt; 0.000000000000000222\nDESTIN_hex719  -2.1114514934  0.0545264467   -38.72344 &lt; 0.000000000000000222\nDESTIN_hex720  -3.9664673953  0.0727844677   -54.49607 &lt; 0.000000000000000222\nDESTIN_hex743   0.5887133430  0.0517975027    11.36567 &lt; 0.000000000000000222\nDESTIN_hex744  -0.9849185544  0.0517502349   -19.03216 &lt; 0.000000000000000222\nDESTIN_hex745  -2.1977363636  0.0517083475   -42.50254 &lt; 0.000000000000000222\nDESTIN_hex746  -2.2133203906  0.0517989093   -42.72909 &lt; 0.000000000000000222\nDESTIN_hex747  -0.4100148218  0.0515446278    -7.95456 0.00000000000000179770\nDESTIN_hex748  -2.0700981840  0.0546998313   -37.84469 &lt; 0.000000000000000222\nDESTIN_hex769  -0.5082749011  0.0535930831    -9.48396 &lt; 0.000000000000000222\nDESTIN_hex770   0.8287680815  0.0514501739    16.10817 &lt; 0.000000000000000222\nDESTIN_hex771  -1.2622206515  0.0514885288   -24.51460 &lt; 0.000000000000000222\nDESTIN_hex772  -0.5732319664  0.0511298104   -11.21131 &lt; 0.000000000000000222\nDESTIN_hex773  -2.8749672435  0.0528106260   -54.43918 &lt; 0.000000000000000222\nDESTIN_hex774  -1.3348683844  0.0524372041   -25.45651 &lt; 0.000000000000000222\nDESTIN_hex775  -1.6628159878  0.0533310150   -31.17916 &lt; 0.000000000000000222\nDESTIN_hex776  -4.5825759346  0.1791354723   -25.58162 &lt; 0.000000000000000222\nDESTIN_hex777  -2.8927568822  0.0666615004   -43.39472 &lt; 0.000000000000000222\nDESTIN_hex797  -0.8971023444  0.0538573464   -16.65701 &lt; 0.000000000000000222\nDESTIN_hex798  -3.1556185051  0.0690119575   -45.72568 &lt; 0.000000000000000222\nDESTIN_hex799  -0.7529633719  0.0511859491   -14.71035 &lt; 0.000000000000000222\nDESTIN_hex800  -1.5628680320  0.0513323063   -30.44609 &lt; 0.000000000000000222\nDESTIN_hex802  -4.9736370779  0.0891978996   -55.75958 &lt; 0.000000000000000222\nDESTIN_hex803  -2.8289811101  0.0608147072   -46.51804 &lt; 0.000000000000000222\nDESTIN_hex805  -3.0786168615  0.0735843542   -41.83793 &lt; 0.000000000000000222\nDESTIN_hex806  -0.5734052148  0.0535407400   -10.70970 &lt; 0.000000000000000222\nDESTIN_hex823  -0.3263558825  0.0540585455    -6.03708 0.00000000156925806400\nDESTIN_hex824  -0.0318080108  0.0522781051    -0.60844             0.54289670\nDESTIN_hex825  -1.4965051627  0.0521467692   -28.69795 &lt; 0.000000000000000222\nDESTIN_hex826   0.7999493073  0.0510600289    15.66684 &lt; 0.000000000000000222\nDESTIN_hex827  -0.8277475645  0.0512500997   -16.15114 &lt; 0.000000000000000222\nDESTIN_hex832  -4.7737921000  0.2066131442   -23.10498 &lt; 0.000000000000000222\nDESTIN_hex833  -2.7376570199  0.0717621841   -38.14902 &lt; 0.000000000000000222\nDESTIN_hex851  -0.9342369311  0.0550523587   -16.96997 &lt; 0.000000000000000222\nDESTIN_hex852  -0.0018037097  0.0518654478    -0.03478             0.97225779\nDESTIN_hex853  -1.9672477026  0.0515082886   -38.19284 &lt; 0.000000000000000222\nDESTIN_hex854  -1.8090748478  0.0513616364   -35.22230 &lt; 0.000000000000000222\nDESTIN_hex856  -6.9707469998  0.2026696201   -34.39463 &lt; 0.000000000000000222\nDESTIN_hex861  -2.9906216471  0.0726114302   -41.18665 &lt; 0.000000000000000222\nDESTIN_hex862  -1.8633852957  0.0622941673   -29.91268 &lt; 0.000000000000000222\nDESTIN_hex878  -0.2012702327  0.0525232104    -3.83202             0.00012709\nDESTIN_hex879  -0.7242827009  0.0515089125   -14.06131 &lt; 0.000000000000000222\nDESTIN_hex880  -2.1742240165  0.0515296227   -42.19367 &lt; 0.000000000000000222\nDESTIN_hex881  -1.8815335054  0.0515876687   -36.47254 &lt; 0.000000000000000222\nDESTIN_hex888  -3.1961944225  0.1453636624   -21.98757 &lt; 0.000000000000000222\nDESTIN_hex889  -2.1524912117  0.0699241988   -30.78321 &lt; 0.000000000000000222\nDESTIN_hex905  -1.6489949086  0.0539559269   -30.56189 &lt; 0.000000000000000222\nDESTIN_hex906  -2.4411892308  0.0543028809   -44.95506 &lt; 0.000000000000000222\nDESTIN_hex907  -1.0138758399  0.0514338214   -19.71224 &lt; 0.000000000000000222\nDESTIN_hex908  -1.1847038541  0.0512796300   -23.10282 &lt; 0.000000000000000222\nDESTIN_hex910  -1.8892988615  0.0527081690   -35.84452 &lt; 0.000000000000000222\nDESTIN_hex932  -1.0395733299  0.0518190824   -20.06159 &lt; 0.000000000000000222\nDESTIN_hex933  -2.1166649895  0.0522992450   -40.47219 &lt; 0.000000000000000222\nDESTIN_hex934  -1.4200884832  0.0513428315   -27.65894 &lt; 0.000000000000000222\nDESTIN_hex935  -1.1545765108  0.0512697507   -22.51964 &lt; 0.000000000000000222\nDESTIN_hex937  -1.1809039130  0.0520294301   -22.69685 &lt; 0.000000000000000222\nDESTIN_hex959   0.2682383296  0.0513504476     5.22368 0.00000017540136566945\nDESTIN_hex960  -1.0002706947  0.0514144537   -19.45505 &lt; 0.000000000000000222\nDESTIN_hex961  -1.4081757661  0.0514439877   -27.37299 &lt; 0.000000000000000222\nDESTIN_hex962   0.6648009079  0.0510957637    13.01088 &lt; 0.000000000000000222\nDESTIN_hex986  -2.3890843490  0.0542953391   -44.00165 &lt; 0.000000000000000222\nDESTIN_hex987  -0.5898923979  0.0512604593   -11.50775 &lt; 0.000000000000000222\nDESTIN_hex988  -2.5889055094  0.0522870543   -49.51332 &lt; 0.000000000000000222\nDESTIN_hex989  -0.9653624108  0.0512372778   -18.84102 &lt; 0.000000000000000222\nDESTIN_hex991  -2.0557577740  0.0521865561   -39.39248 &lt; 0.000000000000000222\nDESTIN_hex1013 -1.6870036357  0.0547623583   -30.80590 &lt; 0.000000000000000222\nDESTIN_hex1014 -2.8041324883  0.0531846986   -52.72442 &lt; 0.000000000000000222\nDESTIN_hex1015 -3.5660055952  0.0552637603   -64.52702 &lt; 0.000000000000000222\nDESTIN_hex1016 -1.7107580237  0.0513616711   -33.30807 &lt; 0.000000000000000222\nDESTIN_hex1042 -0.7176176660  0.0513113403   -13.98556 &lt; 0.000000000000000222\nDESTIN_hex1043 -1.1933125526  0.0513045747   -23.25938 &lt; 0.000000000000000222\nDESTIN_hex1045 -4.3303020339  0.0572932520   -75.58136 &lt; 0.000000000000000222\nDESTIN_hex1067 -0.0199382312  0.0514046964    -0.38787             0.69811380\nDESTIN_hex1068 -3.4393119378  0.0604302104   -56.91378 &lt; 0.000000000000000222\nDESTIN_hex1069 -3.4723334749  0.0540921866   -64.19288 &lt; 0.000000000000000222\nDESTIN_hex1070 -0.9960539754  0.0512191517   -19.44690 &lt; 0.000000000000000222\nDESTIN_hex1078 -2.6094136650  0.0636512238   -40.99550 &lt; 0.000000000000000222\nDESTIN_hex1093 -0.6832362625  0.0521875443   -13.09194 &lt; 0.000000000000000222\nDESTIN_hex1094 -2.2287734526  0.0529508020   -42.09140 &lt; 0.000000000000000222\nDESTIN_hex1095 -3.8546775328  0.0560660132   -68.75248 &lt; 0.000000000000000222\nDESTIN_hex1096 -1.5070783899  0.0513352407   -29.35758 &lt; 0.000000000000000222\nDESTIN_hex1097 -1.5298152423  0.0514223831   -29.74999 &lt; 0.000000000000000222\nDESTIN_hex1099 -1.5790855666  0.0514321147   -30.70233 &lt; 0.000000000000000222\nDESTIN_hex1100 -4.9082144651  0.0688229720   -71.31651 &lt; 0.000000000000000222\nDESTIN_hex1122 -1.2896065941  0.0516152596   -24.98499 &lt; 0.000000000000000222\nDESTIN_hex1123  0.3076898063  0.0511079091     6.02040 0.00000000173991819250\nDESTIN_hex1124 -1.1330586473  0.0512530837   -22.10713 &lt; 0.000000000000000222\nDESTIN_hex1125 -1.8196965969  0.0515389089   -35.30724 &lt; 0.000000000000000222\nDESTIN_hex1126 -6.0360209881  0.0788766165   -76.52485 &lt; 0.000000000000000222\nDESTIN_hex1127 -2.2598098852  0.0514669723   -43.90796 &lt; 0.000000000000000222\nDESTIN_hex1128 -1.6642189105  0.0516209715   -32.23920 &lt; 0.000000000000000222\nDESTIN_hex1132 -1.6501865531  0.0548588434   -30.08059 &lt; 0.000000000000000222\nDESTIN_hex1147 -3.0838760270  0.0607174358   -50.79062 &lt; 0.000000000000000222\nDESTIN_hex1148 -1.4370329993  0.0516676118   -27.81303 &lt; 0.000000000000000222\nDESTIN_hex1149 -2.0048816326  0.0517692290   -38.72728 &lt; 0.000000000000000222\nDESTIN_hex1150 -1.0499064530  0.0512679022   -20.47883 &lt; 0.000000000000000222\nDESTIN_hex1151 -1.6820957929  0.0513422508   -32.76241 &lt; 0.000000000000000222\nDESTIN_hex1152 -1.8885372655  0.0515337012   -36.64665 &lt; 0.000000000000000222\nDESTIN_hex1153 -2.1765045871  0.0515706283   -42.20434 &lt; 0.000000000000000222\nDESTIN_hex1154 -0.0585415256  0.0511313528    -1.14492             0.25224054\nDESTIN_hex1155 -4.6113842744  0.0624589807   -73.83060 &lt; 0.000000000000000222\nDESTIN_hex1158 -2.5748809634  0.0590826406   -43.58101 &lt; 0.000000000000000222\nDESTIN_hex1174 -0.7530438576  0.0523093792   -14.39596 &lt; 0.000000000000000222\nDESTIN_hex1175  0.2017092706  0.0516322650     3.90665 0.00009358393728017387\nDESTIN_hex1176 -0.7999833987  0.0512885435   -15.59770 &lt; 0.000000000000000222\nDESTIN_hex1177 -1.0953494931  0.0512923429   -21.35503 &lt; 0.000000000000000222\nDESTIN_hex1178 -1.6076095130  0.0513590771   -31.30137 &lt; 0.000000000000000222\nDESTIN_hex1179 -2.6301324407  0.0518127065   -50.76231 &lt; 0.000000000000000222\nDESTIN_hex1180 -4.0143968072  0.0540588311   -74.25978 &lt; 0.000000000000000222\nDESTIN_hex1181 -1.4470944513  0.0512397192   -28.24165 &lt; 0.000000000000000222\nDESTIN_hex1182 -1.8535406095  0.0515425510   -35.96137 &lt; 0.000000000000000222\nDESTIN_hex1183 -1.7208254564  0.0520433067   -33.06526 &lt; 0.000000000000000222\nDESTIN_hex1185 -1.6905915554  0.0534344208   -31.63862 &lt; 0.000000000000000222\nDESTIN_hex1201 -1.5254975796  0.0528403802   -28.86992 &lt; 0.000000000000000222\nDESTIN_hex1202 -1.2980730271  0.0516068970   -25.15309 &lt; 0.000000000000000222\nDESTIN_hex1203 -0.2620651550  0.0512483803    -5.11363 0.00000031602934887746\nDESTIN_hex1205 -0.0924348085  0.0511228847    -1.80809             0.07059240\nDESTIN_hex1206 -1.2910434328  0.0513084931   -25.16237 &lt; 0.000000000000000222\nDESTIN_hex1207 -1.6551239086  0.0512792017   -32.27671 &lt; 0.000000000000000222\nDESTIN_hex1209 -0.3242441997  0.0512656381    -6.32479 0.00000000025358346849\nDESTIN_hex1210 -1.7895261472  0.0530458002   -33.73549 &lt; 0.000000000000000222\nDESTIN_hex1211 -2.0400921651  0.0537512511   -37.95432 &lt; 0.000000000000000222\nDESTIN_hex1212 -1.8901850507  0.0538795764   -35.08166 &lt; 0.000000000000000222\nDESTIN_hex1228 -1.3620026820  0.0528278983   -25.78188 &lt; 0.000000000000000222\nDESTIN_hex1229 -0.9708423593  0.0514758777   -18.86014 &lt; 0.000000000000000222\nDESTIN_hex1230 -1.8659676434  0.0519199857   -35.93929 &lt; 0.000000000000000222\nDESTIN_hex1231  0.3438467113  0.0513081670     6.70160 0.00000000002061524765\nDESTIN_hex1232 -0.8919605608  0.0512324661   -17.41006 &lt; 0.000000000000000222\nDESTIN_hex1233 -0.0623098576  0.0511911156    -1.21720             0.22352789\nDESTIN_hex1235 -0.8930749012  0.0512476856   -17.42664 &lt; 0.000000000000000222\nDESTIN_hex1236 -3.2014755706  0.0525845624   -60.88242 &lt; 0.000000000000000222\nDESTIN_hex1237 -0.5185489681  0.0513826268   -10.09191 &lt; 0.000000000000000222\nDESTIN_hex1238 -3.3977783097  0.0566431630   -59.98567 &lt; 0.000000000000000222\nDESTIN_hex1239 -1.9963732070  0.0533228924   -37.43933 &lt; 0.000000000000000222\nDESTIN_hex1240 -3.0241728619  0.0811465161   -37.26806 &lt; 0.000000000000000222\nDESTIN_hex1255 -0.3930925675  0.0520456437    -7.55284 0.00000000000004258587\nDESTIN_hex1256 -2.0841059823  0.0519459533   -40.12066 &lt; 0.000000000000000222\nDESTIN_hex1257 -1.5278624315  0.0515887281   -29.61621 &lt; 0.000000000000000222\nDESTIN_hex1258 -0.3000453118  0.0512341203    -5.85636 0.00000000473129896108\nDESTIN_hex1259 -1.7595506461  0.0514920281   -34.17132 &lt; 0.000000000000000222\nDESTIN_hex1261 -1.8982354073  0.0513783780   -36.94619 &lt; 0.000000000000000222\nDESTIN_hex1262 -1.7237070555  0.0514180978   -33.52335 &lt; 0.000000000000000222\nDESTIN_hex1263 -2.8744395285  0.0538768966   -53.35199 &lt; 0.000000000000000222\nDESTIN_hex1264 -1.1327902722  0.0516242145   -21.94300 &lt; 0.000000000000000222\nDESTIN_hex1265 -3.9899321519  0.0571821400   -69.77585 &lt; 0.000000000000000222\nDESTIN_hex1266 -1.5351674978  0.0527438654   -29.10609 &lt; 0.000000000000000222\nDESTIN_hex1282 -1.8269983144  0.0525670229   -34.75560 &lt; 0.000000000000000222\nDESTIN_hex1283 -1.1505764787  0.0513607220   -22.40188 &lt; 0.000000000000000222\nDESTIN_hex1284 -1.8263692067  0.0517303543   -35.30556 &lt; 0.000000000000000222\nDESTIN_hex1285 -0.8340183955  0.0513774687   -16.23315 &lt; 0.000000000000000222\nDESTIN_hex1286 -2.3682780954  0.0520326506   -45.51523 &lt; 0.000000000000000222\nDESTIN_hex1287 -1.7139813739  0.0517737870   -33.10520 &lt; 0.000000000000000222\nDESTIN_hex1288 -2.1353361454  0.0517448247   -41.26666 &lt; 0.000000000000000222\nDESTIN_hex1289 -1.0584432280  0.0511920891   -20.67591 &lt; 0.000000000000000222\nDESTIN_hex1293 -3.6779610367  0.0555620320   -66.19558 &lt; 0.000000000000000222\nDESTIN_hex1308 -2.1184620198  0.0531103750   -39.88791 &lt; 0.000000000000000222\nDESTIN_hex1309 -0.1929357271  0.0512609246    -3.76380             0.00016735\nDESTIN_hex1310  0.8840770303  0.0510995616    17.30107 &lt; 0.000000000000000222\nDESTIN_hex1311 -0.6089351647  0.0515931808   -11.80263 &lt; 0.000000000000000222\nDESTIN_hex1312 -3.2113593507  0.0549185501   -58.47495 &lt; 0.000000000000000222\nDESTIN_hex1314 -0.7660768665  0.0513144154   -14.92908 &lt; 0.000000000000000222\nDESTIN_hex1315 -0.0629105785  0.0511234948    -1.23056             0.21848710\nDESTIN_hex1316 -2.7748895312  0.0521523463   -53.20738 &lt; 0.000000000000000222\nDESTIN_hex1318 -1.5000103983  0.0545160406   -27.51503 &lt; 0.000000000000000222\nDESTIN_hex1319  0.6549550687  0.0511829680    12.79635 &lt; 0.000000000000000222\nDESTIN_hex1320 -3.2200200776  0.0538566440   -59.78873 &lt; 0.000000000000000222\nDESTIN_hex1335 -3.7300007135  0.1021469377   -36.51603 &lt; 0.000000000000000222\nDESTIN_hex1336 -0.3098802100  0.0513040907    -6.04007 0.00000000154049045770\nDESTIN_hex1337 -1.0139257296  0.0512819639   -19.77159 &lt; 0.000000000000000222\nDESTIN_hex1338 -2.2472035508  0.0522649441   -42.99638 &lt; 0.000000000000000222\nDESTIN_hex1339 -2.2414506403  0.0538252908   -41.64308 &lt; 0.000000000000000222\nDESTIN_hex1340 -2.5751544699  0.0525514250   -49.00256 &lt; 0.000000000000000222\nDESTIN_hex1341 -2.0799773756  0.0519439646   -40.04272 &lt; 0.000000000000000222\nDESTIN_hex1342 -1.8298581602  0.0515836488   -35.47361 &lt; 0.000000000000000222\nDESTIN_hex1343 -2.4581120987  0.0516692839   -47.57395 &lt; 0.000000000000000222\nDESTIN_hex1347 -2.4586904304  0.0524347073   -46.89052 &lt; 0.000000000000000222\nDESTIN_hex1348 -1.1677441280  0.0513485527   -22.74152 &lt; 0.000000000000000222\nDESTIN_hex1362 -0.5423263150  0.0513957373   -10.55197 &lt; 0.000000000000000222\nDESTIN_hex1363 -0.5142553888  0.0513087085   -10.02277 &lt; 0.000000000000000222\nDESTIN_hex1364 -1.6341115094  0.0515647427   -31.69048 &lt; 0.000000000000000222\nDESTIN_hex1366 -1.0752406761  0.0514239430   -20.90934 &lt; 0.000000000000000222\nDESTIN_hex1367 -3.6184902128  0.0556467317   -65.02610 &lt; 0.000000000000000222\nDESTIN_hex1368 -0.9760494440  0.0514943465   -18.95450 &lt; 0.000000000000000222\nDESTIN_hex1369 -1.1325766048  0.0513228961   -22.06767 &lt; 0.000000000000000222\nDESTIN_hex1370 -1.4227321545  0.0516113125   -27.56629 &lt; 0.000000000000000222\nDESTIN_hex1372 -1.9054094349  0.0591796693   -32.19703 &lt; 0.000000000000000222\nDESTIN_hex1374 -1.7589992960  0.0514412797   -34.19431 &lt; 0.000000000000000222\nDESTIN_hex1375 -0.5761203312  0.0512999639   -11.23042 &lt; 0.000000000000000222\nDESTIN_hex1389 -0.3599109802  0.0514405408    -6.99664 0.00000000000262172510\nDESTIN_hex1390 -0.3351915854  0.0516026635    -6.49563 0.00000000008268902957\nDESTIN_hex1391 -1.0913782363  0.0514616354   -21.20761 &lt; 0.000000000000000222\nDESTIN_hex1392 -2.2927032432  0.0524657924   -43.69901 &lt; 0.000000000000000222\nDESTIN_hex1394 -2.0632367428  0.0521894428   -39.53360 &lt; 0.000000000000000222\nDESTIN_hex1396 -2.7414378448  0.0531295090   -51.59916 &lt; 0.000000000000000222\nDESTIN_hex1397 -2.2544944515  0.0518016194   -43.52170 &lt; 0.000000000000000222\nDESTIN_hex1401 -0.0251676429  0.0511737363    -0.49181             0.62285522\nDESTIN_hex1402 -1.5837350591  0.0513678357   -30.83126 &lt; 0.000000000000000222\nDESTIN_hex1416 -1.4110085300  0.0571655849   -24.68283 &lt; 0.000000000000000222\nDESTIN_hex1417 -1.6558393259  0.0523737416   -31.61583 &lt; 0.000000000000000222\nDESTIN_hex1418 -1.6213530680  0.0540719735   -29.98509 &lt; 0.000000000000000222\nDESTIN_hex1419  0.6111181618  0.0511500804    11.94755 &lt; 0.000000000000000222\nDESTIN_hex1420  0.3053443865  0.0511542502     5.96909 0.00000000238578675632\nDESTIN_hex1422 -2.3778712687  0.0532965324   -44.61587 &lt; 0.000000000000000222\nDESTIN_hex1423 -1.9285840202  0.0516498057   -37.33962 &lt; 0.000000000000000222\nDESTIN_hex1426 -0.5226940455  0.0518963987   -10.07188 &lt; 0.000000000000000222\nDESTIN_hex1428 -1.8501280532  0.0514891082   -35.93242 &lt; 0.000000000000000222\nDESTIN_hex1429 -1.5949584026  0.0514686777   -30.98891 &lt; 0.000000000000000222\nDESTIN_hex1443  0.1634374655  0.0512644417     3.18813             0.00143198\nDESTIN_hex1444 -0.2654283293  0.0514178872    -5.16218 0.00000024409191997064\nDESTIN_hex1445 -0.1816582495  0.0512746029    -3.54285             0.00039583\nDESTIN_hex1446 -2.4631800842  0.0534103228   -46.11805 &lt; 0.000000000000000222\nDESTIN_hex1447 -0.7759555023  0.0513377534   -15.11471 &lt; 0.000000000000000222\nDESTIN_hex1455 -1.8744161610  0.0518407498   -36.15720 &lt; 0.000000000000000222\nDESTIN_hex1456 -1.7904634110  0.0514835679   -34.77738 &lt; 0.000000000000000222\nDESTIN_hex1457 -5.4462021427  0.0846094656   -64.36871 &lt; 0.000000000000000222\nDESTIN_hex1469  0.1355638768  0.0513354578     2.64075             0.00827238\nDESTIN_hex1470  0.3615371731  0.0512363441     7.05626 0.00000000000171038668\nDESTIN_hex1471 -0.3326135754  0.0512914219    -6.48478 0.00000000008886148167\nDESTIN_hex1472 -1.3755529307  0.0518563852   -26.52620 &lt; 0.000000000000000222\nDESTIN_hex1480 -3.4346852999  0.0666237597   -51.55346 &lt; 0.000000000000000222\nDESTIN_hex1482 -0.6266953627  0.0512243790   -12.23432 &lt; 0.000000000000000222\nDESTIN_hex1483 -1.1884296816  0.0514743894   -23.08779 &lt; 0.000000000000000222\nDESTIN_hex1496 -2.1816778979  0.0537831862   -40.56431 &lt; 0.000000000000000222\nDESTIN_hex1497  0.2935437795  0.0515950844     5.68937 0.00000001275052407181\nDESTIN_hex1498 -0.7130682755  0.0514314657   -13.86444 &lt; 0.000000000000000222\nDESTIN_hex1499 -1.1285565915  0.0515726305   -21.88286 &lt; 0.000000000000000222\nDESTIN_hex1500 -3.3335335875  0.0594135607   -56.10729 &lt; 0.000000000000000222\nDESTIN_hex1501 -1.5528953784  0.0518184580   -29.96800 &lt; 0.000000000000000222\nDESTIN_hex1507  0.5801729646  0.0518258873    11.19466 &lt; 0.000000000000000222\nDESTIN_hex1509 -2.1251955264  0.0521023644   -40.78885 &lt; 0.000000000000000222\nDESTIN_hex1510  0.9069246920  0.0511175608    17.74194 &lt; 0.000000000000000222\nDESTIN_hex1511 -3.0495641484  0.0551154127   -55.33051 &lt; 0.000000000000000222\nDESTIN_hex1523 -2.5529433857  0.0620252679   -41.15973 &lt; 0.000000000000000222\nDESTIN_hex1524  0.0668707878  0.0524417591     1.27514             0.20225832\nDESTIN_hex1525 -0.0575257188  0.0512086280    -1.12336             0.26128468\nDESTIN_hex1526 -2.3329815447  0.0533041603   -43.76734 &lt; 0.000000000000000222\nDESTIN_hex1527 -3.1525336302  0.0664357037   -47.45240 &lt; 0.000000000000000222\nDESTIN_hex1534 -4.8278490324  0.1056457248   -45.69848 &lt; 0.000000000000000222\nDESTIN_hex1536 -1.0137799851  0.0512758856   -19.77109 &lt; 0.000000000000000222\nDESTIN_hex1537 -1.7726576148  0.0516770223   -34.30263 &lt; 0.000000000000000222\nDESTIN_hex1550  0.0471303467  0.0513547411     0.91774             0.35875453\nDESTIN_hex1551 -0.8430457158  0.0517544851   -16.28933 &lt; 0.000000000000000222\nDESTIN_hex1552 -2.6328534367  0.0551554956   -47.73511 &lt; 0.000000000000000222\nDESTIN_hex1553 -0.9924487349  0.0514228404   -19.29976 &lt; 0.000000000000000222\nDESTIN_hex1554 -2.3853805520  0.0542691747   -43.95461 &lt; 0.000000000000000222\nDESTIN_hex1555 -1.8000565888  0.0521227594   -34.53494 &lt; 0.000000000000000222\nDESTIN_hex1562 -2.3316301781  0.0621584109   -37.51110 &lt; 0.000000000000000222\nDESTIN_hex1563 -1.1516504475  0.0514531067   -22.38252 &lt; 0.000000000000000222\nDESTIN_hex1564 -1.4366226436  0.0513456522   -27.97944 &lt; 0.000000000000000222\nDESTIN_hex1565  0.0892124364  0.0513289543     1.73805             0.08220150\nDESTIN_hex1576 -0.2688042385  0.0517739581    -5.19188 0.00000020817985617642\nDESTIN_hex1578 -2.2867026416  0.0525645258   -43.50277 &lt; 0.000000000000000222\nDESTIN_hex1579  0.0437530060  0.0512176226     0.85426             0.39296268\nDESTIN_hex1581 -1.3744837581  0.0517763187   -26.54657 &lt; 0.000000000000000222\nDESTIN_hex1588 -2.7825523913  0.0707937870   -39.30504 &lt; 0.000000000000000222\nDESTIN_hex1590 -1.4205227296  0.0514237912   -27.62384 &lt; 0.000000000000000222\nDESTIN_hex1591 -1.1191141232  0.0513662827   -21.78694 &lt; 0.000000000000000222\nDESTIN_hex1592 -0.9670361995  0.0518278577   -18.65862 &lt; 0.000000000000000222\nDESTIN_hex1604  0.6098983716  0.0511652552    11.92017 &lt; 0.000000000000000222\nDESTIN_hex1605 -0.3983815538  0.0512930110    -7.76678 0.00000000000000805062\nDESTIN_hex1606 -0.7182784491  0.0513333465   -13.99243 &lt; 0.000000000000000222\nDESTIN_hex1607 -1.7607294691  0.0518492950   -33.95860 &lt; 0.000000000000000222\nDESTIN_hex1616 -2.7165766672  0.0604785310   -44.91803 &lt; 0.000000000000000222\nDESTIN_hex1617 -2.0888852023  0.0524133732   -39.85405 &lt; 0.000000000000000222\nDESTIN_hex1618  0.5226463757  0.0511485333    10.21821 &lt; 0.000000000000000222\nDESTIN_hex1619 -1.0968745098  0.0514622404   -21.31416 &lt; 0.000000000000000222\nDESTIN_hex1620 -0.5183072062  0.0516970878   -10.02585 &lt; 0.000000000000000222\nDESTIN_hex1630 -2.6346798587  0.0538612394   -48.91606 &lt; 0.000000000000000222\nDESTIN_hex1631 -0.9236373863  0.0514640264   -17.94724 &lt; 0.000000000000000222\nDESTIN_hex1632 -0.7419692852  0.0514597362   -14.41844 &lt; 0.000000000000000222\nDESTIN_hex1633 -2.6272120089  0.0533931577   -49.20503 &lt; 0.000000000000000222\nDESTIN_hex1634 -0.7252888226  0.0515059025   -14.08166 &lt; 0.000000000000000222\nDESTIN_hex1635  0.0900645079  0.0512356755     1.75785             0.07877345\nDESTIN_hex1642 -2.2061920695  0.0648090343   -34.04143 &lt; 0.000000000000000222\nDESTIN_hex1644 -1.1627756486  0.0514404729   -22.60430 &lt; 0.000000000000000222\nDESTIN_hex1645 -1.0335756285  0.0513484850   -20.12865 &lt; 0.000000000000000222\nDESTIN_hex1646 -0.4688849835  0.0514215030    -9.11846 &lt; 0.000000000000000222\nDESTIN_hex1647 -1.9386807031  0.0584266397   -33.18145 &lt; 0.000000000000000222\nDESTIN_hex1658 -1.0026061192  0.0519517916   -19.29878 &lt; 0.000000000000000222\nDESTIN_hex1659 -0.0864660914  0.0512228534    -1.68804             0.09140405\nDESTIN_hex1660 -1.1162909843  0.0523205051   -21.33563 &lt; 0.000000000000000222\nDESTIN_hex1661 -2.8439048861  0.0546461707   -52.04216 &lt; 0.000000000000000222\nDESTIN_hex1662 -1.0793508777  0.0515967535   -20.91897 &lt; 0.000000000000000222\nDESTIN_hex1669 -4.7940374992  0.1309365309   -36.61345 &lt; 0.000000000000000222\nDESTIN_hex1670 -1.8581239081  0.0559593571   -33.20488 &lt; 0.000000000000000222\nDESTIN_hex1672 -1.4695158801  0.0519508069   -28.28668 &lt; 0.000000000000000222\nDESTIN_hex1673 -0.1818202818  0.0513702684    -3.53941             0.00040103\nDESTIN_hex1674 -0.5322439833  0.0515396624   -10.32688 &lt; 0.000000000000000222\nDESTIN_hex1684 -0.5236277150  0.0513851887   -10.19025 &lt; 0.000000000000000222\nDESTIN_hex1685 -0.6242495086  0.0515602696   -12.10718 &lt; 0.000000000000000222\nDESTIN_hex1686 -0.6228657141  0.0513654493   -12.12616 &lt; 0.000000000000000222\nDESTIN_hex1687 -1.2889599835  0.0518434058   -24.86256 &lt; 0.000000000000000222\nDESTIN_hex1688 -1.5859846122  0.0520067434   -30.49575 &lt; 0.000000000000000222\nDESTIN_hex1689 -2.5694876955  0.0558718789   -45.98893 &lt; 0.000000000000000222\nDESTIN_hex1695 -4.2549687614  0.0816325908   -52.12341 &lt; 0.000000000000000222\nDESTIN_hex1699 -1.1288953337  0.0513934055   -21.96576 &lt; 0.000000000000000222\nDESTIN_hex1700 -2.1502704042  0.0527872936   -40.73462 &lt; 0.000000000000000222\nDESTIN_hex1701  0.1772486597  0.0518161142     3.42072             0.00062455\nDESTIN_hex1712 -2.0468853928  0.0524407760   -39.03232 &lt; 0.000000000000000222\nDESTIN_hex1713  0.2295997505  0.0511732912     4.48671 0.00000723311997325553\nDESTIN_hex1714 -1.3579778941  0.0522251188   -26.00239 &lt; 0.000000000000000222\nDESTIN_hex1716 -0.6806229075  0.0513952469   -13.24292 &lt; 0.000000000000000222\nDESTIN_hex1723 -4.2692382576  0.0823506572   -51.84219 &lt; 0.000000000000000222\nDESTIN_hex1726 -2.0715120899  0.0528188764   -39.21916 &lt; 0.000000000000000222\nDESTIN_hex1727 -1.0929611239  0.0514936101   -21.22518 &lt; 0.000000000000000222\nDESTIN_hex1728 -0.3020370559  0.0513335196    -5.88382 0.00000000400910141359\nDESTIN_hex1738 -0.9532127655  0.0514131391   -18.54026 &lt; 0.000000000000000222\nDESTIN_hex1739  0.4443011075  0.0511423639     8.68754 &lt; 0.000000000000000222\nDESTIN_hex1740 -1.1429786807  0.0516454110   -22.13127 &lt; 0.000000000000000222\nDESTIN_hex1741 -0.6919783343  0.0515455014   -13.42461 &lt; 0.000000000000000222\nDESTIN_hex1743 -2.1652610745  0.0575847877   -37.60127 &lt; 0.000000000000000222\nDESTIN_hex1744 -3.6383279473  0.1006614899   -36.14419 &lt; 0.000000000000000222\nDESTIN_hex1748 -5.4363341974  0.1141463767   -47.62599 &lt; 0.000000000000000222\nDESTIN_hex1749 -0.8449468808  0.0517224509   -16.33617 &lt; 0.000000000000000222\nDESTIN_hex1753  0.1167556903  0.0511779733     2.28137             0.02252680\nDESTIN_hex1754 -1.5600018177  0.0516484989   -30.20420 &lt; 0.000000000000000222\nDESTIN_hex1765  0.5932078329  0.0511948437    11.58726 &lt; 0.000000000000000222\nDESTIN_hex1766 -0.3494274407  0.0513270446    -6.80786 0.00000000000990597632\nDESTIN_hex1767 -0.5339601149  0.0512976319   -10.40906 &lt; 0.000000000000000222\nDESTIN_hex1768 -2.6529375785  0.0555149924   -47.78777 &lt; 0.000000000000000222\nDESTIN_hex1770 -1.9402617346  0.0526209676   -36.87241 &lt; 0.000000000000000222\nDESTIN_hex1771 -3.3134552972  0.0610403363   -54.28304 &lt; 0.000000000000000222\nDESTIN_hex1776 -5.8750888526  0.1110134407   -52.92232 &lt; 0.000000000000000222\nDESTIN_hex1777 -0.9894820218  0.0515617660   -19.19023 &lt; 0.000000000000000222\nDESTIN_hex1778 -2.7789796679  0.0532910743   -52.14719 &lt; 0.000000000000000222\nDESTIN_hex1780 -2.0693778035  0.0533379852   -38.79745 &lt; 0.000000000000000222\nDESTIN_hex1781 -0.9109019877  0.0513769710   -17.72977 &lt; 0.000000000000000222\nDESTIN_hex1791 -0.7426697513  0.0535830697   -13.86016 &lt; 0.000000000000000222\nDESTIN_hex1792 -1.2875401595  0.0516764736   -24.91540 &lt; 0.000000000000000222\nDESTIN_hex1793 -0.1065978334  0.0512109072    -2.08155             0.03738400\nDESTIN_hex1794 -0.7083649600  0.0513765733   -13.78770 &lt; 0.000000000000000222\nDESTIN_hex1795 -0.7172523337  0.0514500850   -13.94074 &lt; 0.000000000000000222\nDESTIN_hex1796 -0.2914224940  0.0514041181    -5.66924 0.00000001434288844408\nDESTIN_hex1798 -5.5988935360  0.1490551477   -37.56256 &lt; 0.000000000000000222\nDESTIN_hex1800 -1.7206703931  0.0551413601   -31.20471 &lt; 0.000000000000000222\nDESTIN_hex1802 -2.9546083039  0.0556261271   -53.11548 &lt; 0.000000000000000222\nDESTIN_hex1804 -4.5252407590  0.0635760434   -71.17840 &lt; 0.000000000000000222\nDESTIN_hex1805 -2.7449372580  0.0525229373   -52.26169 &lt; 0.000000000000000222\nDESTIN_hex1806 -1.8947003733  0.0516906604   -36.65460 &lt; 0.000000000000000222\nDESTIN_hex1807 -2.5808461966  0.0519749142   -49.65561 &lt; 0.000000000000000222\nDESTIN_hex1808 -2.1808116869  0.0536056156   -40.68252 &lt; 0.000000000000000222\nDESTIN_hex1820 -0.8053203057  0.0514077478   -15.66535 &lt; 0.000000000000000222\nDESTIN_hex1821  0.3740317551  0.0511735087     7.30909 0.00000000000026895858\nDESTIN_hex1822 -1.5637248059  0.0519958292   -30.07404 &lt; 0.000000000000000222\nDESTIN_hex1823 -0.9093047756  0.0517770166   -17.56194 &lt; 0.000000000000000222\nDESTIN_hex1824 -0.1414382420  0.0512691855    -2.75874             0.00580251\nDESTIN_hex1827 -1.6833079844  0.0520747055   -32.32487 &lt; 0.000000000000000222\nDESTIN_hex1828 -1.3577607014  0.0518509526   -26.18584 &lt; 0.000000000000000222\nDESTIN_hex1829 -0.3318264888  0.0513660550    -6.46003 0.00000000010467909806\nDESTIN_hex1831 -2.7760635102  0.0541694835   -51.24774 &lt; 0.000000000000000222\nDESTIN_hex1833 -0.5143856969  0.0512053626   -10.04554 &lt; 0.000000000000000222\nDESTIN_hex1834 -0.6331369128  0.0512472507   -12.35455 &lt; 0.000000000000000222\nDESTIN_hex1835 -2.5298974919  0.0523247509   -48.34992 &lt; 0.000000000000000222\nDESTIN_hex1846 -3.0332241573  0.0576480675   -52.61623 &lt; 0.000000000000000222\nDESTIN_hex1847 -2.3753556168  0.0541138723   -43.89550 &lt; 0.000000000000000222\nDESTIN_hex1848 -1.0064097809  0.0514624604   -19.55619 &lt; 0.000000000000000222\nDESTIN_hex1849  0.8172983503  0.0511267884    15.98572 &lt; 0.000000000000000222\nDESTIN_hex1850 -0.7061009426  0.0517544737   -13.64328 &lt; 0.000000000000000222\nDESTIN_hex1852 -3.5952721306  0.0607433801   -59.18788 &lt; 0.000000000000000222\nDESTIN_hex1853 -0.5602011826  0.0513852143   -10.90199 &lt; 0.000000000000000222\nDESTIN_hex1854 -1.2555203206  0.0515797595   -24.34134 &lt; 0.000000000000000222\nDESTIN_hex1855 -2.9679327523  0.0536718468   -55.29776 &lt; 0.000000000000000222\nDESTIN_hex1856 -5.6518446023  0.1592178163   -35.49756 &lt; 0.000000000000000222\nDESTIN_hex1857 -3.9798710811  0.0679628775   -58.55948 &lt; 0.000000000000000222\nDESTIN_hex1858 -2.7033820978  0.0523152873   -51.67480 &lt; 0.000000000000000222\nDESTIN_hex1859 -2.0720556847  0.0515772576   -40.17382 &lt; 0.000000000000000222\nDESTIN_hex1860 -1.6098893127  0.0514010814   -31.32014 &lt; 0.000000000000000222\nDESTIN_hex1861 -1.9305038676  0.0520601265   -37.08220 &lt; 0.000000000000000222\nDESTIN_hex1862 -2.5377226606  0.0550616654   -46.08874 &lt; 0.000000000000000222\nDESTIN_hex1874 -0.4751346137  0.0513128537    -9.25956 &lt; 0.000000000000000222\nDESTIN_hex1875 -0.2858086522  0.0512595135    -5.57572 0.00000002465093199733\nDESTIN_hex1876 -1.3695095237  0.0520771574   -26.29770 &lt; 0.000000000000000222\nDESTIN_hex1877 -0.8870331122  0.0515371577   -17.21153 &lt; 0.000000000000000222\nDESTIN_hex1878 -0.8488454189  0.0515091640   -16.47950 &lt; 0.000000000000000222\nDESTIN_hex1879 -1.8526394631  0.0521661905   -35.51418 &lt; 0.000000000000000222\nDESTIN_hex1882 -0.6055453987  0.0513085744   -11.80203 &lt; 0.000000000000000222\nDESTIN_hex1883 -1.6685549145  0.0517699145   -32.23020 &lt; 0.000000000000000222\nDESTIN_hex1884 -2.4605308804  0.0544069765   -45.22455 &lt; 0.000000000000000222\nDESTIN_hex1886  0.6132164540  0.0511317438    11.99287 &lt; 0.000000000000000222\nDESTIN_hex1887  0.6160122659  0.0511297136    12.04803 &lt; 0.000000000000000222\nDESTIN_hex1888 -2.2867399363  0.0517742728   -44.16750 &lt; 0.000000000000000222\nDESTIN_hex1889 -5.6634305188  0.1023273418   -55.34621 &lt; 0.000000000000000222\nDESTIN_hex1890 -2.5598538334  0.0627532241   -40.79239 &lt; 0.000000000000000222\nDESTIN_hex1900 -1.0253616016  0.0519784136   -19.72668 &lt; 0.000000000000000222\nDESTIN_hex1901 -0.0871452607  0.0512240876    -1.70126             0.08889502\nDESTIN_hex1902 -0.7934567258  0.0515728035   -15.38518 &lt; 0.000000000000000222\nDESTIN_hex1903 -0.7456206583  0.0515875396   -14.45350 &lt; 0.000000000000000222\nDESTIN_hex1904 -0.8113367423  0.0516801229   -15.69920 &lt; 0.000000000000000222\nDESTIN_hex1905 -1.2876307324  0.0515417707   -24.98228 &lt; 0.000000000000000222\nDESTIN_hex1906 -1.0584424840  0.0514212163   -20.58377 &lt; 0.000000000000000222\nDESTIN_hex1907 -0.9155293467  0.0513983846   -17.81241 &lt; 0.000000000000000222\nDESTIN_hex1908 -1.4141687688  0.0516690177   -27.36976 &lt; 0.000000000000000222\nDESTIN_hex1909 -1.3388222832  0.0515241942   -25.98434 &lt; 0.000000000000000222\nDESTIN_hex1910 -2.3016559620  0.0525216965   -43.82296 &lt; 0.000000000000000222\nDESTIN_hex1912 -4.8303237586  0.0621347114   -77.73954 &lt; 0.000000000000000222\nDESTIN_hex1913 -1.6664404027  0.0513124020   -32.47637 &lt; 0.000000000000000222\nDESTIN_hex1914 -1.2596123746  0.0512930847   -24.55716 &lt; 0.000000000000000222\nDESTIN_hex1916 -2.2949461449  0.0583328254   -39.34228 &lt; 0.000000000000000222\nDESTIN_hex1928 -0.4304196368  0.0513954234    -8.37467 &lt; 0.000000000000000222\nDESTIN_hex1929 -0.4854593761  0.0513645361    -9.45126 &lt; 0.000000000000000222\nDESTIN_hex1930 -0.4183938101  0.0512722053    -8.16025 0.00000000000000033434\nDESTIN_hex1931 -1.2627235389  0.0516377903   -24.45348 &lt; 0.000000000000000222\nDESTIN_hex1932 -0.4648663536  0.0512881604    -9.06381 &lt; 0.000000000000000222\nDESTIN_hex1933 -0.4263607337  0.0513765128    -8.29875 &lt; 0.000000000000000222\nDESTIN_hex1934 -1.6702409356  0.0516811573   -32.31818 &lt; 0.000000000000000222\nDESTIN_hex1935 -1.1587097782  0.0514298547   -22.52991 &lt; 0.000000000000000222\nDESTIN_hex1936 -1.1448882419  0.0514223890   -22.26439 &lt; 0.000000000000000222\nDESTIN_hex1937 -0.7896067658  0.0512994526   -15.39211 &lt; 0.000000000000000222\nDESTIN_hex1938 -3.0181996735  0.0686226055   -43.98259 &lt; 0.000000000000000222\nDESTIN_hex1940 -1.9244672668  0.0515227922   -37.35177 &lt; 0.000000000000000222\nDESTIN_hex1941 -2.8478816879  0.0518743013   -54.89966 &lt; 0.000000000000000222\nDESTIN_hex1942 -1.6355761327  0.0517378336   -31.61277 &lt; 0.000000000000000222\nDESTIN_hex1954 -1.1627881225  0.0525536507   -22.12573 &lt; 0.000000000000000222\nDESTIN_hex1955  0.1695537867  0.0512055447     3.31124             0.00092884\nDESTIN_hex1956 -0.7372529664  0.0514650220   -14.32532 &lt; 0.000000000000000222\nDESTIN_hex1958 -0.2267483852  0.0512552789    -4.42390 0.00000969335265088397\nDESTIN_hex1959 -0.3241831612  0.0512076437    -6.33076 0.00000000024396092521\nDESTIN_hex1960 -0.1301110902  0.0512923423    -2.53666             0.01119165\nDESTIN_hex1961  0.4397574771  0.0511418948     8.59877 &lt; 0.000000000000000222\nDESTIN_hex1962 -1.2517763748  0.0513644622   -24.37048 &lt; 0.000000000000000222\nDESTIN_hex1963 -1.5590142354  0.0513802066   -30.34270 &lt; 0.000000000000000222\nDESTIN_hex1964 -0.6814068651  0.0512905608   -13.28523 &lt; 0.000000000000000222\nDESTIN_hex1967 -1.5194683277  0.0513796355   -29.57336 &lt; 0.000000000000000222\nDESTIN_hex1968 -1.7481053021  0.0515083191   -33.93831 &lt; 0.000000000000000222\nDESTIN_hex1982  0.6886067836  0.0511498536    13.46254 &lt; 0.000000000000000222\nDESTIN_hex1983  0.0199737766  0.0512204857     0.38996             0.69656849\nDESTIN_hex1984  0.1776552494  0.0511680612     3.47199             0.00051661\nDESTIN_hex1985 -0.4343108710  0.0513035296    -8.46552 &lt; 0.000000000000000222\nDESTIN_hex1986 -1.2616002260  0.0516229633   -24.43874 &lt; 0.000000000000000222\nDESTIN_hex1987  0.5515630678  0.0511210640    10.78935 &lt; 0.000000000000000222\nDESTIN_hex1988 -1.2336476917  0.0513582706   -24.02043 &lt; 0.000000000000000222\nDESTIN_hex1989 -1.4622866561  0.0514250168   -28.43532 &lt; 0.000000000000000222\nDESTIN_hex1990  0.7542199463  0.0511115914    14.75634 &lt; 0.000000000000000222\nDESTIN_hex1991 -0.3702900996  0.0512363111    -7.22710 0.00000000000049340573\nDESTIN_hex1992 -0.1587332009  0.0512897088    -3.09484             0.00196922\nDESTIN_hex1994 -3.9221385467  0.0545932917   -71.84287 &lt; 0.000000000000000222\nDESTIN_hex1995 -2.1800218201  0.0517204090   -42.15013 &lt; 0.000000000000000222\nDESTIN_hex2009  0.7655110832  0.0511406991    14.96873 &lt; 0.000000000000000222\nDESTIN_hex2010  0.1026856078  0.0511775078     2.00646             0.04480722\nDESTIN_hex2011 -0.0302172877  0.0512047316    -0.59013             0.55510560\nDESTIN_hex2012 -1.0253584070  0.0514822062   -19.91675 &lt; 0.000000000000000222\nDESTIN_hex2013 -1.0067194523  0.0512852274   -19.62981 &lt; 0.000000000000000222\nDESTIN_hex2014 -0.8915821967  0.0512566958   -17.39445 &lt; 0.000000000000000222\nDESTIN_hex2015 -0.6334133553  0.0512671717   -12.35515 &lt; 0.000000000000000222\nDESTIN_hex2016 -1.2300823235  0.0513693850   -23.94583 &lt; 0.000000000000000222\nDESTIN_hex2017 -1.0442338490  0.0513006269   -20.35519 &lt; 0.000000000000000222\nDESTIN_hex2021 -3.1965609644  0.0525292356   -60.85299 &lt; 0.000000000000000222\nDESTIN_hex2036 -2.4842213917  0.0586803133   -42.33484 &lt; 0.000000000000000222\nDESTIN_hex2037 -1.2146129755  0.0519150987   -23.39614 &lt; 0.000000000000000222\nDESTIN_hex2038  0.4885949991  0.0511480982     9.55255 &lt; 0.000000000000000222\nDESTIN_hex2039 -1.0539600433  0.0515071983   -20.46238 &lt; 0.000000000000000222\nDESTIN_hex2040 -0.8985307688  0.0513851094   -17.48621 &lt; 0.000000000000000222\nDESTIN_hex2041 -0.6019800936  0.0513877125   -11.71448 &lt; 0.000000000000000222\nDESTIN_hex2042 -0.9179867171  0.0515451758   -17.80936 &lt; 0.000000000000000222\nDESTIN_hex2043 -1.0218466617  0.0513014318   -19.91848 &lt; 0.000000000000000222\nDESTIN_hex2044 -1.1754172027  0.0513297367   -22.89934 &lt; 0.000000000000000222\nDESTIN_hex2046 -1.9298418973  0.0522414115   -36.94085 &lt; 0.000000000000000222\nDESTIN_hex2049 -4.2284190895  0.0562489019   -75.17336 &lt; 0.000000000000000222\nDESTIN_hex2063 -0.7743752632  0.0518994405   -14.92069 &lt; 0.000000000000000222\nDESTIN_hex2064 -0.0888034356  0.0512396863    -1.73310             0.08307812\nDESTIN_hex2065 -0.7570396325  0.0513309046   -14.74822 &lt; 0.000000000000000222\nDESTIN_hex2066 -1.0874455264  0.0513655937   -21.17070 &lt; 0.000000000000000222\nDESTIN_hex2067 -1.2497833399  0.0513356575   -24.34533 &lt; 0.000000000000000222\nDESTIN_hex2068 -1.4640092250  0.0514385599   -28.46132 &lt; 0.000000000000000222\nDESTIN_hex2069 -2.8548178628  0.0528621095   -54.00499 &lt; 0.000000000000000222\nDESTIN_hex2070 -0.6985073046  0.0513594070   -13.60038 &lt; 0.000000000000000222\nDESTIN_hex2071  0.1629928833  0.0511686851     3.18540             0.00144553\nDESTIN_hex2072 -4.0139914306  0.0645860921   -62.14947 &lt; 0.000000000000000222\nDESTIN_hex2074 -3.7359223229  0.0591158785   -63.19660 &lt; 0.000000000000000222\nDESTIN_hex2089 -1.1452788810  0.0808914364   -14.15822 &lt; 0.000000000000000222\nDESTIN_hex2090 -2.6301797464  0.1122048721   -23.44087 &lt; 0.000000000000000222\nDESTIN_hex2091 -1.9547181404  0.0543068302   -35.99396 &lt; 0.000000000000000222\nDESTIN_hex2092 -0.5708900323  0.0513835378   -11.11037 &lt; 0.000000000000000222\nDESTIN_hex2093 -0.1293404711  0.0511964163    -2.52636             0.01152520\nDESTIN_hex2094 -0.6959915340  0.0513223715   -13.56117 &lt; 0.000000000000000222\nDESTIN_hex2095 -0.6343665041  0.0515059267   -12.31638 &lt; 0.000000000000000222\nDESTIN_hex2096 -1.9083541001  0.0518428348   -36.81037 &lt; 0.000000000000000222\nDESTIN_hex2097 -1.7676614597  0.0554480947   -31.87957 &lt; 0.000000000000000222\nDESTIN_hex2098 -1.4451326790  0.0514894834   -28.06656 &lt; 0.000000000000000222\nDESTIN_hex2100 -3.5479053494  0.0660375757   -53.72555 &lt; 0.000000000000000222\nDESTIN_hex2101 -2.5180068260  0.0537263495   -46.86726 &lt; 0.000000000000000222\nDESTIN_hex2102 -1.5448865481  0.0519414047   -29.74287 &lt; 0.000000000000000222\nDESTIN_hex2116 -2.1099967473  0.1113180568   -18.95467 &lt; 0.000000000000000222\nDESTIN_hex2117 -2.5232621834  0.1213377917   -20.79535 &lt; 0.000000000000000222\nDESTIN_hex2119 -0.5135875045  0.0513059455   -10.01029 &lt; 0.000000000000000222\nDESTIN_hex2120 -0.0646642780  0.0511867294    -1.26330             0.20648081\nDESTIN_hex2121 -1.0249572352  0.0513579798   -19.95712 &lt; 0.000000000000000222\nDESTIN_hex2122 -4.3151481616  0.0706537979   -61.07454 &lt; 0.000000000000000222\nDESTIN_hex2123 -1.8190770949  0.0516472951   -35.22115 &lt; 0.000000000000000222\nDESTIN_hex2124 -1.6482312729  0.0516853919   -31.88969 &lt; 0.000000000000000222\nDESTIN_hex2125 -0.4010962409  0.0512404491    -7.82773 0.00000000000000496770\nDESTIN_hex2126 -2.7552915186  0.0528428672   -52.14122 &lt; 0.000000000000000222\nDESTIN_hex2129 -3.0200822981  0.0555405856   -54.37613 &lt; 0.000000000000000222\nDESTIN_hex2146 -2.0222853253  0.0545877239   -37.04652 &lt; 0.000000000000000222\nDESTIN_hex2147 -0.6205572839  0.0512567308   -12.10684 &lt; 0.000000000000000222\nDESTIN_hex2148 -0.3790859719  0.0512250954    -7.40040 0.00000000000013577936\nDESTIN_hex2149 -0.9231463492  0.0513855204   -17.96511 &lt; 0.000000000000000222\nDESTIN_hex2150 -2.4954845588  0.0524921933   -47.54011 &lt; 0.000000000000000222\nDESTIN_hex2151 -2.6666058378  0.0525380887   -50.75567 &lt; 0.000000000000000222\nDESTIN_hex2152 -0.1694745588  0.0511989287    -3.31012             0.00093256\nDESTIN_hex2153 -1.1935100812  0.0525566245   -22.70903 &lt; 0.000000000000000222\nDESTIN_hex2154 -2.4262098432  0.0520923558   -46.57516 &lt; 0.000000000000000222\nDESTIN_hex2155 -2.3435596913  0.0524308503   -44.69811 &lt; 0.000000000000000222\nDESTIN_hex2171 -2.6948665903  0.1790678696   -15.04941 &lt; 0.000000000000000222\nDESTIN_hex2172 -1.7660143967  0.0549718502   -32.12580 &lt; 0.000000000000000222\nDESTIN_hex2174 -2.3565114246  0.0531246207   -44.35818 &lt; 0.000000000000000222\nDESTIN_hex2175  0.1109320478  0.0511690825     2.16795             0.03016244\nDESTIN_hex2176 -0.7878552055  0.0513379274   -15.34646 &lt; 0.000000000000000222\nDESTIN_hex2177  0.7289129745  0.0511156038    14.26009 &lt; 0.000000000000000222\nDESTIN_hex2178 -2.5589757477  0.0519994284   -49.21161 &lt; 0.000000000000000222\nDESTIN_hex2179 -0.9858084241  0.0512734092   -19.22650 &lt; 0.000000000000000222\nDESTIN_hex2180 -1.7728205069  0.0515652957   -34.38011 &lt; 0.000000000000000222\nDESTIN_hex2181 -0.8071423317  0.0512988417   -15.73412 &lt; 0.000000000000000222\nDESTIN_hex2182 -2.1407877395  0.0539874215   -39.65345 &lt; 0.000000000000000222\nDESTIN_hex2200 -1.0575302976  0.0522339986   -20.24601 &lt; 0.000000000000000222\nDESTIN_hex2201 -0.7278741875  0.0512933294   -14.19043 &lt; 0.000000000000000222\nDESTIN_hex2202 -0.2302332994  0.0513531038    -4.48334 0.00000734845423840997\nDESTIN_hex2203 -0.4997338866  0.0514667011    -9.70985 &lt; 0.000000000000000222\nDESTIN_hex2204 -0.4504582155  0.0512330768    -8.79233 &lt; 0.000000000000000222\nDESTIN_hex2205 -1.5649271751  0.0514664152   -30.40676 &lt; 0.000000000000000222\nDESTIN_hex2206 -0.7345387146  0.0512174377   -14.34157 &lt; 0.000000000000000222\nDESTIN_hex2207 -1.9873673096  0.0515268934   -38.56952 &lt; 0.000000000000000222\nDESTIN_hex2208 -1.5726816755  0.0514708756   -30.55479 &lt; 0.000000000000000222\nDESTIN_hex2209 -3.6160085227  0.0568964411   -63.55421 &lt; 0.000000000000000222\nDESTIN_hex2227 -1.5320582326  0.0517294748   -29.61674 &lt; 0.000000000000000222\nDESTIN_hex2228 -0.9602345007  0.0513630073   -18.69506 &lt; 0.000000000000000222\nDESTIN_hex2229 -0.3917143908  0.0512256160    -7.64685 0.00000000000002059689\nDESTIN_hex2230 -0.7613201776  0.0515798967   -14.76002 &lt; 0.000000000000000222\nDESTIN_hex2231 -1.3744651199  0.0513760217   -26.75305 &lt; 0.000000000000000222\nDESTIN_hex2233 -0.8564720944  0.0512224336   -16.72064 &lt; 0.000000000000000222\nDESTIN_hex2234 -6.4192456702  0.0972713339   -65.99319 &lt; 0.000000000000000222\nDESTIN_hex2235 -4.4940374531  0.0733903757   -61.23470 &lt; 0.000000000000000222\nDESTIN_hex2254 -1.0359331647  0.0520716023   -19.89440 &lt; 0.000000000000000222\nDESTIN_hex2255 -1.1895060202  0.0515224397   -23.08714 &lt; 0.000000000000000222\nDESTIN_hex2256 -1.0997911807  0.0514016733   -21.39602 &lt; 0.000000000000000222\nDESTIN_hex2257 -1.2691049715  0.0518351005   -24.48351 &lt; 0.000000000000000222\nDESTIN_hex2258 -1.9746981048  0.0518372931   -38.09416 &lt; 0.000000000000000222\nDESTIN_hex2259 -2.2516950219  0.0519866244   -43.31297 &lt; 0.000000000000000222\nDESTIN_hex2260 -1.5351246702  0.0514331737   -29.84698 &lt; 0.000000000000000222\nDESTIN_hex2261 -1.3480077674  0.0513972150   -26.22725 &lt; 0.000000000000000222\nDESTIN_hex2262 -2.5828503751  0.0520750765   -49.59859 &lt; 0.000000000000000222\nDESTIN_hex2281 -1.2196851363  0.0515802410   -23.64636 &lt; 0.000000000000000222\nDESTIN_hex2282 -0.1679022284  0.0512091227    -3.27876             0.00104266\nDESTIN_hex2283 -1.0954149966  0.0514444703   -21.29315 &lt; 0.000000000000000222\nDESTIN_hex2284 -0.9286195145  0.0513547502   -18.08245 &lt; 0.000000000000000222\nDESTIN_hex2285 -0.8166754586  0.0514047925   -15.88715 &lt; 0.000000000000000222\nDESTIN_hex2286 -1.8424646649  0.0515304802   -35.75485 &lt; 0.000000000000000222\nDESTIN_hex2287 -0.7263077691  0.0512104039   -14.18282 &lt; 0.000000000000000222\nDESTIN_hex2288 -3.1543400667  0.0530770342   -59.42947 &lt; 0.000000000000000222\nDESTIN_hex2308 -1.2162026938  0.0518530010   -23.45482 &lt; 0.000000000000000222\nDESTIN_hex2309 -0.5037301783  0.0512916860    -9.82089 &lt; 0.000000000000000222\nDESTIN_hex2310 -0.9387196391  0.0513197616   -18.29158 &lt; 0.000000000000000222\nDESTIN_hex2311 -0.0400343690  0.0511875103    -0.78211             0.43414872\nDESTIN_hex2312 -1.8925266648  0.0519327087   -36.44190 &lt; 0.000000000000000222\nDESTIN_hex2313 -0.0627603842  0.0511840627    -1.22617             0.22013455\nDESTIN_hex2314 -0.0851616995  0.0511386574    -1.66531             0.09585099\nDESTIN_hex2315 -1.7882156773  0.0515076436   -34.71748 &lt; 0.000000000000000222\nDESTIN_hex2316 -1.4624775688  0.0513897740   -28.45853 &lt; 0.000000000000000222\nDESTIN_hex2317 -3.4949289732  0.0571301857   -61.17482 &lt; 0.000000000000000222\nDESTIN_hex2335 -2.3291392749  0.0534276876   -43.59424 &lt; 0.000000000000000222\nDESTIN_hex2336  0.1195257860  0.0511560196     2.33650             0.01946546\nDESTIN_hex2337 -0.3770412746  0.0512233789    -7.36073 0.00000000000018291219\nDESTIN_hex2338 -1.1345606007  0.0515631287   -22.00333 &lt; 0.000000000000000222\nDESTIN_hex2339 -0.5573047349  0.0512581896   -10.87250 &lt; 0.000000000000000222\nDESTIN_hex2340 -1.0329698503  0.0512626649   -20.15053 &lt; 0.000000000000000222\nDESTIN_hex2341 -0.9256472154  0.0512237161   -18.07068 &lt; 0.000000000000000222\nDESTIN_hex2342 -2.1499894981  0.0514865292   -41.75829 &lt; 0.000000000000000222\nDESTIN_hex2343 -2.3398239459  0.0517603614   -45.20494 &lt; 0.000000000000000222\nDESTIN_hex2362 -1.4993014778  0.0523865939   -28.61995 &lt; 0.000000000000000222\nDESTIN_hex2363 -1.0734351380  0.0514380425   -20.86851 &lt; 0.000000000000000222\nDESTIN_hex2364 -1.5303259655  0.0519117201   -29.47939 &lt; 0.000000000000000222\nDESTIN_hex2365 -0.0432487985  0.0512078277    -0.84457             0.39834875\nDESTIN_hex2366 -0.4080435568  0.0524330127    -7.78219 0.00000000000000712809\nDESTIN_hex2367 -1.0496516754  0.0514023818   -20.42029 &lt; 0.000000000000000222\nDESTIN_hex2368 -1.4227854567  0.0513296959   -27.71856 &lt; 0.000000000000000222\nDESTIN_hex2369 -0.4194756684  0.0511641334    -8.19863 0.00000000000000024315\nDESTIN_hex2370  0.0504475621  0.0511306179     0.98664             0.32381868\nDESTIN_hex2371 -1.9863097390  0.0515420760   -38.53764 &lt; 0.000000000000000222\nDESTIN_hex2389 -1.0645327903  0.0515007421   -20.67024 &lt; 0.000000000000000222\nDESTIN_hex2390 -0.1388943596  0.0511945198    -2.71307             0.00666629\nDESTIN_hex2391 -0.3110959400  0.0512821800    -6.06636 0.00000000130845257588\nDESTIN_hex2392 -0.1466013728  0.0518373709    -2.82810             0.00468249\nDESTIN_hex2393  0.9694585508  0.0515949174    18.78981 &lt; 0.000000000000000222\nDESTIN_hex2394 -2.8513788054  0.0528467374   -53.95563 &lt; 0.000000000000000222\nDESTIN_hex2395 -1.4231966966  0.0513260212   -27.72856 &lt; 0.000000000000000222\nDESTIN_hex2396 -1.5795458257  0.0513018455   -30.78926 &lt; 0.000000000000000222\nDESTIN_hex2397 -3.0656997381  0.0520064903   -58.94841 &lt; 0.000000000000000222\nDESTIN_hex2398 -2.2312078362  0.0522774194   -42.68014 &lt; 0.000000000000000222\nDESTIN_hex2416 -1.3592837410  0.0518187154   -26.23152 &lt; 0.000000000000000222\nDESTIN_hex2417 -1.4365340642  0.0519601173   -27.64686 &lt; 0.000000000000000222\nDESTIN_hex2418 -0.9659494532  0.0513609469   -18.80708 &lt; 0.000000000000000222\nDESTIN_hex2419 -0.1421811716  0.0512113022    -2.77636             0.00549708\nDESTIN_hex2420 -2.6784013154  0.0624802958   -42.86794 &lt; 0.000000000000000222\nDESTIN_hex2422 -2.7217529186  0.0552653862   -49.24878 &lt; 0.000000000000000222\nDESTIN_hex2423 -2.4379866967  0.0517275177   -47.13133 &lt; 0.000000000000000222\nDESTIN_hex2424 -0.7643905628  0.0511857164   -14.93367 &lt; 0.000000000000000222\nDESTIN_hex2425  0.0294817689  0.0511437383     0.57645             0.56431157\nDESTIN_hex2426 -1.7263199704  0.0535273066   -32.25120 &lt; 0.000000000000000222\nDESTIN_hex2443  0.2394880626  0.0511796158     4.67936 0.00000287765865261254\nDESTIN_hex2444 -0.3633670647  0.0512153350    -7.09489 0.00000000000129456300\nDESTIN_hex2445 -0.2673239374  0.0512125412    -5.21989 0.00000017902743401433\nDESTIN_hex2448 -1.3411217393  0.0522300068   -25.67723 &lt; 0.000000000000000222\nDESTIN_hex2449 -2.4911877464  0.0523418599   -47.59456 &lt; 0.000000000000000222\nDESTIN_hex2450 -2.2177837159  0.0515957384   -42.98385 &lt; 0.000000000000000222\nDESTIN_hex2451 -0.5416994509  0.0511777346   -10.58467 &lt; 0.000000000000000222\nDESTIN_hex2452 -3.6880932643  0.0562013167   -65.62290 &lt; 0.000000000000000222\nDESTIN_hex2471 -1.4155934854  0.0515166105   -27.47839 &lt; 0.000000000000000222\nDESTIN_hex2472 -3.2521740309  0.0545671946   -59.59944 &lt; 0.000000000000000222\nDESTIN_hex2473 -0.1289552790  0.0512351119    -2.51693             0.01183818\nDESTIN_hex2476 -0.1499820703  0.0516502356    -2.90380             0.00368661\nDESTIN_hex2478 -2.1801577933  0.0515368991   -42.30285 &lt; 0.000000000000000222\nDESTIN_hex2479 -3.6205126009  0.0533230512   -67.89770 &lt; 0.000000000000000222\nDESTIN_hex2480 -2.6685451304  0.0558297819   -47.79788 &lt; 0.000000000000000222\nDESTIN_hex2497 -0.6375703513  0.0513382308   -12.41902 &lt; 0.000000000000000222\nDESTIN_hex2498 -2.5969744718  0.0530265891   -48.97495 &lt; 0.000000000000000222\nDESTIN_hex2499 -1.5848601241  0.0517085189   -30.64988 &lt; 0.000000000000000222\nDESTIN_hex2500 -2.0542282603  0.0532765782   -38.55781 &lt; 0.000000000000000222\nDESTIN_hex2503 -3.5726805506  0.0773518143   -46.18742 &lt; 0.000000000000000222\nDESTIN_hex2504 -3.9406077719  0.0598403384   -65.85203 &lt; 0.000000000000000222\nDESTIN_hex2505 -2.1879204683  0.0515914123   -42.40862 &lt; 0.000000000000000222\nDESTIN_hex2525 -1.7138752032  0.0518907314   -33.02854 &lt; 0.000000000000000222\nDESTIN_hex2526 -0.5374571535  0.0512646412   -10.48397 &lt; 0.000000000000000222\nDESTIN_hex2527 -0.0292271940  0.0512031026    -0.57081             0.56812909\nDESTIN_hex2531 -4.8150508106  0.1308218284   -36.80617 &lt; 0.000000000000000222\nDESTIN_hex2532 -2.4799556543  0.0520237741   -47.66966 &lt; 0.000000000000000222\nDESTIN_hex2533 -2.4028091806  0.0532426668   -45.12939 &lt; 0.000000000000000222\nDESTIN_hex2551 -0.5501871125  0.0513761461   -10.70900 &lt; 0.000000000000000222\nDESTIN_hex2552 -1.9764459388  0.0524072911   -37.71319 &lt; 0.000000000000000222\nDESTIN_hex2553 -1.2516073205  0.0517708338   -24.17592 &lt; 0.000000000000000222\nDESTIN_hex2554 -2.4633548761  0.0528527544   -46.60788 &lt; 0.000000000000000222\nDESTIN_hex2557 -0.2621402527  0.0519282122    -5.04813 0.00000044616060871309\nDESTIN_hex2559 -2.8368529711  0.0532835220   -53.24072 &lt; 0.000000000000000222\nDESTIN_hex2579 -1.2851752469  0.0515428824   -24.93410 &lt; 0.000000000000000222\nDESTIN_hex2580 -0.3376388942  0.0512240983    -6.59141 0.00000000004356768829\nDESTIN_hex2581 -1.5566450296  0.0516752766   -30.12359 &lt; 0.000000000000000222\nDESTIN_hex2584 -2.3418976092  0.0561541093   -41.70483 &lt; 0.000000000000000222\nDESTIN_hex2605 -2.1667325862  0.0537231963   -40.33142 &lt; 0.000000000000000222\nDESTIN_hex2606 -2.4476436852  0.0543562377   -45.02967 &lt; 0.000000000000000222\nDESTIN_hex2607 -1.3517835101  0.0514717052   -26.26265 &lt; 0.000000000000000222\nDESTIN_hex2608 -1.7887249952  0.0520483780   -34.36658 &lt; 0.000000000000000222\nDESTIN_hex2609 -3.4343257872  0.0593175506   -57.89730 &lt; 0.000000000000000222\nDESTIN_hex2610 -2.6430420945  0.0575471650   -45.92828 &lt; 0.000000000000000222\nDESTIN_hex2611  0.0496244041  0.0522713974     0.94936             0.34243725\nDESTIN_hex2633 -1.0170552405  0.0515148218   -19.74296 &lt; 0.000000000000000222\nDESTIN_hex2634  0.9343515715  0.0511143911    18.27962 &lt; 0.000000000000000222\nDESTIN_hex2635 -1.9830189933  0.0520539451   -38.09546 &lt; 0.000000000000000222\nDESTIN_hex2636 -0.5494823175  0.0513121766   -10.70861 &lt; 0.000000000000000222\nDESTIN_hex2637 -1.9251524512  0.0520137280   -37.01239 &lt; 0.000000000000000222\nDESTIN_hex2638 -1.4213496181  0.0516264294   -27.53143 &lt; 0.000000000000000222\nDESTIN_hex2660 -1.0341562054  0.0513838427   -20.12610 &lt; 0.000000000000000222\nDESTIN_hex2661 -1.1341859781  0.0513154469   -22.10223 &lt; 0.000000000000000222\nDESTIN_hex2662 -1.9032179180  0.0517072142   -36.80759 &lt; 0.000000000000000222\nDESTIN_hex2663 -0.4758482619  0.0512947005    -9.27675 &lt; 0.000000000000000222\nDESTIN_hex2664 -1.4229198907  0.0515322249   -27.61223 &lt; 0.000000000000000222\nDESTIN_hex2665 -0.0540069557  0.0512015582    -1.05479             0.29152081\nDESTIN_hex2687 -2.0311499837  0.0522384538   -38.88228 &lt; 0.000000000000000222\nDESTIN_hex2688 -1.0196301121  0.0513233777   -19.86678 &lt; 0.000000000000000222\nDESTIN_hex2689 -0.3616013436  0.0512177840    -7.06007 0.00000000000166414002\nDESTIN_hex2690 -0.5032183420  0.0512437751    -9.82009 &lt; 0.000000000000000222\nDESTIN_hex2691 -1.0346795969  0.0513825735   -20.13678 &lt; 0.000000000000000222\nDESTIN_hex2693 -0.8397457833  0.0513640758   -16.34889 &lt; 0.000000000000000222\nDESTIN_hex2714 -1.8844969130  0.0518371804   -36.35416 &lt; 0.000000000000000222\nDESTIN_hex2715 -1.3178571263  0.0515702126   -25.55462 &lt; 0.000000000000000222\nDESTIN_hex2716 -3.0917754206  0.0533672910   -57.93390 &lt; 0.000000000000000222\nDESTIN_hex2717 -0.8357399079  0.0512452444   -16.30863 &lt; 0.000000000000000222\nDESTIN_hex2718 -1.8997119412  0.0518686854   -36.62541 &lt; 0.000000000000000222\nDESTIN_hex2719 -0.8985757766  0.0513594948   -17.49581 &lt; 0.000000000000000222\nDESTIN_hex2742 -0.7259045770  0.0512996497   -14.15028 &lt; 0.000000000000000222\nDESTIN_hex2743 -0.5376404877  0.0515276773   -10.43401 &lt; 0.000000000000000222\nDESTIN_hex2744 -0.1456176111  0.0511794738    -2.84523             0.00443787\nDESTIN_hex2745 -0.2242610627  0.0511825412    -4.38159 0.00001178147534155887\nDESTIN_hex2746 -2.4066871658  0.0529500350   -45.45204 &lt; 0.000000000000000222\nDESTIN_hex2747 -1.5375828909  0.0517191416   -29.72947 &lt; 0.000000000000000222\nDESTIN_hex2768 -0.7317308560  0.0514090379   -14.23351 &lt; 0.000000000000000222\nDESTIN_hex2769  0.2596110457  0.0511889642     5.07162 0.00000039444053764537\nDESTIN_hex2770 -0.2830973558  0.0512390060    -5.52504 0.00000003294179431218\nDESTIN_hex2771  1.0928917427  0.0511117700    21.38239 &lt; 0.000000000000000222\nDESTIN_hex2772 -3.5677543871  0.0572606818   -62.30723 &lt; 0.000000000000000222\nDESTIN_hex2773 -1.9101220633  0.0517162800   -36.93464 &lt; 0.000000000000000222\nDESTIN_hex2795 -2.0377993299  0.0816409032   -24.96052 &lt; 0.000000000000000222\nDESTIN_hex2796 -5.4375657429  0.1263040290   -43.05140 &lt; 0.000000000000000222\nDESTIN_hex2797 -0.5362610461  0.0513214500   -10.44906 &lt; 0.000000000000000222\nDESTIN_hex2798 -2.1487950922  0.0518989659   -41.40343 &lt; 0.000000000000000222\nDESTIN_hex2799 -1.4746306883  0.0514553950   -28.65843 &lt; 0.000000000000000222\nDESTIN_hex2800 -0.1282945531  0.0512001224    -2.50575             0.01221930\nDESTIN_hex2801 -3.3808979502  0.0590148307   -57.28895 &lt; 0.000000000000000222\nDESTIN_hex2822 -2.2716228716  0.0528915306   -42.94871 &lt; 0.000000000000000222\nDESTIN_hex2823 -0.8872829842  0.0514627970   -17.24125 &lt; 0.000000000000000222\nDESTIN_hex2824  0.0517198340  0.0512661337     1.00885             0.31304662\nDESTIN_hex2825 -0.8207795805  0.0512754526   -16.00726 &lt; 0.000000000000000222\nDESTIN_hex2826 -1.2639583166  0.0516803834   -24.45722 &lt; 0.000000000000000222\nDESTIN_hex2827  0.6266701509  0.0511472403    12.25228 &lt; 0.000000000000000222\nDESTIN_hex2850 -1.6306865726  0.0526706196   -30.96008 &lt; 0.000000000000000222\nDESTIN_hex2851  0.2527598612  0.0512287143     4.93395 0.00000080583510069634\nDESTIN_hex2852 -1.5135459624  0.0517935824   -29.22265 &lt; 0.000000000000000222\nDESTIN_hex2853  0.2910099304  0.0511559823     5.68868 0.00000001280263363684\nDESTIN_hex2854 -0.7715682201  0.0513305609   -15.03136 &lt; 0.000000000000000222\nDESTIN_hex2877 -1.2067991605  0.0526154539   -22.93621 &lt; 0.000000000000000222\nDESTIN_hex2878 -0.6734290394  0.0514489890   -13.08926 &lt; 0.000000000000000222\nDESTIN_hex2879 -1.1163047452  0.0516026785   -21.63269 &lt; 0.000000000000000222\nDESTIN_hex2880 -1.9056156084  0.0517005936   -36.85868 &lt; 0.000000000000000222\nDESTIN_hex2881 -1.4315039039  0.0516860412   -27.69614 &lt; 0.000000000000000222\nDESTIN_hex2905 -0.0754420365  0.0515015887    -1.46485             0.14296220\nDESTIN_hex2906 -0.8849062036  0.0518132178   -17.07877 &lt; 0.000000000000000222\nDESTIN_hex2907 -1.6941366668  0.0516951006   -32.77171 &lt; 0.000000000000000222\nDESTIN_hex2908 -0.7165710790  0.0513687211   -13.94956 &lt; 0.000000000000000222\nDESTIN_hex2909 -2.8405960319  0.0622404795   -45.63904 &lt; 0.000000000000000222\nDESTIN_hex2931  0.1259428173  0.0516483713     2.43847             0.01474973\nDESTIN_hex2932 -0.5025768456  0.0517253850    -9.71625 &lt; 0.000000000000000222\nDESTIN_hex2933 -0.0949948838  0.0513596511    -1.84960             0.06437102\nDESTIN_hex2934 -1.4143953873  0.0515713012   -27.42602 &lt; 0.000000000000000222\nDESTIN_hex2959  0.2501241421  0.0518643841     4.82266 0.00000141658352928406\nDESTIN_hex2960  1.1308654294  0.0515410811    21.94105 &lt; 0.000000000000000222\nDESTIN_hex2961 -0.7654885783  0.0516675144   -14.81566 &lt; 0.000000000000000222\nDESTIN_hex2962 -0.4007977190  0.0513674939    -7.80256 0.00000000000000606660\nDESTIN_hex2963 -0.4382615662  0.0524476809    -8.35617 &lt; 0.000000000000000222\nDESTIN_hex2987 -0.3288535367  0.0522013650    -6.29971 0.00000000029820025808\nDESTIN_hex2988 -2.8751622455  0.0563089271   -51.06050 &lt; 0.000000000000000222\nDESTIN_hex2989 -0.8479799047  0.0516700079   -16.41145 &lt; 0.000000000000000222\nDESTIN_hex2990  0.0154828785  0.0526765935     0.29392             0.76881651\nDESTIN_hex3015 -1.5148411341  0.0550174015   -27.53385 &lt; 0.000000000000000222\nDESTIN_hex3016 -0.5536919730  0.0523927899   -10.56809 &lt; 0.000000000000000222\nDESTIN_hex3017 -1.0430846113  0.0519260257   -20.08790 &lt; 0.000000000000000222\nDESTIN_hex3040  0.2080632750  0.0514030511     4.04768 0.00005172705552611095\nDESTIN_hex3043 -1.2074063157  0.0520388884   -23.20200 &lt; 0.000000000000000222\nDESTIN_hex3044 -0.8157882891  0.0519493061   -15.70355 &lt; 0.000000000000000222\nDESTIN_hex3068 -1.5621258708  0.0526298035   -29.68139 &lt; 0.000000000000000222\nDESTIN_hex3070 -1.5496650422  0.0550868762   -28.13129 &lt; 0.000000000000000222\nDESTIN_hex3072 -1.2953801301  0.0565694083   -22.89895 &lt; 0.000000000000000222\nDESTIN_hex3092  0.2335950722  0.0538931366     4.33441 0.00001461500625532990\nDESTIN_hex3098 -0.2595117038  0.0516285775    -5.02651 0.00000049947925913314\nDESTIN_hex3123  1.6519576938  0.0511821619    32.27604 &lt; 0.000000000000000222\nDESTIN_hex3126 -3.8044755429  0.0785637894   -48.42531 &lt; 0.000000000000000222\nDESTIN_hex3151  1.1268192795  0.0512868191    21.97093 &lt; 0.000000000000000222\nDESTIN_hex3152 -4.2115355186  0.0830226041   -50.72758 &lt; 0.000000000000000222\nDESTIN_hex3173 -0.9664888271  0.0574743666   -16.81600 &lt; 0.000000000000000222\nDESTIN_hex3178 -0.3436175004  0.0520031992    -6.60762 0.00000000003905414326\nDESTIN_hex3179 -0.6752767179  0.0521353437   -12.95238 &lt; 0.000000000000000222\nDESTIN_hex3205  0.3103531233  0.0525011756     5.91136 0.00000000339303438041\nDESTIN_hex3206  0.9147202232  0.0514776473    17.76927 &lt; 0.000000000000000222\nDESTIN_hex3232  0.0709654671  0.0565663077     1.25455             0.20964084\nDESTIN_hex3233 -0.7682907737  0.0554352681   -13.85924 &lt; 0.000000000000000222\nDESTIN_hex3308  0.2419880563  0.0547464312     4.42016 0.00000986272592849379\ndist           -1.6001837283  0.0002897849 -5521.97139 &lt; 0.000000000000000222\n                  \n(Intercept)    ***\nORIGIN_hex146  ***\nORIGIN_hex174  ***\nORIGIN_hex175     \nORIGIN_hex200  ***\nORIGIN_hex201  ***\nORIGIN_hex202  ***\nORIGIN_hex203  ***\nORIGIN_hex227  ***\nORIGIN_hex228  ***\nORIGIN_hex229  ***\nORIGIN_hex230  ***\nORIGIN_hex231  ***\nORIGIN_hex254  ***\nORIGIN_hex255  ***\nORIGIN_hex256  ***\nORIGIN_hex257  ***\nORIGIN_hex258  ** \nORIGIN_hex259  ***\nORIGIN_hex281  ***\nORIGIN_hex282  ***\nORIGIN_hex284  ***\nORIGIN_hex285  ***\nORIGIN_hex286  ***\nORIGIN_hex312  ***\nORIGIN_hex313  ***\nORIGIN_hex314  ***\nORIGIN_hex336     \nORIGIN_hex338  ***\nORIGIN_hex339  ***\nORIGIN_hex340  *  \nORIGIN_hex366  ***\nORIGIN_hex367  ***\nORIGIN_hex391  ***\nORIGIN_hex392  ***\nORIGIN_hex393  ***\nORIGIN_hex394     \nORIGIN_hex419  ***\nORIGIN_hex420  ***\nORIGIN_hex421  ***\nORIGIN_hex445  ***\nORIGIN_hex446  ***\nORIGIN_hex447  ***\nORIGIN_hex472     \nORIGIN_hex473  ***\nORIGIN_hex474  ***\nORIGIN_hex499  ***\nORIGIN_hex500  ***\nORIGIN_hex526  ***\nORIGIN_hex527  ***\nORIGIN_hex528  ***\nORIGIN_hex552  ** \nORIGIN_hex553  ***\nORIGIN_hex554  ***\nORIGIN_hex555  ***\nORIGIN_hex581  ***\nORIGIN_hex582  ***\nORIGIN_hex607  ***\nORIGIN_hex608  ***\nORIGIN_hex609  ***\nORIGIN_hex610  ***\nORIGIN_hex611     \nORIGIN_hex634  ***\nORIGIN_hex635     \nORIGIN_hex636  ***\nORIGIN_hex638  ***\nORIGIN_hex661  ***\nORIGIN_hex662  ***\nORIGIN_hex663  ***\nORIGIN_hex664  ***\nORIGIN_hex665  ***\nORIGIN_hex689  ***\nORIGIN_hex690  ***\nORIGIN_hex692  ***\nORIGIN_hex693  ***\nORIGIN_hex715  ***\nORIGIN_hex716  ***\nORIGIN_hex717  ***\nORIGIN_hex718  ***\nORIGIN_hex719  ***\nORIGIN_hex720  *  \nORIGIN_hex743  ***\nORIGIN_hex744  ***\nORIGIN_hex745  ***\nORIGIN_hex746  ***\nORIGIN_hex747  ***\nORIGIN_hex748  ***\nORIGIN_hex769  ***\nORIGIN_hex770  ***\nORIGIN_hex771  ***\nORIGIN_hex772  ***\nORIGIN_hex773  ***\nORIGIN_hex774  ***\nORIGIN_hex775  ***\nORIGIN_hex776  ***\nORIGIN_hex777  ***\nORIGIN_hex797  ***\nORIGIN_hex798  .  \nORIGIN_hex799  ***\nORIGIN_hex800  ***\nORIGIN_hex802  ***\nORIGIN_hex803  ***\nORIGIN_hex805  ***\nORIGIN_hex806  ***\nORIGIN_hex823  ***\nORIGIN_hex824  ***\nORIGIN_hex825  ***\nORIGIN_hex826  ***\nORIGIN_hex827  ***\nORIGIN_hex832     \nORIGIN_hex833  ***\nORIGIN_hex851  ***\nORIGIN_hex852  ***\nORIGIN_hex853  ***\nORIGIN_hex854  ***\nORIGIN_hex856     \nORIGIN_hex861  ***\nORIGIN_hex862  ***\nORIGIN_hex878  ***\nORIGIN_hex879  ***\nORIGIN_hex880  ***\nORIGIN_hex881  ***\nORIGIN_hex888  ***\nORIGIN_hex889  ***\nORIGIN_hex905  ***\nORIGIN_hex906     \nORIGIN_hex907  ***\nORIGIN_hex908  ***\nORIGIN_hex910  ***\nORIGIN_hex932  ***\nORIGIN_hex933  ***\nORIGIN_hex934  ***\nORIGIN_hex935  ***\nORIGIN_hex937  ***\nORIGIN_hex959  ***\nORIGIN_hex960  ***\nORIGIN_hex961  ***\nORIGIN_hex962  ***\nORIGIN_hex986     \nORIGIN_hex987  ***\nORIGIN_hex988  ***\nORIGIN_hex989  ***\nORIGIN_hex991  ***\nORIGIN_hex1013    \nORIGIN_hex1014 ***\nORIGIN_hex1015 ***\nORIGIN_hex1016 ***\nORIGIN_hex1042 ***\nORIGIN_hex1043 ***\nORIGIN_hex1045 ***\nORIGIN_hex1067 ***\nORIGIN_hex1068 ***\nORIGIN_hex1069 ***\nORIGIN_hex1070 ***\nORIGIN_hex1078 ***\nORIGIN_hex1093 ***\nORIGIN_hex1094 ***\nORIGIN_hex1095 ***\nORIGIN_hex1096 ***\nORIGIN_hex1097 ***\nORIGIN_hex1099 ***\nORIGIN_hex1100 ***\nORIGIN_hex1122 ***\nORIGIN_hex1123 ***\nORIGIN_hex1124 ***\nORIGIN_hex1125 ***\nORIGIN_hex1126 ***\nORIGIN_hex1127 ***\nORIGIN_hex1128 ***\nORIGIN_hex1132 .  \nORIGIN_hex1147 ** \nORIGIN_hex1148 ***\nORIGIN_hex1149 ***\nORIGIN_hex1150 ***\nORIGIN_hex1151 ***\nORIGIN_hex1152 ***\nORIGIN_hex1153 ***\nORIGIN_hex1154 ***\nORIGIN_hex1155 ***\nORIGIN_hex1158 ***\nORIGIN_hex1174 ***\nORIGIN_hex1175 ***\nORIGIN_hex1176 ***\nORIGIN_hex1177 ***\nORIGIN_hex1178 ***\nORIGIN_hex1179 ***\nORIGIN_hex1180 ***\nORIGIN_hex1181 ***\nORIGIN_hex1182 ***\nORIGIN_hex1183 ***\nORIGIN_hex1185 ***\nORIGIN_hex1201 ***\nORIGIN_hex1202 ***\nORIGIN_hex1203 ***\nORIGIN_hex1205 ***\nORIGIN_hex1206 ***\nORIGIN_hex1207 ***\nORIGIN_hex1209 ***\nORIGIN_hex1210 ***\nORIGIN_hex1211 ***\nORIGIN_hex1212 ***\nORIGIN_hex1228 ***\nORIGIN_hex1229 ***\nORIGIN_hex1230 ***\nORIGIN_hex1231 ***\nORIGIN_hex1232 ***\nORIGIN_hex1233 ***\nORIGIN_hex1235 ***\nORIGIN_hex1236 ***\nORIGIN_hex1237 ***\nORIGIN_hex1238 ***\nORIGIN_hex1239 ***\nORIGIN_hex1240 ***\nORIGIN_hex1255 ***\nORIGIN_hex1256 ***\nORIGIN_hex1257 ***\nORIGIN_hex1258 ***\nORIGIN_hex1259 ***\nORIGIN_hex1261 ***\nORIGIN_hex1262 ***\nORIGIN_hex1263 ***\nORIGIN_hex1264 ***\nORIGIN_hex1265 ***\nORIGIN_hex1266 ***\nORIGIN_hex1282 ***\nORIGIN_hex1283 ***\nORIGIN_hex1284 ***\nORIGIN_hex1285 ***\nORIGIN_hex1286 ***\nORIGIN_hex1287 ***\nORIGIN_hex1288 ***\nORIGIN_hex1289 ***\nORIGIN_hex1293 ***\nORIGIN_hex1308 ***\nORIGIN_hex1309 ***\nORIGIN_hex1310 ***\nORIGIN_hex1311 ***\nORIGIN_hex1312 ***\nORIGIN_hex1314 ***\nORIGIN_hex1315 ***\nORIGIN_hex1316 ***\nORIGIN_hex1318 ***\nORIGIN_hex1319 ***\nORIGIN_hex1320 ***\nORIGIN_hex1335 .  \nORIGIN_hex1336 ***\nORIGIN_hex1337 ***\nORIGIN_hex1338 ***\nORIGIN_hex1339 ***\nORIGIN_hex1340 ***\nORIGIN_hex1341 ***\nORIGIN_hex1342 ***\nORIGIN_hex1343 ***\nORIGIN_hex1347 ***\nORIGIN_hex1348 ***\nORIGIN_hex1362 ***\nORIGIN_hex1363 ***\nORIGIN_hex1364 ***\nORIGIN_hex1366 ***\nORIGIN_hex1367 ***\nORIGIN_hex1368 ***\nORIGIN_hex1369 ***\nORIGIN_hex1370 ***\nORIGIN_hex1372    \nORIGIN_hex1374 ***\nORIGIN_hex1375 ***\nORIGIN_hex1389 ***\nORIGIN_hex1390 ***\nORIGIN_hex1391 ***\nORIGIN_hex1392 ***\nORIGIN_hex1394 ***\nORIGIN_hex1396 ***\nORIGIN_hex1397 ***\nORIGIN_hex1401 ***\nORIGIN_hex1402 ***\nORIGIN_hex1416 ** \nORIGIN_hex1417 ***\nORIGIN_hex1418 ***\nORIGIN_hex1419 ***\nORIGIN_hex1420 ***\nORIGIN_hex1422 ***\nORIGIN_hex1423 ***\nORIGIN_hex1426 ***\nORIGIN_hex1428 ***\nORIGIN_hex1429 ***\nORIGIN_hex1443 ***\nORIGIN_hex1444 ***\nORIGIN_hex1445 ***\nORIGIN_hex1446 ***\nORIGIN_hex1447 ***\nORIGIN_hex1455 ***\nORIGIN_hex1456 ***\nORIGIN_hex1457 ***\nORIGIN_hex1469 ***\nORIGIN_hex1470 ***\nORIGIN_hex1471 ***\nORIGIN_hex1472 ***\nORIGIN_hex1480 ***\nORIGIN_hex1482 ***\nORIGIN_hex1483 ***\nORIGIN_hex1496 ***\nORIGIN_hex1497 ***\nORIGIN_hex1498 ***\nORIGIN_hex1499 ***\nORIGIN_hex1500 ***\nORIGIN_hex1501 ***\nORIGIN_hex1507 ***\nORIGIN_hex1509 ***\nORIGIN_hex1510 ***\nORIGIN_hex1511 ***\nORIGIN_hex1523 ***\nORIGIN_hex1524 ***\nORIGIN_hex1525 ***\nORIGIN_hex1526 ***\nORIGIN_hex1527 ***\nORIGIN_hex1534    \nORIGIN_hex1536 ***\nORIGIN_hex1537 ***\nORIGIN_hex1550 ***\nORIGIN_hex1551 ***\nORIGIN_hex1552 ***\nORIGIN_hex1553 ***\nORIGIN_hex1554 ***\nORIGIN_hex1555 ***\nORIGIN_hex1562 ***\nORIGIN_hex1563 ***\nORIGIN_hex1564 ***\nORIGIN_hex1565 ***\nORIGIN_hex1576 ***\nORIGIN_hex1578 ***\nORIGIN_hex1579 ***\nORIGIN_hex1581 ***\nORIGIN_hex1588 ***\nORIGIN_hex1590 ***\nORIGIN_hex1591 ***\nORIGIN_hex1592 ***\nORIGIN_hex1604 ***\nORIGIN_hex1605 ***\nORIGIN_hex1606 ***\nORIGIN_hex1607 ***\nORIGIN_hex1616 ***\nORIGIN_hex1617 ***\nORIGIN_hex1618 ***\nORIGIN_hex1619 ***\nORIGIN_hex1620 ***\nORIGIN_hex1630 ***\nORIGIN_hex1631 ***\nORIGIN_hex1632 ***\nORIGIN_hex1633 ***\nORIGIN_hex1634 ***\nORIGIN_hex1635 ***\nORIGIN_hex1642 ***\nORIGIN_hex1644 ***\nORIGIN_hex1645 ***\nORIGIN_hex1646 ***\nORIGIN_hex1647 ***\nORIGIN_hex1658 ***\nORIGIN_hex1659 ***\nORIGIN_hex1660 ***\nORIGIN_hex1661 ***\nORIGIN_hex1662 ***\nORIGIN_hex1669    \nORIGIN_hex1670 ***\nORIGIN_hex1672 ***\nORIGIN_hex1673 ***\nORIGIN_hex1674 ***\nORIGIN_hex1684 ***\nORIGIN_hex1685 ***\nORIGIN_hex1686 ***\nORIGIN_hex1687 ***\nORIGIN_hex1688 ***\nORIGIN_hex1689 ***\nORIGIN_hex1695    \nORIGIN_hex1699 ***\nORIGIN_hex1700 ***\nORIGIN_hex1701 ***\nORIGIN_hex1712 ***\nORIGIN_hex1713 ***\nORIGIN_hex1714 ***\nORIGIN_hex1716 ***\nORIGIN_hex1723 ***\nORIGIN_hex1726 ***\nORIGIN_hex1727 ***\nORIGIN_hex1728 ***\nORIGIN_hex1738 ***\nORIGIN_hex1739 ***\nORIGIN_hex1740 ***\nORIGIN_hex1741 ***\nORIGIN_hex1743 ***\nORIGIN_hex1744 ***\nORIGIN_hex1748 *  \nORIGIN_hex1749 ***\nORIGIN_hex1753 ***\nORIGIN_hex1754 ***\nORIGIN_hex1765 ***\nORIGIN_hex1766 ***\nORIGIN_hex1767 ***\nORIGIN_hex1768 ***\nORIGIN_hex1770 ***\nORIGIN_hex1771 ***\nORIGIN_hex1776    \nORIGIN_hex1777 ***\nORIGIN_hex1778 ***\nORIGIN_hex1780 ***\nORIGIN_hex1781 ***\nORIGIN_hex1792 ***\nORIGIN_hex1793 ***\nORIGIN_hex1794 ***\nORIGIN_hex1795 ***\nORIGIN_hex1796 ***\nORIGIN_hex1798    \nORIGIN_hex1800 ***\nORIGIN_hex1802 ***\nORIGIN_hex1804    \nORIGIN_hex1805 ***\nORIGIN_hex1806 ***\nORIGIN_hex1807 ***\nORIGIN_hex1808 ***\nORIGIN_hex1820 ***\nORIGIN_hex1821 ***\nORIGIN_hex1822 ***\nORIGIN_hex1823 ***\nORIGIN_hex1824 ***\nORIGIN_hex1827 ***\nORIGIN_hex1828 ***\nORIGIN_hex1829 ***\nORIGIN_hex1831 ***\nORIGIN_hex1833 ***\nORIGIN_hex1834 ***\nORIGIN_hex1835 ***\nORIGIN_hex1846 ***\nORIGIN_hex1847 ***\nORIGIN_hex1848 ***\nORIGIN_hex1849 ***\nORIGIN_hex1850 ***\nORIGIN_hex1852 ***\nORIGIN_hex1853 ***\nORIGIN_hex1854 ***\nORIGIN_hex1855 ***\nORIGIN_hex1856 ***\nORIGIN_hex1857 ***\nORIGIN_hex1858 ***\nORIGIN_hex1859 ***\nORIGIN_hex1860 ***\nORIGIN_hex1861 ***\nORIGIN_hex1862 ***\nORIGIN_hex1874 ***\nORIGIN_hex1875 ***\nORIGIN_hex1876 ***\nORIGIN_hex1877 ***\nORIGIN_hex1878 ***\nORIGIN_hex1879 ***\nORIGIN_hex1882 ***\nORIGIN_hex1883 ***\nORIGIN_hex1884 ***\nORIGIN_hex1886 ***\nORIGIN_hex1887 ***\nORIGIN_hex1888 ***\nORIGIN_hex1889 ***\nORIGIN_hex1890 ***\nORIGIN_hex1900 ***\nORIGIN_hex1901 ***\nORIGIN_hex1902 ***\nORIGIN_hex1903 ***\nORIGIN_hex1904 ***\nORIGIN_hex1905 ***\nORIGIN_hex1906 ***\nORIGIN_hex1907 ***\nORIGIN_hex1908 ***\nORIGIN_hex1909 ***\nORIGIN_hex1910 ***\nORIGIN_hex1912 ***\nORIGIN_hex1913 ***\nORIGIN_hex1914 ***\nORIGIN_hex1916 ***\nORIGIN_hex1928 ***\nORIGIN_hex1929 ***\nORIGIN_hex1930 ***\nORIGIN_hex1931 ***\nORIGIN_hex1932 ***\nORIGIN_hex1933 ***\nORIGIN_hex1934 ***\nORIGIN_hex1935 ***\nORIGIN_hex1936 ***\nORIGIN_hex1937 ***\nORIGIN_hex1938 ***\nORIGIN_hex1940 ***\nORIGIN_hex1941 ***\nORIGIN_hex1942 ***\nORIGIN_hex1954 ***\nORIGIN_hex1955 ***\nORIGIN_hex1956 ***\nORIGIN_hex1958 ***\nORIGIN_hex1959 ***\nORIGIN_hex1960 ***\nORIGIN_hex1961 ***\nORIGIN_hex1962 ***\nORIGIN_hex1963 ***\nORIGIN_hex1964 ***\nORIGIN_hex1967 ***\nORIGIN_hex1968 ***\nORIGIN_hex1982 ***\nORIGIN_hex1983 ***\nORIGIN_hex1984 ***\nORIGIN_hex1985 ***\nORIGIN_hex1986 ***\nORIGIN_hex1987 ***\nORIGIN_hex1988 ***\nORIGIN_hex1989 ***\nORIGIN_hex1990 ***\nORIGIN_hex1991 ***\nORIGIN_hex1992 ***\nORIGIN_hex1994 ***\nORIGIN_hex1995 ***\nORIGIN_hex2009 ***\nORIGIN_hex2010 ***\nORIGIN_hex2011 ***\nORIGIN_hex2012 ***\nORIGIN_hex2013 ***\nORIGIN_hex2014 ***\nORIGIN_hex2015 ***\nORIGIN_hex2016 ***\nORIGIN_hex2017 ***\nORIGIN_hex2021 ***\nORIGIN_hex2036 ***\nORIGIN_hex2037 ***\nORIGIN_hex2038 ***\nORIGIN_hex2039 ***\nORIGIN_hex2040 ***\nORIGIN_hex2041 ***\nORIGIN_hex2042 ***\nORIGIN_hex2043 ***\nORIGIN_hex2044 ***\nORIGIN_hex2046 ***\nORIGIN_hex2049 ***\nORIGIN_hex2063 ***\nORIGIN_hex2064 ***\nORIGIN_hex2065 ***\nORIGIN_hex2066 ***\nORIGIN_hex2067 ***\nORIGIN_hex2068 ***\nORIGIN_hex2069 ***\nORIGIN_hex2070 ***\nORIGIN_hex2071 ***\nORIGIN_hex2072 ***\nORIGIN_hex2074    \nORIGIN_hex2089 ***\nORIGIN_hex2090 .  \nORIGIN_hex2091 ***\nORIGIN_hex2092 ***\nORIGIN_hex2093 ***\nORIGIN_hex2094 ***\nORIGIN_hex2095 ***\nORIGIN_hex2096 ***\nORIGIN_hex2097 ***\nORIGIN_hex2098 ***\nORIGIN_hex2100 ***\nORIGIN_hex2101 ***\nORIGIN_hex2102 ***\nORIGIN_hex2116 ***\nORIGIN_hex2117    \nORIGIN_hex2119 ***\nORIGIN_hex2120 ***\nORIGIN_hex2121 ***\nORIGIN_hex2122 ***\nORIGIN_hex2123 ***\nORIGIN_hex2124 ***\nORIGIN_hex2125 ***\nORIGIN_hex2126 ***\nORIGIN_hex2129 ***\nORIGIN_hex2146 ***\nORIGIN_hex2147 ***\nORIGIN_hex2148 ***\nORIGIN_hex2149 ***\nORIGIN_hex2150 ***\nORIGIN_hex2151 ***\nORIGIN_hex2152 ***\nORIGIN_hex2153 ***\nORIGIN_hex2154 ***\nORIGIN_hex2155 ***\nORIGIN_hex2171    \nORIGIN_hex2172 ***\nORIGIN_hex2174 ***\nORIGIN_hex2175 ***\nORIGIN_hex2176 ***\nORIGIN_hex2177 ***\nORIGIN_hex2178 ***\nORIGIN_hex2179 ***\nORIGIN_hex2180 ***\nORIGIN_hex2181 ***\nORIGIN_hex2182 ***\nORIGIN_hex2200 ***\nORIGIN_hex2201 ***\nORIGIN_hex2202 ***\nORIGIN_hex2203 ***\nORIGIN_hex2204 ***\nORIGIN_hex2205 ***\nORIGIN_hex2206 ***\nORIGIN_hex2207 ***\nORIGIN_hex2208 ***\nORIGIN_hex2209 ***\nORIGIN_hex2227 ***\nORIGIN_hex2228 ***\nORIGIN_hex2229 ***\nORIGIN_hex2230 ***\nORIGIN_hex2231 ***\nORIGIN_hex2233 ***\nORIGIN_hex2234 ***\nORIGIN_hex2235 ***\nORIGIN_hex2254 ***\nORIGIN_hex2255 ***\nORIGIN_hex2256 ***\nORIGIN_hex2257 ***\nORIGIN_hex2258 ***\nORIGIN_hex2259 ***\nORIGIN_hex2260 ***\nORIGIN_hex2261 ***\nORIGIN_hex2262 ***\nORIGIN_hex2281 ***\nORIGIN_hex2282 ***\nORIGIN_hex2283 ***\nORIGIN_hex2284 ***\nORIGIN_hex2285 ***\nORIGIN_hex2286 ***\nORIGIN_hex2287 ***\nORIGIN_hex2288 ***\nORIGIN_hex2308 ***\nORIGIN_hex2309 ***\nORIGIN_hex2310 ***\nORIGIN_hex2311 ***\nORIGIN_hex2312 ***\nORIGIN_hex2313 ***\nORIGIN_hex2314 ***\nORIGIN_hex2315 ***\nORIGIN_hex2316 ***\nORIGIN_hex2317 ***\nORIGIN_hex2335 ***\nORIGIN_hex2336 ***\nORIGIN_hex2337 ***\nORIGIN_hex2338 ***\nORIGIN_hex2339 ***\nORIGIN_hex2340 ***\nORIGIN_hex2341 ***\nORIGIN_hex2342 ***\nORIGIN_hex2343 ***\nORIGIN_hex2362 ***\nORIGIN_hex2363 ***\nORIGIN_hex2364 ***\nORIGIN_hex2365 ***\nORIGIN_hex2366 ***\nORIGIN_hex2367 ***\nORIGIN_hex2368 ***\nORIGIN_hex2369 ***\nORIGIN_hex2370 ***\nORIGIN_hex2371 ***\nORIGIN_hex2389 ***\nORIGIN_hex2390 ***\nORIGIN_hex2391 ***\nORIGIN_hex2392 ***\nORIGIN_hex2393 ***\nORIGIN_hex2394 ***\nORIGIN_hex2395 ***\nORIGIN_hex2396 ***\nORIGIN_hex2397 ***\nORIGIN_hex2398 ***\nORIGIN_hex2416 ***\nORIGIN_hex2417 ***\nORIGIN_hex2418 ***\nORIGIN_hex2419 ***\nORIGIN_hex2420 ***\nORIGIN_hex2422 ***\nORIGIN_hex2423 ***\nORIGIN_hex2424 ***\nORIGIN_hex2425 ***\nORIGIN_hex2426 ***\nORIGIN_hex2443 ***\nORIGIN_hex2444 ***\nORIGIN_hex2445 ***\nORIGIN_hex2448 ***\nORIGIN_hex2449 ***\nORIGIN_hex2450 ***\nORIGIN_hex2451 ***\nORIGIN_hex2452 ***\nORIGIN_hex2471 ***\nORIGIN_hex2472 ***\nORIGIN_hex2473 ***\nORIGIN_hex2476 ***\nORIGIN_hex2478 ***\nORIGIN_hex2479 ***\nORIGIN_hex2480 ***\nORIGIN_hex2497 ***\nORIGIN_hex2498 ***\nORIGIN_hex2499 ***\nORIGIN_hex2500 ***\nORIGIN_hex2503 ***\nORIGIN_hex2504 ***\nORIGIN_hex2505 ***\nORIGIN_hex2525 ***\nORIGIN_hex2526 ***\nORIGIN_hex2527 ***\nORIGIN_hex2531 ** \nORIGIN_hex2532 ***\nORIGIN_hex2533 ***\nORIGIN_hex2551 ***\nORIGIN_hex2552 ***\nORIGIN_hex2553 ***\nORIGIN_hex2554 ***\nORIGIN_hex2557 ***\nORIGIN_hex2559 ***\nORIGIN_hex2579 ***\nORIGIN_hex2580 ***\nORIGIN_hex2581 ***\nORIGIN_hex2584 ***\nORIGIN_hex2605 ***\nORIGIN_hex2606 ***\nORIGIN_hex2607 ***\nORIGIN_hex2608 ***\nORIGIN_hex2609 ***\nORIGIN_hex2610 ***\nORIGIN_hex2611 ***\nORIGIN_hex2633 ***\nORIGIN_hex2634 ***\nORIGIN_hex2635 ***\nORIGIN_hex2636 ***\nORIGIN_hex2637 ***\nORIGIN_hex2638 ***\nORIGIN_hex2660 ***\nORIGIN_hex2661 ***\nORIGIN_hex2662 ***\nORIGIN_hex2663 ***\nORIGIN_hex2664 ***\nORIGIN_hex2665 ***\nORIGIN_hex2687 ***\nORIGIN_hex2688 ***\nORIGIN_hex2689 ***\nORIGIN_hex2690 ***\nORIGIN_hex2691 ***\nORIGIN_hex2693 ***\nORIGIN_hex2714 ***\nORIGIN_hex2715 ***\nORIGIN_hex2716 ***\nORIGIN_hex2717 ***\nORIGIN_hex2718 ***\nORIGIN_hex2719 ***\nORIGIN_hex2742 ***\nORIGIN_hex2743 ***\nORIGIN_hex2744 ***\nORIGIN_hex2745 ***\nORIGIN_hex2746 ***\nORIGIN_hex2747 ***\nORIGIN_hex2768 ***\nORIGIN_hex2769 ***\nORIGIN_hex2770 ***\nORIGIN_hex2771 ***\nORIGIN_hex2772 ***\nORIGIN_hex2773 ***\nORIGIN_hex2795 ***\nORIGIN_hex2796 ***\nORIGIN_hex2797 ***\nORIGIN_hex2798 ***\nORIGIN_hex2799 ***\nORIGIN_hex2800 ***\nORIGIN_hex2801 ***\nORIGIN_hex2822 ***\nORIGIN_hex2823 ***\nORIGIN_hex2824 ***\nORIGIN_hex2825 ***\nORIGIN_hex2826 ***\nORIGIN_hex2827 ***\nORIGIN_hex2850 ***\nORIGIN_hex2851 ***\nORIGIN_hex2852 ***\nORIGIN_hex2853 ***\nORIGIN_hex2854 ***\nORIGIN_hex2877 ***\nORIGIN_hex2878 ***\nORIGIN_hex2879 ***\nORIGIN_hex2880 ***\nORIGIN_hex2881 ***\nORIGIN_hex2905 ***\nORIGIN_hex2906 ***\nORIGIN_hex2907 ***\nORIGIN_hex2908 ***\nORIGIN_hex2909 ***\nORIGIN_hex2931 ***\nORIGIN_hex2932    \nORIGIN_hex2933 ***\nORIGIN_hex2934 ***\nORIGIN_hex2959 ***\nORIGIN_hex2960 ***\nORIGIN_hex2961 ***\nORIGIN_hex2962 ***\nORIGIN_hex2963 ***\nORIGIN_hex2987 ***\nORIGIN_hex2988 ***\nORIGIN_hex2989 ***\nORIGIN_hex2990 ***\nORIGIN_hex3015 ***\nORIGIN_hex3016 ***\nORIGIN_hex3017 ***\nORIGIN_hex3040 ***\nORIGIN_hex3043 ***\nORIGIN_hex3044 ***\nORIGIN_hex3068 ***\nORIGIN_hex3070 ***\nORIGIN_hex3072 ***\nORIGIN_hex3092 ***\nORIGIN_hex3098 ***\nORIGIN_hex3123 ***\nORIGIN_hex3126 ***\nORIGIN_hex3151 ***\nORIGIN_hex3152 ***\nORIGIN_hex3173 ***\nORIGIN_hex3178 ***\nORIGIN_hex3179 ***\nORIGIN_hex3205 ***\nORIGIN_hex3206 ***\nORIGIN_hex3232 ***\nORIGIN_hex3233 ***\nORIGIN_hex3308 ***\nDESTIN_hex146  ***\nDESTIN_hex174  ***\nDESTIN_hex175     \nDESTIN_hex200  ***\nDESTIN_hex201  ***\nDESTIN_hex202  ***\nDESTIN_hex203  ***\nDESTIN_hex227  ***\nDESTIN_hex228  ***\nDESTIN_hex229  ***\nDESTIN_hex230  ***\nDESTIN_hex231  ***\nDESTIN_hex254  ***\nDESTIN_hex255  ***\nDESTIN_hex256  ***\nDESTIN_hex257  ***\nDESTIN_hex258  ***\nDESTIN_hex259  ***\nDESTIN_hex281  ***\nDESTIN_hex282  ***\nDESTIN_hex284  ** \nDESTIN_hex285  ***\nDESTIN_hex286     \nDESTIN_hex312  ***\nDESTIN_hex313  ***\nDESTIN_hex314  ***\nDESTIN_hex336  ***\nDESTIN_hex338  ***\nDESTIN_hex339  ***\nDESTIN_hex340  ***\nDESTIN_hex366  ***\nDESTIN_hex367  ***\nDESTIN_hex391  ***\nDESTIN_hex392  ***\nDESTIN_hex393  ***\nDESTIN_hex394  ***\nDESTIN_hex419     \nDESTIN_hex420  ***\nDESTIN_hex421  ***\nDESTIN_hex445  ***\nDESTIN_hex446  ***\nDESTIN_hex447  ***\nDESTIN_hex472  ***\nDESTIN_hex473  ***\nDESTIN_hex474  ***\nDESTIN_hex499  ***\nDESTIN_hex500  ***\nDESTIN_hex526  ***\nDESTIN_hex527  ***\nDESTIN_hex528  *  \nDESTIN_hex552     \nDESTIN_hex553  ***\nDESTIN_hex554  ***\nDESTIN_hex555  ***\nDESTIN_hex581  ***\nDESTIN_hex582  ***\nDESTIN_hex607  ***\nDESTIN_hex608  ***\nDESTIN_hex609     \nDESTIN_hex610     \nDESTIN_hex611  ***\nDESTIN_hex634  ***\nDESTIN_hex635  ***\nDESTIN_hex636  ***\nDESTIN_hex638  ***\nDESTIN_hex661  ***\nDESTIN_hex662  ***\nDESTIN_hex663  ***\nDESTIN_hex664  ***\nDESTIN_hex665  ***\nDESTIN_hex689  ***\nDESTIN_hex690  ***\nDESTIN_hex692  ***\nDESTIN_hex693  ***\nDESTIN_hex715  ***\nDESTIN_hex716  ***\nDESTIN_hex717  ***\nDESTIN_hex718  ***\nDESTIN_hex719  ***\nDESTIN_hex720  ***\nDESTIN_hex743  ***\nDESTIN_hex744  ***\nDESTIN_hex745  ***\nDESTIN_hex746  ***\nDESTIN_hex747  ***\nDESTIN_hex748  ***\nDESTIN_hex769  ***\nDESTIN_hex770  ***\nDESTIN_hex771  ***\nDESTIN_hex772  ***\nDESTIN_hex773  ***\nDESTIN_hex774  ***\nDESTIN_hex775  ***\nDESTIN_hex776  ***\nDESTIN_hex777  ***\nDESTIN_hex797  ***\nDESTIN_hex798  ***\nDESTIN_hex799  ***\nDESTIN_hex800  ***\nDESTIN_hex802  ***\nDESTIN_hex803  ***\nDESTIN_hex805  ***\nDESTIN_hex806  ***\nDESTIN_hex823  ***\nDESTIN_hex824     \nDESTIN_hex825  ***\nDESTIN_hex826  ***\nDESTIN_hex827  ***\nDESTIN_hex832  ***\nDESTIN_hex833  ***\nDESTIN_hex851  ***\nDESTIN_hex852     \nDESTIN_hex853  ***\nDESTIN_hex854  ***\nDESTIN_hex856  ***\nDESTIN_hex861  ***\nDESTIN_hex862  ***\nDESTIN_hex878  ***\nDESTIN_hex879  ***\nDESTIN_hex880  ***\nDESTIN_hex881  ***\nDESTIN_hex888  ***\nDESTIN_hex889  ***\nDESTIN_hex905  ***\nDESTIN_hex906  ***\nDESTIN_hex907  ***\nDESTIN_hex908  ***\nDESTIN_hex910  ***\nDESTIN_hex932  ***\nDESTIN_hex933  ***\nDESTIN_hex934  ***\nDESTIN_hex935  ***\nDESTIN_hex937  ***\nDESTIN_hex959  ***\nDESTIN_hex960  ***\nDESTIN_hex961  ***\nDESTIN_hex962  ***\nDESTIN_hex986  ***\nDESTIN_hex987  ***\nDESTIN_hex988  ***\nDESTIN_hex989  ***\nDESTIN_hex991  ***\nDESTIN_hex1013 ***\nDESTIN_hex1014 ***\nDESTIN_hex1015 ***\nDESTIN_hex1016 ***\nDESTIN_hex1042 ***\nDESTIN_hex1043 ***\nDESTIN_hex1045 ***\nDESTIN_hex1067    \nDESTIN_hex1068 ***\nDESTIN_hex1069 ***\nDESTIN_hex1070 ***\nDESTIN_hex1078 ***\nDESTIN_hex1093 ***\nDESTIN_hex1094 ***\nDESTIN_hex1095 ***\nDESTIN_hex1096 ***\nDESTIN_hex1097 ***\nDESTIN_hex1099 ***\nDESTIN_hex1100 ***\nDESTIN_hex1122 ***\nDESTIN_hex1123 ***\nDESTIN_hex1124 ***\nDESTIN_hex1125 ***\nDESTIN_hex1126 ***\nDESTIN_hex1127 ***\nDESTIN_hex1128 ***\nDESTIN_hex1132 ***\nDESTIN_hex1147 ***\nDESTIN_hex1148 ***\nDESTIN_hex1149 ***\nDESTIN_hex1150 ***\nDESTIN_hex1151 ***\nDESTIN_hex1152 ***\nDESTIN_hex1153 ***\nDESTIN_hex1154    \nDESTIN_hex1155 ***\nDESTIN_hex1158 ***\nDESTIN_hex1174 ***\nDESTIN_hex1175 ***\nDESTIN_hex1176 ***\nDESTIN_hex1177 ***\nDESTIN_hex1178 ***\nDESTIN_hex1179 ***\nDESTIN_hex1180 ***\nDESTIN_hex1181 ***\nDESTIN_hex1182 ***\nDESTIN_hex1183 ***\nDESTIN_hex1185 ***\nDESTIN_hex1201 ***\nDESTIN_hex1202 ***\nDESTIN_hex1203 ***\nDESTIN_hex1205 .  \nDESTIN_hex1206 ***\nDESTIN_hex1207 ***\nDESTIN_hex1209 ***\nDESTIN_hex1210 ***\nDESTIN_hex1211 ***\nDESTIN_hex1212 ***\nDESTIN_hex1228 ***\nDESTIN_hex1229 ***\nDESTIN_hex1230 ***\nDESTIN_hex1231 ***\nDESTIN_hex1232 ***\nDESTIN_hex1233    \nDESTIN_hex1235 ***\nDESTIN_hex1236 ***\nDESTIN_hex1237 ***\nDESTIN_hex1238 ***\nDESTIN_hex1239 ***\nDESTIN_hex1240 ***\nDESTIN_hex1255 ***\nDESTIN_hex1256 ***\nDESTIN_hex1257 ***\nDESTIN_hex1258 ***\nDESTIN_hex1259 ***\nDESTIN_hex1261 ***\nDESTIN_hex1262 ***\nDESTIN_hex1263 ***\nDESTIN_hex1264 ***\nDESTIN_hex1265 ***\nDESTIN_hex1266 ***\nDESTIN_hex1282 ***\nDESTIN_hex1283 ***\nDESTIN_hex1284 ***\nDESTIN_hex1285 ***\nDESTIN_hex1286 ***\nDESTIN_hex1287 ***\nDESTIN_hex1288 ***\nDESTIN_hex1289 ***\nDESTIN_hex1293 ***\nDESTIN_hex1308 ***\nDESTIN_hex1309 ***\nDESTIN_hex1310 ***\nDESTIN_hex1311 ***\nDESTIN_hex1312 ***\nDESTIN_hex1314 ***\nDESTIN_hex1315    \nDESTIN_hex1316 ***\nDESTIN_hex1318 ***\nDESTIN_hex1319 ***\nDESTIN_hex1320 ***\nDESTIN_hex1335 ***\nDESTIN_hex1336 ***\nDESTIN_hex1337 ***\nDESTIN_hex1338 ***\nDESTIN_hex1339 ***\nDESTIN_hex1340 ***\nDESTIN_hex1341 ***\nDESTIN_hex1342 ***\nDESTIN_hex1343 ***\nDESTIN_hex1347 ***\nDESTIN_hex1348 ***\nDESTIN_hex1362 ***\nDESTIN_hex1363 ***\nDESTIN_hex1364 ***\nDESTIN_hex1366 ***\nDESTIN_hex1367 ***\nDESTIN_hex1368 ***\nDESTIN_hex1369 ***\nDESTIN_hex1370 ***\nDESTIN_hex1372 ***\nDESTIN_hex1374 ***\nDESTIN_hex1375 ***\nDESTIN_hex1389 ***\nDESTIN_hex1390 ***\nDESTIN_hex1391 ***\nDESTIN_hex1392 ***\nDESTIN_hex1394 ***\nDESTIN_hex1396 ***\nDESTIN_hex1397 ***\nDESTIN_hex1401    \nDESTIN_hex1402 ***\nDESTIN_hex1416 ***\nDESTIN_hex1417 ***\nDESTIN_hex1418 ***\nDESTIN_hex1419 ***\nDESTIN_hex1420 ***\nDESTIN_hex1422 ***\nDESTIN_hex1423 ***\nDESTIN_hex1426 ***\nDESTIN_hex1428 ***\nDESTIN_hex1429 ***\nDESTIN_hex1443 ** \nDESTIN_hex1444 ***\nDESTIN_hex1445 ***\nDESTIN_hex1446 ***\nDESTIN_hex1447 ***\nDESTIN_hex1455 ***\nDESTIN_hex1456 ***\nDESTIN_hex1457 ***\nDESTIN_hex1469 ** \nDESTIN_hex1470 ***\nDESTIN_hex1471 ***\nDESTIN_hex1472 ***\nDESTIN_hex1480 ***\nDESTIN_hex1482 ***\nDESTIN_hex1483 ***\nDESTIN_hex1496 ***\nDESTIN_hex1497 ***\nDESTIN_hex1498 ***\nDESTIN_hex1499 ***\nDESTIN_hex1500 ***\nDESTIN_hex1501 ***\nDESTIN_hex1507 ***\nDESTIN_hex1509 ***\nDESTIN_hex1510 ***\nDESTIN_hex1511 ***\nDESTIN_hex1523 ***\nDESTIN_hex1524    \nDESTIN_hex1525    \nDESTIN_hex1526 ***\nDESTIN_hex1527 ***\nDESTIN_hex1534 ***\nDESTIN_hex1536 ***\nDESTIN_hex1537 ***\nDESTIN_hex1550    \nDESTIN_hex1551 ***\nDESTIN_hex1552 ***\nDESTIN_hex1553 ***\nDESTIN_hex1554 ***\nDESTIN_hex1555 ***\nDESTIN_hex1562 ***\nDESTIN_hex1563 ***\nDESTIN_hex1564 ***\nDESTIN_hex1565 .  \nDESTIN_hex1576 ***\nDESTIN_hex1578 ***\nDESTIN_hex1579    \nDESTIN_hex1581 ***\nDESTIN_hex1588 ***\nDESTIN_hex1590 ***\nDESTIN_hex1591 ***\nDESTIN_hex1592 ***\nDESTIN_hex1604 ***\nDESTIN_hex1605 ***\nDESTIN_hex1606 ***\nDESTIN_hex1607 ***\nDESTIN_hex1616 ***\nDESTIN_hex1617 ***\nDESTIN_hex1618 ***\nDESTIN_hex1619 ***\nDESTIN_hex1620 ***\nDESTIN_hex1630 ***\nDESTIN_hex1631 ***\nDESTIN_hex1632 ***\nDESTIN_hex1633 ***\nDESTIN_hex1634 ***\nDESTIN_hex1635 .  \nDESTIN_hex1642 ***\nDESTIN_hex1644 ***\nDESTIN_hex1645 ***\nDESTIN_hex1646 ***\nDESTIN_hex1647 ***\nDESTIN_hex1658 ***\nDESTIN_hex1659 .  \nDESTIN_hex1660 ***\nDESTIN_hex1661 ***\nDESTIN_hex1662 ***\nDESTIN_hex1669 ***\nDESTIN_hex1670 ***\nDESTIN_hex1672 ***\nDESTIN_hex1673 ***\nDESTIN_hex1674 ***\nDESTIN_hex1684 ***\nDESTIN_hex1685 ***\nDESTIN_hex1686 ***\nDESTIN_hex1687 ***\nDESTIN_hex1688 ***\nDESTIN_hex1689 ***\nDESTIN_hex1695 ***\nDESTIN_hex1699 ***\nDESTIN_hex1700 ***\nDESTIN_hex1701 ***\nDESTIN_hex1712 ***\nDESTIN_hex1713 ***\nDESTIN_hex1714 ***\nDESTIN_hex1716 ***\nDESTIN_hex1723 ***\nDESTIN_hex1726 ***\nDESTIN_hex1727 ***\nDESTIN_hex1728 ***\nDESTIN_hex1738 ***\nDESTIN_hex1739 ***\nDESTIN_hex1740 ***\nDESTIN_hex1741 ***\nDESTIN_hex1743 ***\nDESTIN_hex1744 ***\nDESTIN_hex1748 ***\nDESTIN_hex1749 ***\nDESTIN_hex1753 *  \nDESTIN_hex1754 ***\nDESTIN_hex1765 ***\nDESTIN_hex1766 ***\nDESTIN_hex1767 ***\nDESTIN_hex1768 ***\nDESTIN_hex1770 ***\nDESTIN_hex1771 ***\nDESTIN_hex1776 ***\nDESTIN_hex1777 ***\nDESTIN_hex1778 ***\nDESTIN_hex1780 ***\nDESTIN_hex1781 ***\nDESTIN_hex1791 ***\nDESTIN_hex1792 ***\nDESTIN_hex1793 *  \nDESTIN_hex1794 ***\nDESTIN_hex1795 ***\nDESTIN_hex1796 ***\nDESTIN_hex1798 ***\nDESTIN_hex1800 ***\nDESTIN_hex1802 ***\nDESTIN_hex1804 ***\nDESTIN_hex1805 ***\nDESTIN_hex1806 ***\nDESTIN_hex1807 ***\nDESTIN_hex1808 ***\nDESTIN_hex1820 ***\nDESTIN_hex1821 ***\nDESTIN_hex1822 ***\nDESTIN_hex1823 ***\nDESTIN_hex1824 ** \nDESTIN_hex1827 ***\nDESTIN_hex1828 ***\nDESTIN_hex1829 ***\nDESTIN_hex1831 ***\nDESTIN_hex1833 ***\nDESTIN_hex1834 ***\nDESTIN_hex1835 ***\nDESTIN_hex1846 ***\nDESTIN_hex1847 ***\nDESTIN_hex1848 ***\nDESTIN_hex1849 ***\nDESTIN_hex1850 ***\nDESTIN_hex1852 ***\nDESTIN_hex1853 ***\nDESTIN_hex1854 ***\nDESTIN_hex1855 ***\nDESTIN_hex1856 ***\nDESTIN_hex1857 ***\nDESTIN_hex1858 ***\nDESTIN_hex1859 ***\nDESTIN_hex1860 ***\nDESTIN_hex1861 ***\nDESTIN_hex1862 ***\nDESTIN_hex1874 ***\nDESTIN_hex1875 ***\nDESTIN_hex1876 ***\nDESTIN_hex1877 ***\nDESTIN_hex1878 ***\nDESTIN_hex1879 ***\nDESTIN_hex1882 ***\nDESTIN_hex1883 ***\nDESTIN_hex1884 ***\nDESTIN_hex1886 ***\nDESTIN_hex1887 ***\nDESTIN_hex1888 ***\nDESTIN_hex1889 ***\nDESTIN_hex1890 ***\nDESTIN_hex1900 ***\nDESTIN_hex1901 .  \nDESTIN_hex1902 ***\nDESTIN_hex1903 ***\nDESTIN_hex1904 ***\nDESTIN_hex1905 ***\nDESTIN_hex1906 ***\nDESTIN_hex1907 ***\nDESTIN_hex1908 ***\nDESTIN_hex1909 ***\nDESTIN_hex1910 ***\nDESTIN_hex1912 ***\nDESTIN_hex1913 ***\nDESTIN_hex1914 ***\nDESTIN_hex1916 ***\nDESTIN_hex1928 ***\nDESTIN_hex1929 ***\nDESTIN_hex1930 ***\nDESTIN_hex1931 ***\nDESTIN_hex1932 ***\nDESTIN_hex1933 ***\nDESTIN_hex1934 ***\nDESTIN_hex1935 ***\nDESTIN_hex1936 ***\nDESTIN_hex1937 ***\nDESTIN_hex1938 ***\nDESTIN_hex1940 ***\nDESTIN_hex1941 ***\nDESTIN_hex1942 ***\nDESTIN_hex1954 ***\nDESTIN_hex1955 ***\nDESTIN_hex1956 ***\nDESTIN_hex1958 ***\nDESTIN_hex1959 ***\nDESTIN_hex1960 *  \nDESTIN_hex1961 ***\nDESTIN_hex1962 ***\nDESTIN_hex1963 ***\nDESTIN_hex1964 ***\nDESTIN_hex1967 ***\nDESTIN_hex1968 ***\nDESTIN_hex1982 ***\nDESTIN_hex1983    \nDESTIN_hex1984 ***\nDESTIN_hex1985 ***\nDESTIN_hex1986 ***\nDESTIN_hex1987 ***\nDESTIN_hex1988 ***\nDESTIN_hex1989 ***\nDESTIN_hex1990 ***\nDESTIN_hex1991 ***\nDESTIN_hex1992 ** \nDESTIN_hex1994 ***\nDESTIN_hex1995 ***\nDESTIN_hex2009 ***\nDESTIN_hex2010 *  \nDESTIN_hex2011    \nDESTIN_hex2012 ***\nDESTIN_hex2013 ***\nDESTIN_hex2014 ***\nDESTIN_hex2015 ***\nDESTIN_hex2016 ***\nDESTIN_hex2017 ***\nDESTIN_hex2021 ***\nDESTIN_hex2036 ***\nDESTIN_hex2037 ***\nDESTIN_hex2038 ***\nDESTIN_hex2039 ***\nDESTIN_hex2040 ***\nDESTIN_hex2041 ***\nDESTIN_hex2042 ***\nDESTIN_hex2043 ***\nDESTIN_hex2044 ***\nDESTIN_hex2046 ***\nDESTIN_hex2049 ***\nDESTIN_hex2063 ***\nDESTIN_hex2064 .  \nDESTIN_hex2065 ***\nDESTIN_hex2066 ***\nDESTIN_hex2067 ***\nDESTIN_hex2068 ***\nDESTIN_hex2069 ***\nDESTIN_hex2070 ***\nDESTIN_hex2071 ** \nDESTIN_hex2072 ***\nDESTIN_hex2074 ***\nDESTIN_hex2089 ***\nDESTIN_hex2090 ***\nDESTIN_hex2091 ***\nDESTIN_hex2092 ***\nDESTIN_hex2093 *  \nDESTIN_hex2094 ***\nDESTIN_hex2095 ***\nDESTIN_hex2096 ***\nDESTIN_hex2097 ***\nDESTIN_hex2098 ***\nDESTIN_hex2100 ***\nDESTIN_hex2101 ***\nDESTIN_hex2102 ***\nDESTIN_hex2116 ***\nDESTIN_hex2117 ***\nDESTIN_hex2119 ***\nDESTIN_hex2120    \nDESTIN_hex2121 ***\nDESTIN_hex2122 ***\nDESTIN_hex2123 ***\nDESTIN_hex2124 ***\nDESTIN_hex2125 ***\nDESTIN_hex2126 ***\nDESTIN_hex2129 ***\nDESTIN_hex2146 ***\nDESTIN_hex2147 ***\nDESTIN_hex2148 ***\nDESTIN_hex2149 ***\nDESTIN_hex2150 ***\nDESTIN_hex2151 ***\nDESTIN_hex2152 ***\nDESTIN_hex2153 ***\nDESTIN_hex2154 ***\nDESTIN_hex2155 ***\nDESTIN_hex2171 ***\nDESTIN_hex2172 ***\nDESTIN_hex2174 ***\nDESTIN_hex2175 *  \nDESTIN_hex2176 ***\nDESTIN_hex2177 ***\nDESTIN_hex2178 ***\nDESTIN_hex2179 ***\nDESTIN_hex2180 ***\nDESTIN_hex2181 ***\nDESTIN_hex2182 ***\nDESTIN_hex2200 ***\nDESTIN_hex2201 ***\nDESTIN_hex2202 ***\nDESTIN_hex2203 ***\nDESTIN_hex2204 ***\nDESTIN_hex2205 ***\nDESTIN_hex2206 ***\nDESTIN_hex2207 ***\nDESTIN_hex2208 ***\nDESTIN_hex2209 ***\nDESTIN_hex2227 ***\nDESTIN_hex2228 ***\nDESTIN_hex2229 ***\nDESTIN_hex2230 ***\nDESTIN_hex2231 ***\nDESTIN_hex2233 ***\nDESTIN_hex2234 ***\nDESTIN_hex2235 ***\nDESTIN_hex2254 ***\nDESTIN_hex2255 ***\nDESTIN_hex2256 ***\nDESTIN_hex2257 ***\nDESTIN_hex2258 ***\nDESTIN_hex2259 ***\nDESTIN_hex2260 ***\nDESTIN_hex2261 ***\nDESTIN_hex2262 ***\nDESTIN_hex2281 ***\nDESTIN_hex2282 ** \nDESTIN_hex2283 ***\nDESTIN_hex2284 ***\nDESTIN_hex2285 ***\nDESTIN_hex2286 ***\nDESTIN_hex2287 ***\nDESTIN_hex2288 ***\nDESTIN_hex2308 ***\nDESTIN_hex2309 ***\nDESTIN_hex2310 ***\nDESTIN_hex2311    \nDESTIN_hex2312 ***\nDESTIN_hex2313    \nDESTIN_hex2314 .  \nDESTIN_hex2315 ***\nDESTIN_hex2316 ***\nDESTIN_hex2317 ***\nDESTIN_hex2335 ***\nDESTIN_hex2336 *  \nDESTIN_hex2337 ***\nDESTIN_hex2338 ***\nDESTIN_hex2339 ***\nDESTIN_hex2340 ***\nDESTIN_hex2341 ***\nDESTIN_hex2342 ***\nDESTIN_hex2343 ***\nDESTIN_hex2362 ***\nDESTIN_hex2363 ***\nDESTIN_hex2364 ***\nDESTIN_hex2365    \nDESTIN_hex2366 ***\nDESTIN_hex2367 ***\nDESTIN_hex2368 ***\nDESTIN_hex2369 ***\nDESTIN_hex2370    \nDESTIN_hex2371 ***\nDESTIN_hex2389 ***\nDESTIN_hex2390 ** \nDESTIN_hex2391 ***\nDESTIN_hex2392 ** \nDESTIN_hex2393 ***\nDESTIN_hex2394 ***\nDESTIN_hex2395 ***\nDESTIN_hex2396 ***\nDESTIN_hex2397 ***\nDESTIN_hex2398 ***\nDESTIN_hex2416 ***\nDESTIN_hex2417 ***\nDESTIN_hex2418 ***\nDESTIN_hex2419 ** \nDESTIN_hex2420 ***\nDESTIN_hex2422 ***\nDESTIN_hex2423 ***\nDESTIN_hex2424 ***\nDESTIN_hex2425    \nDESTIN_hex2426 ***\nDESTIN_hex2443 ***\nDESTIN_hex2444 ***\nDESTIN_hex2445 ***\nDESTIN_hex2448 ***\nDESTIN_hex2449 ***\nDESTIN_hex2450 ***\nDESTIN_hex2451 ***\nDESTIN_hex2452 ***\nDESTIN_hex2471 ***\nDESTIN_hex2472 ***\nDESTIN_hex2473 *  \nDESTIN_hex2476 ** \nDESTIN_hex2478 ***\nDESTIN_hex2479 ***\nDESTIN_hex2480 ***\nDESTIN_hex2497 ***\nDESTIN_hex2498 ***\nDESTIN_hex2499 ***\nDESTIN_hex2500 ***\nDESTIN_hex2503 ***\nDESTIN_hex2504 ***\nDESTIN_hex2505 ***\nDESTIN_hex2525 ***\nDESTIN_hex2526 ***\nDESTIN_hex2527    \nDESTIN_hex2531 ***\nDESTIN_hex2532 ***\nDESTIN_hex2533 ***\nDESTIN_hex2551 ***\nDESTIN_hex2552 ***\nDESTIN_hex2553 ***\nDESTIN_hex2554 ***\nDESTIN_hex2557 ***\nDESTIN_hex2559 ***\nDESTIN_hex2579 ***\nDESTIN_hex2580 ***\nDESTIN_hex2581 ***\nDESTIN_hex2584 ***\nDESTIN_hex2605 ***\nDESTIN_hex2606 ***\nDESTIN_hex2607 ***\nDESTIN_hex2608 ***\nDESTIN_hex2609 ***\nDESTIN_hex2610 ***\nDESTIN_hex2611    \nDESTIN_hex2633 ***\nDESTIN_hex2634 ***\nDESTIN_hex2635 ***\nDESTIN_hex2636 ***\nDESTIN_hex2637 ***\nDESTIN_hex2638 ***\nDESTIN_hex2660 ***\nDESTIN_hex2661 ***\nDESTIN_hex2662 ***\nDESTIN_hex2663 ***\nDESTIN_hex2664 ***\nDESTIN_hex2665    \nDESTIN_hex2687 ***\nDESTIN_hex2688 ***\nDESTIN_hex2689 ***\nDESTIN_hex2690 ***\nDESTIN_hex2691 ***\nDESTIN_hex2693 ***\nDESTIN_hex2714 ***\nDESTIN_hex2715 ***\nDESTIN_hex2716 ***\nDESTIN_hex2717 ***\nDESTIN_hex2718 ***\nDESTIN_hex2719 ***\nDESTIN_hex2742 ***\nDESTIN_hex2743 ***\nDESTIN_hex2744 ** \nDESTIN_hex2745 ***\nDESTIN_hex2746 ***\nDESTIN_hex2747 ***\nDESTIN_hex2768 ***\nDESTIN_hex2769 ***\nDESTIN_hex2770 ***\nDESTIN_hex2771 ***\nDESTIN_hex2772 ***\nDESTIN_hex2773 ***\nDESTIN_hex2795 ***\nDESTIN_hex2796 ***\nDESTIN_hex2797 ***\nDESTIN_hex2798 ***\nDESTIN_hex2799 ***\nDESTIN_hex2800 *  \nDESTIN_hex2801 ***\nDESTIN_hex2822 ***\nDESTIN_hex2823 ***\nDESTIN_hex2824    \nDESTIN_hex2825 ***\nDESTIN_hex2826 ***\nDESTIN_hex2827 ***\nDESTIN_hex2850 ***\nDESTIN_hex2851 ***\nDESTIN_hex2852 ***\nDESTIN_hex2853 ***\nDESTIN_hex2854 ***\nDESTIN_hex2877 ***\nDESTIN_hex2878 ***\nDESTIN_hex2879 ***\nDESTIN_hex2880 ***\nDESTIN_hex2881 ***\nDESTIN_hex2905    \nDESTIN_hex2906 ***\nDESTIN_hex2907 ***\nDESTIN_hex2908 ***\nDESTIN_hex2909 ***\nDESTIN_hex2931 *  \nDESTIN_hex2932 ***\nDESTIN_hex2933 .  \nDESTIN_hex2934 ***\nDESTIN_hex2959 ***\nDESTIN_hex2960 ***\nDESTIN_hex2961 ***\nDESTIN_hex2962 ***\nDESTIN_hex2963 ***\nDESTIN_hex2987 ***\nDESTIN_hex2988 ***\nDESTIN_hex2989 ***\nDESTIN_hex2990    \nDESTIN_hex3015 ***\nDESTIN_hex3016 ***\nDESTIN_hex3017 ***\nDESTIN_hex3040 ***\nDESTIN_hex3043 ***\nDESTIN_hex3044 ***\nDESTIN_hex3068 ***\nDESTIN_hex3070 ***\nDESTIN_hex3072 ***\nDESTIN_hex3092 ***\nDESTIN_hex3098 ***\nDESTIN_hex3123 ***\nDESTIN_hex3126 ***\nDESTIN_hex3151 ***\nDESTIN_hex3152 ***\nDESTIN_hex3173 ***\nDESTIN_hex3178 ***\nDESTIN_hex3179 ***\nDESTIN_hex3205 ***\nDESTIN_hex3206 ***\nDESTIN_hex3232    \nDESTIN_hex3233 ***\nDESTIN_hex3308 ***\ndist           ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 98250529  on 65050  degrees of freedom\nResidual deviance: 25093776  on 63410  degrees of freedom\nAIC: 25454082\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nThere is an inverse relationship between Distance and Number of Trips: More trips are made when the distance is nearer, while less trips are made when the distance is further.\n\n\n\n\n\nCode\nCalcRSquared(dbcSIM$data$TOTAL_TRIPS, dbcSIM$fitted.values)\n\n\n[1] 0.5736803132\n\n\n\n\n\n\n\n\nInsights\n\n\n\nWith reference to the R2 above, it can be concluded that the model accounts for 57.36% of the variation of flows."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#poisson-regression-models-comparison",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#poisson-regression-models-comparison",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Poisson Regression Models Comparison",
    "text": "Poisson Regression Models Comparison\nLastly, use compare_performance() of the performance package to identify the better model. First, create a list called model_list using the code chunk below.\n\n\nCode\nmodel_list &lt;- list(unconstrained = uncSIM,\n                   originConstrained=orcSIM,\n                   destinConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\n\nNext, compute the RMSE of all the models in model_list using the code chunk below.\n\n\nCode\ncompare_performance(model_list, metrics = \"RMSE\")\n\n\n# Comparison of Model Performance Indices\n\nName              | Model |     RMSE\n------------------------------------\nunconstrained     |   glm | 1569.416\noriginConstrained |   glm | 1474.109\ndestinConstrained |   glm | 1375.017\ndoublyConstrained |   glm | 1174.174\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe print above reveals that doubly constrained SIM is the best model as it has the smallest RMSE value of 1174.174. This is supported by the R2 value of doubly constrained SIM being the highest at 0.5736. However, given that doubly constrained SIM considers only the distance decay effect and not propulsive and/or attractiveness variables, practically, it may not be the best SIM in terms of uncovering the factors driving urban commuting flows. In contrast, the second best model of destination constrained SIM identifies the key propulsive variables driving commuters to destination sites."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualise-fitted-values",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualise-fitted-values",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Visualise Fitted Values",
    "text": "Visualise Fitted Values\nThe observed and fitted values of the destination constrained SIM will be visualised on a scatterplot.\nIn the code chunk below, the fitted values from the destination constrained SIM is extracted then appended to the flow_data data frame. rename() is used to rename the newly added column.\n\n\nCode\ndf &lt;- as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\ninter_zonal_flow &lt;- flow_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\n\nThe scatterplot will then be created using geom_point() and other appropriate functions of ggplot2 package.\n\n\nCode\nggplot(data = inter_zonal_flow,\n                aes(x = decTRIPS,\n                    y = TOTAL_TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,100000),\n                  ylim=c(0,100000)) + \n  labs(title = \"Observed vs. Fitted Values for Destination constrained SIM\",\n       x = \"Fitted Values\", y = \"Observed Values\")\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nMost of the values fall far from the linear regression line, suggesting that the model can be further refined in terms of accuracy."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-spatial-weights",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-spatial-weights",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare Spatial Weights",
    "text": "Prepare Spatial Weights\nThere are three different matrices that can be used to describe the connectivity between TAZ: contiguity, fixed distance and adaptive distance.\nBefore fixed distance weights can be derived, there is a need to determine the upper limit for distance band by using the steps below:\n\nst_centroid() is used to convert the hexagon grids into a point geometry.\nknearneigh() of spdep is then used to return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using. The returned knn object is then converted into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nLastly, return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected (longlat = FALSE), and in km if otherwise (longlat = TRUE). Remove the list structure of the returned object by using unlist().\n\n\n\nCode\ncoords &lt;- hex_grid_bounded2 %&gt;%\n  filter(busstop_count &gt; 0) %&gt;%\n  select(geometry) %&gt;%\n  st_centroid()\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = FALSE))\n\n# Print summary report\nsummary(k1dists)\n\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n 750.0000  750.0000  750.0000  753.6959  750.0000 1984.3135 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 1299.03m, so using this as the upper threshold (rounded up to the next integer) gives certainty that all units will have at least one neighbour.\nNext , the code chunk below will be used to compute the three spatial weights at one go as follows:\n\npoly2nb() of spdep package is used to build a neighbours list based on regions with contiguous boundaries.\ndnearneigh() of **spdep* package is used to identifies neighbours of region centroids by Euclidean distance in the metric of the points between lower and and upper (less than or equal to) bounds.\nknn2nb() and knearneigh() is used to to build the adaptive spatial weights.\n\nLastly, list() is used to keep these three spatial weights in a single list class called hexgrid_nb.\n\n\nCode\ncentroids &lt;- suppressWarnings({\n    st_point_on_surface(st_geometry(hex_grid_bounded2))})\n\nhexgrid_nb &lt;- list(\n  \"by_contiguity\" = poly2nb(hex_grid_bounded2),\n  \"by_distance\" = dnearneigh(centroids, \n                             d1 = 0, d2 = 1300),\n  \"by_knn\" = knn2nb(knearneigh(centroids, 6))\n)\n\n\nThe code chunk below prints a summary of the spatial weights, which reveals that by using contiguity weights, there is at least one TAZ that does not have any neighbours.\n\n\nCode\nhexgrid_nb\n\n\n$by_contiguity\nNeighbour list object:\nNumber of regions: 1945 \nNumber of nonzero links: 10790 \nPercentage nonzero weights: 0.2852214828 \nAverage number of links: 5.547557841 \n1 region with no links:\n1935\n\n$by_distance\nNeighbour list object:\nNumber of regions: 1945 \nNumber of nonzero links: 21126 \nPercentage nonzero weights: 0.5584419876 \nAverage number of links: 10.86169666 \n\n$by_knn\nNeighbour list object:\nNumber of regions: 1945 \nNumber of nonzero links: 11670 \nPercentage nonzero weights: 0.3084832905 \nAverage number of links: 6 \nNon-symmetric neighbours list"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-flow-data",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-flow-data",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare Flow Data",
    "text": "Prepare Flow Data\nFrom the existing flow_data data frame that was assembled earlier, only the required variables are selected using the select() function.\n\n\nCode\nflow_data1 &lt;- flow_data %&gt;%\n  select(ORIGIN_hex, DESTIN_hex, TOTAL_TRIPS, dist)"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-explanatory-variables",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-explanatory-variables",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare Explanatory Variables",
    "text": "Prepare Explanatory Variables\nAs both origin propulsive and destination attractiveness variables are required, this data set will be prepared by dropping the geometry (using st_drop_geometry()) from the existing hex_grid_bounded3 sf data frame that was assembled earlier.\n\n\nCode\nexplanatory &lt;- hex_grid_bounded3 %&gt;%\n  st_drop_geometry()"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-spflow-objects",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#prepare-spflow-objects",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Prepare spflow objects",
    "text": "Prepare spflow objects\nThe development version (0.1.0.9010) of spflow will be used instead of the released version (0.1.0). The code chunk below will be used to install the development version of spflow package.\n\n\nCode\ndevtools::install_github(\"LukeCe/spflow\")\n\n\nNext, load spflow package into the R environment.\n\n\nCode\nlibrary(spflow)\n\n\nThree spflow objects are required:\n\nspflow_network-class is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation.\nspflow_network_pair-class is an S4 class that holds information on O-D pairs. Each O-D pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class, and likewise for the destinations.\nspflow_network_multi-class is an S4 class that gathers information on multiple objects of types spflow_network-class and spflow_network_pair-class. Its purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the O-D pairs is consistent (similar to relational databases)."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#creating-spflow_network-class-objects",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#creating-spflow_network-class-objects",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Creating spflow_network-class objects",
    "text": "Creating spflow_network-class objects\nspflow_network-class can be created using spflow_network() function of spflow package. For this model, the fixed distance based neighbourhood structure will be chosen.\n\n\nCode\nhex_net &lt;- spflow_network(\n  id_net = \"sg\",  # assign an id name, can give it any input\n  node_neighborhood = nb2mat(hexgrid_nb$by_distance),\n  node_data = explanatory,\n  node_key_column = \"index\"\n)\n\nhex_net\n\n\nSpatial network nodes with id: sg\n--------------------------------------------------\nNumber of nodes: 1945\nAverage number of links per node: 10.862\nDensity of the neighborhood matrix: 0.56% (non-zero connections)\n\nData on nodes:\n     index busstop_count housing_count biz_count school_count fin_count\n1       33             0             0         0            0         0\n2       34             0             0         0            0         0\n3       35             0             0         0            0         0\n4       36             0             0         0            0         0\n5       37             0             0         0            0         0\n6       60             0             0         0            0         0\n---    ---           ---           ---       ---          ---       ---\n1940  3884             0             0         0            0         0\n1941  3904             0             0         0            0         0\n1942  3908             0             0         0            0         0\n1943  3909             0             0         0            0         0\n1944  3910             0             0         0            0         0\n1945  3937             0             0         0            0         0\n     mrtlrt_count\n1               0\n2               0\n3               0\n4               0\n5               0\n6               0\n---           ---\n1940            0\n1941            0\n1942            0\n1943            0\n1944            0\n1945            0\n\n\nspflow_network_pair-class can be created using spflow_network_pair() function of spflow package.\n\n\nCode\nhex_net_pairs &lt;- spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = flow_data1,\n  orig_key_column = \"ORIGIN_hex\",\n  dest_key_column = \"DESTIN_hex\"\n)\n\nhex_net_pairs\n\n\nSpatial network pair with id: sg_sg\n--------------------------------------------------\nOrigin network id: sg (with 820 nodes)\nDestination network id: sg (with 821 nodes)\nNumber of pairs: 65051\nCompleteness of pairs: 9.66% (65051/673220)\n\nData on node-pairs:\n    DESTIN_hex ORIGIN_hex TOTAL_TRIPS    dist\n1          201        118           1    2250\n2          228        118           2    3000\n3          254        118           2 1984.31\n4          281        118           1 2598.08\n5          285        118          56 6873.86\n6          228        146          13    2250\n---        ---        ---         ---     ---\n11        2769       3308         535 7611.67\n21        2742       3308           8 7901.74\n31        2877       3308          37 6139.01\n41        2931       3308           3 5408.33\n51        3173       3308           7 1984.31\n61        3232       3308           1 5952.94\n\n\nspflow_network_multi-class can be created using spflow_network_multi() function of spflow package and only works on spflow_network-class and spflow_network_pair-class.\n\n\nCode\nhex_multi_net &lt;- spflow_network_multi(hex_net, hex_net_pairs)\n\nhex_multi_net\n\n\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  sg\nContains 1 spatial network pairs  \n    With id :  sg_sg\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS       C_PAIRS    C_ORIG\n          sg          sg       sg_sg        1.72% 65051/3783025 1945/1945\n    C_DEST\n 1945/1945"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#correlation-analysis",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#correlation-analysis",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nMulticollinearity refers to a situation in which more than two explanatory variables in a multiple regression model are highly linearly related. In this situation, the coefficient estimates of the multiple regression may change erratically in response to small changes in the data or the procedure used to fit the model. To avoid including explanatory variables that are highly correlated, spflow provides two functions:\n\npair_cor() to create a correlation matrix, and\ncor_image() to plot the correlation matrix as a correlogram.\n\n\n\nCode\n# Generate explanatory variables names\nvar_name &lt;- explanatory %&gt;%\n  select(-(index)) %&gt;%\n  names()\n\n# Generate the formula dynamically\ncor_formula &lt;- log(1 + TOTAL_TRIPS) ~ \n  busstop_count + \n  housing_count + \n  biz_count + \n  school_count + \n  fin_count + \n  mrtlrt_count + \n  P_(log(dist + 1))\n\ncor_mat &lt;- pair_cor(\n  hex_multi_net, \n  spflow_formula = cor_formula, \n  add_lags_x = FALSE)\n\ncolnames(cor_mat) &lt;- paste0(\n  substr(\n    colnames(cor_mat),1,3),\"...\")\n\ncor_image(cor_mat)\n\n\n\n\n\nGiven that there are no variable pairs that are very highly correlated with one another, all variables will be used to calibrate the SEIM."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#model-calibration",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#model-calibration",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Model Calibration",
    "text": "Model Calibration\nThere are currently three estimators of spatial econometric interaction models supported by spflow package:\n\nMaximum likelihood estimation (MLE) – default estimation procedure.\nSpatial two-stage least squares (S2SLS) – activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = \"s2sls\").\nBayesian Markov Chain Monte Carlo (MCMC) – activate the MCMC estimation via the estimation_control argument using the input spflow_control(estimation_method = \"mcmc\").\n\nThe code chunk below will be used to calibrate a base model based on the defaults (model 9 and MLE estimator). The spflow function offers a formula interface adapted to spatial interaction models, which has the following structure:\n\nY ~ O_(X1) + D_(X2) + I_(X3) + P_(X4)\n\n\nO_(…) and D_(…) indicate which variables are used as characteristics of the origins and destinations respectively.\nI_(…) indicates variables that should be used for the intra-regional parameters.\nP_(…) declares which variables describe origin-destination pairs, which usually will include a measure of distance (distance decay).\n\n\n\nCode\nbase_model &lt;- spflow(\n  spflow_formula = log(1 + TOTAL_TRIPS) ~ \n    O_(busstop_count +\n         housing_count + \n         biz_count + \n         school_count + \n         mrtlrt_count) +\n    D_(busstop_count +\n         biz_count + \n         school_count + \n         fin_count + \n         mrtlrt_count) +\n    P_(log(dist + 1)),\n  spflow_networks = hex_multi_net)\n\nbase_model\n\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + TOTAL_TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                         est     sd   t.stat  p.val\nrho_d                  0.812  0.006  134.701  0.000\nrho_o                  0.820  0.006  135.153  0.000\nrho_w                 -0.999  0.013  -76.331  0.000\n(Intercept)            5.991  0.099   60.529  0.000\n(Intra)                   NA     NA       NA     NA\nD_busstop_count        0.017  0.002   10.336  0.000\nD_busstop_count.lag1  -0.030  0.004   -7.046  0.000\nD_biz_count            0.005  0.000   10.637  0.000\nD_biz_count.lag1      -0.001  0.001   -0.845  0.398\nD_school_count         0.061  0.006    9.599  0.000\nD_school_count.lag1    0.018  0.026    0.700  0.484\nD_fin_count            0.004  0.000   10.558  0.000\nD_fin_count.lag1      -0.005  0.001   -3.399  0.001\nD_mrtlrt_count         0.047  0.008    5.614  0.000\nD_mrtlrt_count.lag1   -0.079  0.027   -2.941  0.003\nO_busstop_count        0.021  0.002   11.996  0.000\nO_busstop_count.lag1  -0.038  0.005   -7.943  0.000\nO_housing_count        0.000  0.000   30.082  0.000\nO_housing_count.lag1   0.000  0.000    5.384  0.000\nO_biz_count            0.000  0.000    0.993  0.321\nO_biz_count.lag1      -0.005  0.001   -5.389  0.000\nO_school_count         0.017  0.006    2.589  0.010\nO_school_count.lag1    0.148  0.027    5.427  0.000\nO_mrtlrt_count         0.058  0.008    7.496  0.000\nO_mrtlrt_count.lag1   -0.194  0.019  -10.081  0.000\nP_log(dist + 1)       -0.510  0.012  -43.006  0.000\n\n--------------------------------------------------\nR2_corr: 0.6213425508  \nObservations: 65051  \nModel coherence: Unknown\n\n\n\nt.stat refers to the coefficients: a positive number means there is a direct relationship between the explanatory variable and the dependent variable, while a negative number implies an inverse relationship. p.val shows whether the coefficients are statistically significant, and hence, a good explanatory variable, or not statistically significant, and hence, not a good explanatory variable.\n\n\n\n\n\n\n\nInsights\n\n\n\nThe R2 value is 0.6213, which means the model accounts for 62.13% of the variation of flows. While not perfect, this value is much higher than the R2 values of the SIM seen earlier.\nAmong the destination explanatory variables:\n\nBus stop counts, Financial services counts and MRT/LRT station counts and their lags all have a t.stat that is statistically significant. This means that such counts within the TAZ and in neighbouring TAZ will affect the attractiveness of the specific destination TAZ.\nHowever, for all three variables, their coefficients are positive while the coefficients of their lags are negative. This means that the more of such counts there are in the destination TAZ, the more trips are made to that TAZ. And the more of such counts there are in neighbouring TAZ, the less trips are made to that TAZ.\nSchool and Business counts have a t.stat that is statistically significant, but their lags are not. This means that such counts within the TAZ will affect the attractiveness of the TAZ but counts in neighbouring zones do not affect the attractiveness of the specific TAZ.\n\nAmong the origin explanatory variables:\n\nBus stop counts and MRT/LRT station counts and their lags both have a t.stat that is statistically significant. This means that they are good explanatory variable as such counts within the TAZ and in neighbouring TAZ will affect the propulsiveness of the specific origin TAZ.\nHowever, for both variables, their coefficients are positive while the coefficients of their lags are negative. This means that the more of such counts there are in the origin TAZ, the more trips are made from that origin TAZ. And the more of such counts there are in neighbouring TAZ, the less trips are made from that origin TAZ.\nSchool and Housing counts and their lags also have a t.stat that is statistically significant, making them good explanatory variables. For these two variables, their coefficients and the coefficients of their lags are positive, which means the more of such counts there are in the origin TAZ and its neighbouring TAZ, the more trips are made from that origin TAZ.\nBusiness counts has a t.stat that is not statistically significant, but their lags are statistically significant. This means that while the business counts of the origin TAZ is not a good explanatory variable, counts in the neighbouring TAZ are: the more of such counts there are in the neighbouring TAZ, the less trips are made from that origin TAZ."
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#residual-diagnostics",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#residual-diagnostics",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Residual diagnostics",
    "text": "Residual diagnostics\nIn building explanatory models, it is important to check if the model calibrate conform to the statistical assumption of the statistical methods used. *spflow package provides several functions to support residual diagnostics needs. In the code chunk below, spflow_moran_plots() is used.\n\n\nCode\nold_par &lt;- par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\n\nspflow_moran_plots(base_model)"
  },
  {
    "objectID": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualise-fitted-values-1",
    "href": "Take_Home_Exercise/Ex2/Take_home_Ex2.html#visualise-fitted-values-1",
    "title": "2: Applied Spatial Interaction Models - Case study of Singapore public bus commuter flows",
    "section": "Visualise Fitted Values",
    "text": "Visualise Fitted Values\nLastly, the observed and fitted values of the SEIM will be visualised on a scatterplot.\nIn the code chunk below, the fitted values from the destination constrained SIM is extracted then appended to the flow_data data frame. rename() is used to rename the newly added column.\n\n\nCode\nmodel.df &lt;- as_tibble(base_model@spflow_indicators) %&gt;%\n  mutate(FITTED_Y = round(exp(FITTED),0))\n\ninter_zonal_flow2 &lt;- flow_data %&gt;%\n  left_join(model.df) %&gt;%\n  mutate(diff = (FITTED_Y-TOTAL_TRIPS))\n\n\nThe scatterplot will then be created using geom_point() and other appropriate functions of ggplot2 package.\n\n\nCode\nggplot(data = inter_zonal_flow2,\n                aes(x = FITTED,\n                    y = ACTUAL)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  coord_cartesian(xlim=c(0,14),\n                  ylim=c(0,14)) + \n  labs(title = \"Observed vs. Fitted Values for SEIM\",\n       x = \"Fitted Values\", y = \"Observed Values\")\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nMost of the values fall closer to the linear regression line as compared to the destination constrained SIM."
  }
]