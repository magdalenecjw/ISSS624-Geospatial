---
title: "1a: Geospatial Data Wrangling with R"
author: "Magdalene Chan"
date: 2023-11-17
execute: 
  warning: false
---

## Getting started

The code chunk below uses `p_load()` of **pacman** package to check if the required packages have been installed on the computer. If they are, the packages will be launched.

> **sf** package is used for importing, managing, and processing geospatial data.

```{r}
pacman::p_load(sf, tidyverse)
```

The data sets used are:

-   Master Plan 2014 Subzone Boundary (Web) (last updated Dec 2014) from [data.gov.sg](https://beta.data.gov.sg/collections/1708/view) retrieved on 17 Nov 2023
-   Pre-Schools Location (last updated Jul 2023) from [data.gov.sg](https://beta.data.gov.sg/collections/2064/view) retrieved on 17 Nov 2023
-   Cycling Path (last updated Jul 2023) from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=Cycling%20Path) retrieved on 17 Nov 2023
-   Singapore listing data (last updated Sep 2023) from [Inside Airbnb](http://insideairbnb.com/get-the-data/) retrieved on 17 Nov 2023

## Importing Data

### Import Polygon Feature Data in shapefile format

The code chunk below uses `st_read()` function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a **polygon feature data** frame.

> When the input geospatial data is in shapefile format, two arguments are used: (1) `dsn` to define the data path and (2) `layer` to provide the shapefile name. File extensions (e.g. .shp, .dbf, .prj, .shx) need not be specified.

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates system.

> **svy21** (or **Singapore SVY21 Projected Coordinate System**) is a coordinates system used by Singapore that is based on the Transverse Mercator projection from geographical coordinates referenced to the WGS 84 ellipsoid.

> The bounding box provides the x extend and y extend of the data.

### Import Polyline feature data in shapefile format

The code chunk below uses `st_read()` function of **sf** package to import `CyclingPath` shapefile into R as **line feature data** frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

There are a total of 2558 features and 2 fields in `cyclingpath` linestring feature data frame. `cyclingpath` is also in **svy21** projected coordinates system.

### Import GIS data in kml format

The code chunk below uses `st_read()` function of **sf** package to import `PreSchoolsLocation` into R.

> In kml format, the complete path and the kml file extension must be provided.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

There are a total of 2290 features and 2 fields in `preschool` point feature data frame. Unlike the above two simple feature data frames, `preschool` is in **wgs84** geographic coordinates system.

> **wgs84** is the current version of the World Geodetic System (WGS), which is a standard used in cartography, geodesy, and satellite navigation including GPS.

## Checking data content of Simple Feature Data Frame

The column in the **sf** data.frame that contains the geometries is a list, of class **sfc**. While we can retrieve the geometry list-column in this case by `mpsz$geom` or `mpsz[[1]]`, a more general way is to use `st_geometry()` as shown in the code chunk below.

`st_geometry()` displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

```{r}
st_geometry(mpsz)
```

`glimpse()` of the **dplyr** package reveals associated attribute information such as data type of each fields.

```{r}
glimpse(mpsz)
```

`head()` in **Base R** provides complete information of a feature object.

> To change the number of observations, set argument `n` to a desired reasonable number.

```{r}
head(mpsz, n=5)
```

## Plotting Geospatial Data

In geospatial data analytics, it is insufficient to just look at the feature information. To visualise the geospatial features, `plot()` of **R Graphic** can be used.

> The default plot of an sf object is a multi-plot. The plot below shows the first 9 out of 15 attributes. To change the number of attributes plotted, set the `max.plot` argument to a desired reasonable number.

```{r}
plot(mpsz)
```

To plot only the geometry, wrap `st_geometry()` around the data frame before plotting.

```{r}
plot(st_geometry(mpsz))
```

It is also possible to plot a specific attribute of the sf object.

```{r}
plot(mpsz["PLN_AREA_C"])
```

::: callout-important
`plot()` provides a plot of the geospatial object for a quick look. For high cartographic quality plots, other R packages such as **tmap** should be used.
:::

## Map Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two sets of geospatial data, they must be projected using a similar coordinate system.

::: callout-important

Projection Transformation

:   The process of projecting a simple feature data frame from one coordinate system to another coordinate system.
:::

### Assigning EPSG code to a simple feature data frame

Common issues that could happen when importing geospatial data into R are:

1.  Missing coordinate system of the source data (such as due to missing .proj for ESRI shapefile).
2.  Wrongly assigned coordinate system during the importing process.

To look at the coordinate system of `mpsz` simple feature data frame, `st_crs()` of **sf** package is used.

```{r}
st_crs(mpsz)
```

The EPSG indicated in the print above is 9001. However, the `mpsz` data frame is projected in **svy21**, and the correct EPSG code for **svy21** should be 3414.

To assign the correct EPSG code to `mpsz` data frame, `st_set_crs()` of **sf** package is used.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

After calling the revised `mpsz3414` data frame, the EPSG code indicated is now 3414.

```{r}
st_crs(mpsz3414)
```

### Transforming data to projected coordinate system

In geospatial analytics, it is common to transform the original data from geographic coordinate system to projected coordinate system. Geographic coordinate system is inappropriate if the analysis requires the use of distance or/and area measurements. `st_transform()` of **sf** package reprojects data frames from one coordinate system to another coordinate system mathematically.

As `preschool` data frame is in **wgs84** coordinates system, it can be transformed into **svy21** projected coordinates system (CRS = 3413).

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

`preschool3414` data frame is now in **svy21** projected coordinate system.

```{r}
st_geometry(preschool3414)
```

> The transformation can be verified by reviewing the x and y extend of the data indicated in the Bounding Box. Most geographic coordinate systems use a 0-360 range of decimal degree. As `preschool3414` data frame has undergone projection transformation, the x and y extend of the data is now substantially larger than 360.

## Importing and Converting Aspatial Data

In practice, it is common to come across aspatial data with two fields that capture the x- and y-coordinates of the data points. Aspatial data can be converted from a tibble data frame into a **simple feature data frame** for further geospatial analysis.

### Importing Aspatial Data as tibble data frame

The code chunk below uses `read_csv()` function of **readr** package to import the `listings.csv` data from Airbnb. The output R object is a tibble data frame called `listings`.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

The code chunk below shows l`ist()` of **Base R** instead of `glimpse()` to examine if the data file has been imported correctly.

```{r}
list(listings) 
```

The `listing` tibble data frame consists of 3483 rows and 18 columns. For the next phase, the columns `latitude` and `longitude` will be used.

> The columns `latitude` and `longitude` are in decimal degree format, suggesting that the data could be in **wgs84** geographic coordinates system.

### Converting tibble data frame to simple feature data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using `st_as_sf()` of **sf** packages.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

> `coords` argument requires column name of the x-coordinates first followed by the column name of the y-coordinates.

> `crs` argument requires the coordinates system in EPSG format. EPSG 4326 is **wgs84** geographic coordinates system and EPSG 3414 is **svy21** projected coordinates system. Refer to [epsg.io](epsg.io) for other country's EPSG codes.

```{r}
glimpse(listings_sf)
```

The table above shows the content of `listing_sf`. A new column called `geometry` has been added into the data frame while the `longitude` and `latitude` columns have been dropped.

## Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions such as buffering and point-in-polygon count.

### Buffering

::: callout-important

Buffer

:   A defined zone or area created around a geographic feature such as a point, line, or polygon.
:::

The purpose of creating a buffer is to identify and analyze spatial relationships between features within that distance. The buffer is typically measured in units of distance (e.g. meters, kilometers) and represents a specific radius or width around the feature.

Using the `CyclingPath` data set as an example:

Assuming there are plans to upgrade the exiting cycling path and 5m of reserved land on both sides of the current cycling path must be acquired, **determine the extend of the land needed to be acquired and their total area**.

To do so, `st_buffer()` of **sf** package is used to compute the 5-meter buffers around cycling paths.

> `dist` argument takes in the numeric buffer distance to be computed.

> `nQuadSegs` argument refers to 'the number of segments per quadrant' and is set by default to 30 (meaning circles created by buffers are composed of 4 × 30 = 120 lines). This argument may be useful to include when the memory consumed by the output of a buffer operation is a major concern (in which case it should be reduced) or when very high precision is needed (in which case it should be increased).

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

This is followed by calculating the area of the buffers then summed up to derive the total land involved.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)

sum(buffer_cycling$AREA)
```

### Point-in-polygon count

::: callout-important

Point-in-polygon count

:   The number of points in each polygon given a set of points and a set of polygons.
:::

In computational geometry, the point-in-polygon (PIP) problem asks whether a given point in the plane lies inside, outside, or on the boundary of a polygon.

Using the `PreSchoolsLocation` data set as an example:

Assuming a preschool group wants to study the distribution of preschools in each Planning Subzone, **determine the number and density of preschools within each Planning Subzone**.

`st_intersects()` of **sf** package is used to identify pre-schools located inside each Planning Subzone. `lengths()` of **Base R** is then used to calculate numbers of pre-schools that fall inside each Subzone and `summary()` displays the summary statistics of the newly derived `PreSch Count` field.

> `st_intersects()` and `st_intersection()` are different! `st_intersects` provides a logical result that informs whether there is indeed an intersection between two sets of geometries, while `st_intersection()` perform geometric set operations and provide the intersection, difference or symmetric difference between two sets of geometries.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))

summary(mpsz3414$`PreSch Count`)
```

To list the Planning Subzone with the most number of pre-schools, use `top_n()` of **dplyr** package.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Next, the code chunk below uses `st_area()` of **sf** package to derive the area of each Planning Subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

`mutate()` of **dplyr** package is then used to compute the density.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis

In practice, many geospatial analytics start with Exploratory Data Analysis. The use of appropriate **ggplot2** functions can help create functional statistical graphs for EDA purposes.

### Histogram on Preschool Density

A histogram is plotted using `hist()` of **R Graphics** to reveal the distribution of `PreSch Density`.

```{r}
hist(mpsz3414$`PreSch Density`)
```

> While the syntax is easy to use, there is limited room for further customisation to improve the output to meet publication quality.

In the code chunk below, appropriate **ggplot2** functions will be used including `geom_histogram()`.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="white",
                 fill="steelblue") +
  labs(title = "Are preschools even distributed in Singapore?",
       subtitle= "Most Planning Subzones have a low preschool density (<10 preschools per km sq)\nOne Planning Subzone has a preschool density of >30 preschools per km sq",
      x = "Preschool density (per km sq)",
      y = "Frequency")
```

### Scatterplot between Preschool Density and Preschool Count

In the code chunk below, `geom_point()` is used to plot a scatterplot between Preschool Density and Preschool Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="steelblue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "Scatterplot of Preschool Density and Preschool Count",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
