---
title: "3: 	Processing and Visualising Flow Data"
author: "Magdalene Chan"
date: 2023-12-2
date-modified: "last-modified"
execute: 
  warning: false
---

Spatial interaction represents the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.

Each spatial interaction is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin/destination matrix, or a spatial interaction matrix.

## Getting Started

The code chunk below uses p_load() of pacman package to check if the required packages have been installed on the computer. If they are, the packages will be launched.

-   **sf** package is used for importing, managing, and processing geospatial data.
-   **tmap** package is used for thematic mapping.
-   **tidyverse** package is used for importing, integrating, wrangling and visualising data.
-   **stplanr** package is used for plotting desire lines on maps.

```{r}
pacman::p_load(sf, tmap, tidyverse, stplanr, DT)
```

## Preparing Flow Data

### Import OD data

Firstly, import the `Passenger Volume by Origin Destination Bus Stops` data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

Display the `odbus` tibble data table by using the code chunk below.

```{r}
glimpse(odbus)
```

A quick check of `odbus` tibble data frame shows that the values in `ORIGIN_PT_CODE` and `DESTINATON_PT_CODE` are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

### Extract commuting flow data

The code chunk below extracts the commuting flows on weekdays between 6 and 9 oâ€™clock.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

The table below shows the content of odbus6_9

```{r}
datatable(odbus6_9)
```

The output is saved in rds format for future use.

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

The code chunk below will be used to import the saved `odbus6_9.rds` into R environment.

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

## Working with Geospatial data

For this exercise, two geospatial data will be used:

- BusStop: This data provides the location of bus stop as at last quarter of 2022.
- MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

Both data sets are in ESRI shapefile format.

### Import geospatial data

The two code chunks below are used to import both sets of geospatial data. 

> `st_read()` function of **sf** package is used to import the shapefile into R as sf data frame.
> `st_transform()` function of **sf** package is used to transform the projection to crs 3414.

```{r}
BusStop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

The code chunk below will be used to write the `mpsz` sf tibble data frame into an rds file for future use.

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```

## Geospatial Data Wrangling

The code chunk below populates the planning subzone code (i.e. `SUBZONE_C`) of `mpsz` sf data frame into `busstop` sf data frame.

> `st_intersection()` is used to perform point and polygon overlay and the output will be in point sf object.
> `select()` of **dplyr** package is then use to retain only `BUS_STOP_N` and `SUBZONE_C` in the `busstop_mpsz` sf data frame.
> Five bus stops are excluded in the resultant data frame as they are outside of Singapore's boundary. 

```{r}
busstop_mpsz <- st_intersection(BusStop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()

datatable(busstop_mpsz)
```

Before moving to the next step, save the output into rds format.

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

Next, append the planning subzone code from `busstop_mpsz` data frame onto `odbus6_9` data frame.

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

It is good practice to check for duplicating records before continuing further with the data wrangling. 

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate
```

As there duplicated records found, the code chunk below will be used to retain the unique records.

```{r}
od_data <- unique(od_data)
```

Check that the duplicating records issue has now been resolved.

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate
```

Next, update the `od_data` data frame with the planning subzone codes.

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

Again, check for duplicates and retain unique records.

```{r}
#| code-fold: true
#| code-summary: "Show code"

duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

Save the output into an rds file format.

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

## Visualising Spatial Interaction
Desire lines are rays connecting a site to associated location points. This section details the steps to prepare a desire line using the **stplanr** package.

### Remove intra-zonal flows

The code chunk below will be used to remove intra-zonal flows which will not be plotted. 

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

### Create desire lines

In this code chunk below, `od2line()` of **stplanr** package is used to create the desire lines.

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### Visualise desire lines

To visualise the resulting desire lines, the code chunk below is used.
> Rendering may take longer due to the transparency argument i.e. alpha.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

In the chart above, the flow data is very messy and highly skewed. As such, it may be better to focus on selected flows, such as flows greater than or equal to 5000 as shown below.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
